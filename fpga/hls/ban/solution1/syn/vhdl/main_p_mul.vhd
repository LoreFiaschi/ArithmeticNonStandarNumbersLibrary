-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_p_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_a_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_a_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_b_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    num_b_ce0 : OUT STD_LOGIC;
    num_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    num_b_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    num_b_ce1 : OUT STD_LOGIC;
    num_b_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    num_b_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    num_b_ce2 : OUT STD_LOGIC;
    num_b_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    num_b_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1201_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1201_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1201_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1201_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1201_p_ce : OUT STD_LOGIC;
    grp_fu_1205_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1205_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1205_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1205_p_ce : OUT STD_LOGIC;
    grp_fu_1209_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1209_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1209_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1209_p_ce : OUT STD_LOGIC;
    grp_fu_1213_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1213_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1213_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1213_p_ce : OUT STD_LOGIC );
end;


architecture behav of main_p_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal num_b_load_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_b_load_1_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_b_load_2_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln169_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln169_reg_468 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln172_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_256_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln172_22_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_22_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_284_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln172_23_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_23_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_248_fu_312_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_248_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mul_1_i_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_i_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_254_fu_332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_254_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_256_fu_339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_256_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_258_fu_345_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_258_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_71_reg_563 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln187_fu_365_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln187_reg_570 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln187_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal aux_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal aux_ce0 : STD_LOGIC;
    signal aux_we0 : STD_LOGIC;
    signal aux_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln166_2_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln187_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_62 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln169_fu_240_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_69_fu_70 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal num_res_2_write_assign_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_1_write_assign_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_0_write_assign_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_247_fu_181_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln166_fu_177_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln166_fu_189_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_200_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_117_fu_211_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln173_fu_252_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln172_fu_266_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_284_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln172_12_fu_294_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_248_fu_312_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_sqrt_aux_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    aux_U : component main_sqrt_aux_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => aux_address0,
        ce0 => aux_ce0,
        we0 => aux_we0,
        d0 => tmp_258_reg_558,
        q0 => aux_q0);

    mux_32_32_1_1_U221 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => num_a_1_read,
        din2 => num_a_2_read,
        din3 => trunc_ln173_fu_252_p1,
        dout => tmp_fu_256_p5);

    mux_32_32_1_1_U222 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => num_a_1_read,
        din2 => num_a_2_read,
        din3 => tmp_s_fu_284_p4,
        dout => tmp_s_fu_284_p5);

    mux_32_32_1_1_U223 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => num_a_1_read,
        din2 => num_a_2_read,
        din3 => tmp_248_fu_312_p4,
        dout => tmp_248_fu_312_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_69_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln169_fu_234_p2 = ap_const_lv1_1))) then 
                i_69_fu_70 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_69_fu_70 <= add_ln187_reg_570;
            end if; 
        end if;
    end process;

    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_62 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln169_fu_234_p2 = ap_const_lv1_0))) then 
                i_fu_62 <= add_ln169_fu_240_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln187_reg_570 <= add_ln187_fu_365_p2;
                i_71_reg_563 <= i_69_fu_70;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln169_fu_234_p2 = ap_const_lv1_0))) then
                icmp_ln172_22_reg_486 <= icmp_ln172_22_fu_272_p2;
                icmp_ln172_23_reg_496 <= icmp_ln172_23_fu_300_p2;
                icmp_ln172_reg_476 <= icmp_ln172_fu_246_p2;
                tmp_248_reg_501 <= tmp_248_fu_312_p5;
                tmp_reg_481 <= tmp_fu_256_p5;
                tmp_s_reg_491 <= tmp_s_fu_284_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln172_22_reg_486 = ap_const_lv1_1))) then
                mul_1_i_reg_536 <= grp_fu_1209_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln172_23_reg_496 = ap_const_lv1_1))) then
                mul_2_i_reg_541 <= grp_fu_1213_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln172_reg_476 = ap_const_lv1_1))) then
                mul_i_reg_531 <= grp_fu_1205_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                num_b_load_1_reg_458 <= num_b_q1;
                num_b_load_2_reg_463 <= num_b_q0;
                num_b_load_reg_453 <= num_b_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (i_71_reg_563 = ap_const_lv2_0))) then
                num_res_0_write_assign_fu_82 <= aux_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (i_71_reg_563 = ap_const_lv2_1))) then
                num_res_1_write_assign_fu_78 <= aux_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_71_reg_563 = ap_const_lv2_1)) and not((i_71_reg_563 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                num_res_2_write_assign_fu_74 <= aux_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_254_reg_546 <= tmp_254_fu_332_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_256_reg_552 <= tmp_256_fu_339_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_258_reg_558 <= tmp_258_fu_345_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln169_reg_468(2 downto 0) <= zext_ln169_fu_230_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln169_reg_468(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln169_fu_234_p2, ap_CS_fsm_state20, icmp_ln187_fu_359_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln169_fu_234_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln187_fu_359_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln169_fu_240_p2 <= std_logic_vector(unsigned(i_fu_62) + unsigned(ap_const_lv3_1));
    add_ln172_12_fu_294_p2 <= std_logic_vector(unsigned(i_fu_62) + unsigned(ap_const_lv3_6));
    add_ln172_fu_266_p2 <= std_logic_vector(unsigned(i_fu_62) + unsigned(ap_const_lv3_7));
    add_ln187_fu_365_p2 <= std_logic_vector(unsigned(i_69_fu_70) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20, icmp_ln187_fu_359_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln187_fu_359_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20, icmp_ln187_fu_359_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln187_fu_359_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= num_res_0_write_assign_fu_82;
    ap_return_1 <= num_res_1_write_assign_fu_78;
    ap_return_2 <= num_res_2_write_assign_fu_74;

    aux_address0_assign_proc : process(zext_ln169_reg_468, ap_CS_fsm_state20, ap_CS_fsm_state19, zext_ln187_fu_354_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            aux_address0 <= zext_ln187_fu_354_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            aux_address0 <= zext_ln169_reg_468(3 - 1 downto 0);
        else 
            aux_address0 <= "XXX";
        end if; 
    end process;


    aux_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            aux_ce0 <= ap_const_logic_1;
        else 
            aux_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            aux_we0 <= ap_const_logic_1;
        else 
            aux_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_117_fu_211_p2 <= std_logic_vector(unsigned(sub_ln166_fu_189_p2) + unsigned(ap_const_lv6_2));
    empty_fu_200_p2 <= std_logic_vector(unsigned(sub_ln166_fu_189_p2) + unsigned(ap_const_lv6_1));
    grp_fu_1201_p_ce <= ap_const_logic_1;
    grp_fu_1201_p_din0 <= grp_fu_160_p0;
    grp_fu_1201_p_din1 <= grp_fu_160_p1;
    grp_fu_1201_p_opcode <= ap_const_lv2_0;
    grp_fu_1205_p_ce <= ap_const_logic_1;
    grp_fu_1205_p_din0 <= tmp_reg_481;
    grp_fu_1205_p_din1 <= num_b_load_reg_453;
    grp_fu_1209_p_ce <= ap_const_logic_1;
    grp_fu_1209_p_din0 <= tmp_s_reg_491;
    grp_fu_1209_p_din1 <= num_b_load_1_reg_458;
    grp_fu_1213_p_ce <= ap_const_logic_1;
    grp_fu_1213_p_din0 <= tmp_248_reg_501;
    grp_fu_1213_p_din1 <= num_b_load_2_reg_463;

    grp_fu_160_p0_assign_proc : process(mul_i_reg_531, tmp_254_reg_546, tmp_256_reg_552, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_160_p0 <= tmp_256_reg_552;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_160_p0 <= tmp_254_reg_546;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_160_p0 <= mul_i_reg_531;
        else 
            grp_fu_160_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_160_p1_assign_proc : process(mul_1_i_reg_536, mul_2_i_reg_541, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_160_p1 <= mul_2_i_reg_541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_160_p1 <= mul_1_i_reg_536;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_160_p1 <= ap_const_lv32_0;
        else 
            grp_fu_160_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln169_fu_234_p2 <= "1" when (i_fu_62 = ap_const_lv3_5) else "0";
    icmp_ln172_22_fu_272_p2 <= "1" when (unsigned(add_ln172_fu_266_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln172_23_fu_300_p2 <= "1" when (unsigned(add_ln172_12_fu_294_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln172_fu_246_p2 <= "1" when (unsigned(i_fu_62) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln187_fu_359_p2 <= "1" when (i_69_fu_70 = ap_const_lv2_3) else "0";
    num_b_address0 <= p_cast2_fu_217_p1(6 - 1 downto 0);
    num_b_address1 <= p_cast_fu_206_p1(6 - 1 downto 0);
    num_b_address2 <= zext_ln166_2_fu_195_p1(6 - 1 downto 0);

    num_b_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_b_ce0 <= ap_const_logic_1;
        else 
            num_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    num_b_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_b_ce1 <= ap_const_logic_1;
        else 
            num_b_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    num_b_ce2_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_b_ce2 <= ap_const_logic_1;
        else 
            num_b_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast2_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_117_fu_211_p2),64));
    p_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_200_p2),64));
    sub_ln166_fu_189_p2 <= std_logic_vector(unsigned(tmp_247_fu_181_p3) - unsigned(zext_ln166_fu_177_p1));
    tmp_247_fu_181_p3 <= (num_b_offset & ap_const_lv2_0);
    tmp_248_fu_312_p4 <= (trunc_ln173_fu_252_p1 xor ap_const_lv2_2);
    tmp_254_fu_332_p3 <= 
        grp_fu_1201_p_dout0 when (icmp_ln172_reg_476(0) = '1') else 
        ap_const_lv32_0;
    tmp_256_fu_339_p3 <= 
        grp_fu_1201_p_dout0 when (icmp_ln172_22_reg_486(0) = '1') else 
        tmp_254_reg_546;
    tmp_258_fu_345_p3 <= 
        grp_fu_1201_p_dout0 when (icmp_ln172_23_reg_496(0) = '1') else 
        tmp_256_reg_552;
    tmp_s_fu_284_p4 <= std_logic_vector(unsigned(trunc_ln173_fu_252_p1) + unsigned(ap_const_lv2_3));
    trunc_ln173_fu_252_p1 <= i_fu_62(2 - 1 downto 0);
    zext_ln166_2_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln166_fu_189_p2),64));
    zext_ln166_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_b_offset),6));
    zext_ln169_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_62),64));
    zext_ln187_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_69_fu_70),64));
end behav;
