-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_main_Pipeline_VITIS_LOOP_458_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln542 : IN STD_LOGIC_VECTOR (5 downto 0);
    b_num_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_num_ce0 : OUT STD_LOGIC;
    b_num_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_num_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_num_ce1 : OUT STD_LOGIC;
    b_num_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sub_ln155 : IN STD_LOGIC_VECTOR (5 downto 0);
    res_3_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    res_3_out_ap_vld : OUT STD_LOGIC;
    grp_fu_4235_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4235_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4235_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_4235_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_4235_p_ce : OUT STD_LOGIC;
    grp_fu_12733_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_12733_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_12733_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_12733_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_12733_p_ce : OUT STD_LOGIC );
end;


architecture behav of main_main_Pipeline_VITIS_LOOP_458_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln458_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal solved_reg_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_3_reg_112 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln458_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln458_reg_331_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln459_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln459_reg_357 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln459_2_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal solved_2_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln459_1_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln459_2_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_52 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln458_fu_151_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_34 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln459_fu_157_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln459_fu_161_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln459_1_fu_172_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln459_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln459_1_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_192_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln459_fu_202_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln459_1_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln459_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_fu_210_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln459_1_fu_220_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln459_3_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln459_2_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln459_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln459_1_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln459_1_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln459_2_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln459_3_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln464_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln459_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln464_1_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln459_4_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln458_fu_145_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_52 <= add_ln458_fu_151_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_52 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    res_3_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                res_3_reg_112 <= ap_const_lv1_0;
            elsif (((icmp_ln458_reg_331_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                res_3_reg_112 <= or_ln459_2_fu_288_p2;
            end if; 
        end if;
    end process;

    solved_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                solved_reg_100 <= ap_const_lv1_0;
            elsif (((icmp_ln458_reg_331_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                solved_reg_100 <= solved_2_fu_318_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln458_reg_331 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln459_reg_357 <= and_ln459_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln458_reg_331 <= icmp_ln458_fu_145_p2;
                icmp_ln458_reg_331_pp0_iter1_reg <= icmp_ln458_reg_331;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln458_fu_151_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_34) + unsigned(ap_const_lv2_1));
    add_ln459_1_fu_172_p2 <= std_logic_vector(unsigned(sub_ln155) + unsigned(zext_ln459_fu_157_p1));
    add_ln459_fu_161_p2 <= std_logic_vector(unsigned(sub_ln542) + unsigned(zext_ln459_fu_157_p1));
    and_ln459_1_fu_266_p2 <= (grp_fu_4235_p_dout0 and and_ln459_reg_357);
    and_ln459_2_fu_282_p2 <= (sel_tmp20_fu_276_p2 and and_ln459_1_fu_266_p2);
    and_ln459_fu_260_p2 <= (or_ln459_fu_236_p2 and or_ln459_1_fu_254_p2);
    and_ln464_1_fu_306_p2 <= (xor_ln459_fu_300_p2 and and_ln464_fu_271_p2);
    and_ln464_fu_271_p2 <= (grp_fu_12733_p_dout0 and and_ln459_reg_357);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln458_fu_145_p2)
    begin
        if (((icmp_ln458_fu_145_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln458_reg_331)
    begin
        if (((icmp_ln458_reg_331 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_34_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, i_fu_52)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_34 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_34 <= i_fu_52;
        end if; 
    end process;

    b_num_address0 <= zext_ln459_2_fu_178_p1(6 - 1 downto 0);
    b_num_address1 <= zext_ln459_1_fu_167_p1(6 - 1 downto 0);

    b_num_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_num_ce0 <= ap_const_logic_1;
        else 
            b_num_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_num_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_num_ce1 <= ap_const_logic_1;
        else 
            b_num_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln459_1_fu_206_p1 <= b_num_q0;
    bitcast_ln459_fu_188_p1 <= b_num_q1;
    grp_fu_12733_p_ce <= ap_const_logic_1;
    grp_fu_12733_p_din0 <= b_num_q1;
    grp_fu_12733_p_din1 <= b_num_q0;
    grp_fu_12733_p_opcode <= ap_const_lv5_2;
    grp_fu_4235_p_ce <= ap_const_logic_1;
    grp_fu_4235_p_din0 <= b_num_q1;
    grp_fu_4235_p_din1 <= b_num_q0;
    grp_fu_4235_p_opcode <= ap_const_lv5_4;
    icmp_ln458_fu_145_p2 <= "1" when (ap_sig_allocacmp_i_34 = ap_const_lv2_3) else "0";
    icmp_ln459_1_fu_230_p2 <= "1" when (trunc_ln459_fu_202_p1 = ap_const_lv23_0) else "0";
    icmp_ln459_2_fu_242_p2 <= "0" when (tmp_139_fu_210_p4 = ap_const_lv8_FF) else "1";
    icmp_ln459_3_fu_248_p2 <= "1" when (trunc_ln459_1_fu_220_p1 = ap_const_lv23_0) else "0";
    icmp_ln459_fu_224_p2 <= "0" when (tmp_s_fu_192_p4 = ap_const_lv8_FF) else "1";
    or_ln459_1_fu_254_p2 <= (icmp_ln459_3_fu_248_p2 or icmp_ln459_2_fu_242_p2);
    or_ln459_2_fu_288_p2 <= (res_3_reg_112 or and_ln459_2_fu_282_p2);
    or_ln459_3_fu_294_p2 <= (solved_reg_100 or and_ln459_1_fu_266_p2);
    or_ln459_4_fu_312_p2 <= (and_ln464_1_fu_306_p2 or and_ln459_2_fu_282_p2);
    or_ln459_fu_236_p2 <= (icmp_ln459_fu_224_p2 or icmp_ln459_1_fu_230_p2);
    res_3_out <= res_3_reg_112;

    res_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln458_reg_331, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln458_reg_331 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_3_out_ap_vld <= ap_const_logic_1;
        else 
            res_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp20_fu_276_p2 <= (solved_reg_100 xor ap_const_lv1_1);
    solved_2_fu_318_p2 <= (solved_reg_100 or or_ln459_4_fu_312_p2);
    tmp_139_fu_210_p4 <= bitcast_ln459_1_fu_206_p1(30 downto 23);
    tmp_s_fu_192_p4 <= bitcast_ln459_fu_188_p1(30 downto 23);
    trunc_ln459_1_fu_220_p1 <= bitcast_ln459_1_fu_206_p1(23 - 1 downto 0);
    trunc_ln459_fu_202_p1 <= bitcast_ln459_fu_188_p1(23 - 1 downto 0);
    xor_ln459_fu_300_p2 <= (or_ln459_3_fu_294_p2 xor ap_const_lv1_1);
    zext_ln459_1_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln459_fu_161_p2),64));
    zext_ln459_2_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln459_1_fu_172_p2),64));
    zext_ln459_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_34),6));
end behav;
