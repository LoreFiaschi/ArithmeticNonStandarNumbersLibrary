// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_p_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_a_1_read,
        num_a_2_read,
        num_b_address0,
        num_b_ce0,
        num_b_q0,
        num_b_address1,
        num_b_ce1,
        num_b_q1,
        num_b_address2,
        num_b_ce2,
        num_b_q2,
        num_b_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        grp_fu_1201_p_din0,
        grp_fu_1201_p_din1,
        grp_fu_1201_p_opcode,
        grp_fu_1201_p_dout0,
        grp_fu_1201_p_ce,
        grp_fu_1205_p_din0,
        grp_fu_1205_p_din1,
        grp_fu_1205_p_dout0,
        grp_fu_1205_p_ce,
        grp_fu_1209_p_din0,
        grp_fu_1209_p_din1,
        grp_fu_1209_p_dout0,
        grp_fu_1209_p_ce,
        grp_fu_1213_p_din0,
        grp_fu_1213_p_din1,
        grp_fu_1213_p_dout0,
        grp_fu_1213_p_ce
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_a_1_read;
input  [31:0] num_a_2_read;
output  [5:0] num_b_address0;
output   num_b_ce0;
input  [31:0] num_b_q0;
output  [5:0] num_b_address1;
output   num_b_ce1;
input  [31:0] num_b_q1;
output  [5:0] num_b_address2;
output   num_b_ce2;
input  [31:0] num_b_q2;
input  [3:0] num_b_offset;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] grp_fu_1201_p_din0;
output  [31:0] grp_fu_1201_p_din1;
output  [1:0] grp_fu_1201_p_opcode;
input  [31:0] grp_fu_1201_p_dout0;
output   grp_fu_1201_p_ce;
output  [31:0] grp_fu_1205_p_din0;
output  [31:0] grp_fu_1205_p_din1;
input  [31:0] grp_fu_1205_p_dout0;
output   grp_fu_1205_p_ce;
output  [31:0] grp_fu_1209_p_din0;
output  [31:0] grp_fu_1209_p_din1;
input  [31:0] grp_fu_1209_p_dout0;
output   grp_fu_1209_p_ce;
output  [31:0] grp_fu_1213_p_din0;
output  [31:0] grp_fu_1213_p_din1;
input  [31:0] grp_fu_1213_p_dout0;
output   grp_fu_1213_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg num_b_ce0;
reg num_b_ce1;
reg num_b_ce2;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [31:0] num_b_load_reg_453;
reg   [31:0] num_b_load_1_reg_458;
reg   [31:0] num_b_load_2_reg_463;
wire   [63:0] zext_ln169_fu_230_p1;
reg   [63:0] zext_ln169_reg_468;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln172_fu_246_p2;
reg   [0:0] icmp_ln172_reg_476;
wire   [0:0] icmp_ln169_fu_234_p2;
wire   [31:0] tmp_fu_256_p5;
reg   [31:0] tmp_reg_481;
wire   [0:0] icmp_ln172_22_fu_272_p2;
reg   [0:0] icmp_ln172_22_reg_486;
wire   [31:0] tmp_s_fu_284_p5;
reg   [31:0] tmp_s_reg_491;
wire   [0:0] icmp_ln172_23_fu_300_p2;
reg   [0:0] icmp_ln172_23_reg_496;
wire   [31:0] tmp_248_fu_312_p5;
reg   [31:0] tmp_248_reg_501;
reg   [31:0] mul_i_reg_531;
wire    ap_CS_fsm_state6;
reg   [31:0] mul_1_i_reg_536;
reg   [31:0] mul_2_i_reg_541;
wire   [31:0] tmp_254_fu_332_p3;
reg   [31:0] tmp_254_reg_546;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_256_fu_339_p3;
reg   [31:0] tmp_256_reg_552;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_258_fu_345_p3;
reg   [31:0] tmp_258_reg_558;
wire    ap_CS_fsm_state18;
reg   [1:0] i_71_reg_563;
wire    ap_CS_fsm_state20;
wire   [1:0] add_ln187_fu_365_p2;
reg   [1:0] add_ln187_reg_570;
wire   [0:0] icmp_ln187_fu_359_p2;
reg   [2:0] aux_address0;
reg    aux_ce0;
reg    aux_we0;
wire   [31:0] aux_q0;
wire   [63:0] zext_ln166_2_fu_195_p1;
wire   [63:0] p_cast_fu_206_p1;
wire   [63:0] p_cast2_fu_217_p1;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln187_fu_354_p1;
reg   [2:0] i_fu_62;
wire   [2:0] add_ln169_fu_240_p2;
reg   [1:0] i_69_fu_70;
wire    ap_CS_fsm_state21;
reg   [31:0] num_res_2_write_assign_fu_74;
reg   [31:0] num_res_1_write_assign_fu_78;
reg   [31:0] num_res_0_write_assign_fu_82;
reg   [31:0] grp_fu_160_p0;
reg   [31:0] grp_fu_160_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire   [5:0] tmp_247_fu_181_p3;
wire   [5:0] zext_ln166_fu_177_p1;
wire   [5:0] sub_ln166_fu_189_p2;
wire   [5:0] empty_fu_200_p2;
wire   [5:0] empty_117_fu_211_p2;
wire   [1:0] trunc_ln173_fu_252_p1;
wire   [2:0] add_ln172_fu_266_p2;
wire   [1:0] tmp_s_fu_284_p4;
wire   [2:0] add_ln172_12_fu_294_p2;
wire   [1:0] tmp_248_fu_312_p4;
reg   [20:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

main_sqrt_aux_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
aux_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(aux_address0),
    .ce0(aux_ce0),
    .we0(aux_we0),
    .d0(tmp_258_reg_558),
    .q0(aux_q0)
);

main_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U221(
    .din0(32'd0),
    .din1(num_a_1_read),
    .din2(num_a_2_read),
    .din3(trunc_ln173_fu_252_p1),
    .dout(tmp_fu_256_p5)
);

main_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U222(
    .din0(32'd0),
    .din1(num_a_1_read),
    .din2(num_a_2_read),
    .din3(tmp_s_fu_284_p4),
    .dout(tmp_s_fu_284_p5)
);

main_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U223(
    .din0(32'd0),
    .din1(num_a_1_read),
    .din2(num_a_2_read),
    .din3(tmp_248_fu_312_p4),
    .dout(tmp_248_fu_312_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln169_fu_234_p2 == 1'd1))) begin
        i_69_fu_70 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        i_69_fu_70 <= add_ln187_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_62 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln169_fu_234_p2 == 1'd0))) begin
        i_fu_62 <= add_ln169_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln187_reg_570 <= add_ln187_fu_365_p2;
        i_71_reg_563 <= i_69_fu_70;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln169_fu_234_p2 == 1'd0))) begin
        icmp_ln172_22_reg_486 <= icmp_ln172_22_fu_272_p2;
        icmp_ln172_23_reg_496 <= icmp_ln172_23_fu_300_p2;
        icmp_ln172_reg_476 <= icmp_ln172_fu_246_p2;
        tmp_248_reg_501 <= tmp_248_fu_312_p5;
        tmp_reg_481 <= tmp_fu_256_p5;
        tmp_s_reg_491 <= tmp_s_fu_284_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln172_22_reg_486 == 1'd1))) begin
        mul_1_i_reg_536 <= grp_fu_1209_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln172_23_reg_496 == 1'd1))) begin
        mul_2_i_reg_541 <= grp_fu_1213_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln172_reg_476 == 1'd1))) begin
        mul_i_reg_531 <= grp_fu_1205_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        num_b_load_1_reg_458 <= num_b_q1;
        num_b_load_2_reg_463 <= num_b_q0;
        num_b_load_reg_453 <= num_b_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (i_71_reg_563 == 2'd0))) begin
        num_res_0_write_assign_fu_82 <= aux_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (i_71_reg_563 == 2'd1))) begin
        num_res_1_write_assign_fu_78 <= aux_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_71_reg_563 == 2'd1) & ~(i_71_reg_563 == 2'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        num_res_2_write_assign_fu_74 <= aux_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_254_reg_546 <= tmp_254_fu_332_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_256_reg_552 <= tmp_256_fu_339_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_258_reg_558 <= tmp_258_fu_345_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln169_reg_468[2 : 0] <= zext_ln169_fu_230_p1[2 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state20) & (icmp_ln187_fu_359_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln187_fu_359_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        aux_address0 = zext_ln187_fu_354_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        aux_address0 = zext_ln169_reg_468;
    end else begin
        aux_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20))) begin
        aux_ce0 = 1'b1;
    end else begin
        aux_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        aux_we0 = 1'b1;
    end else begin
        aux_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_160_p0 = tmp_256_reg_552;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_160_p0 = tmp_254_reg_546;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_160_p0 = mul_i_reg_531;
    end else begin
        grp_fu_160_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_160_p1 = mul_2_i_reg_541;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_160_p1 = mul_1_i_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_160_p1 = 32'd0;
    end else begin
        grp_fu_160_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        num_b_ce0 = 1'b1;
    end else begin
        num_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        num_b_ce1 = 1'b1;
    end else begin
        num_b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        num_b_ce2 = 1'b1;
    end else begin
        num_b_ce2 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln169_fu_234_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln187_fu_359_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln169_fu_240_p2 = (i_fu_62 + 3'd1);

assign add_ln172_12_fu_294_p2 = ($signed(i_fu_62) + $signed(3'd6));

assign add_ln172_fu_266_p2 = ($signed(i_fu_62) + $signed(3'd7));

assign add_ln187_fu_365_p2 = (i_69_fu_70 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return_0 = num_res_0_write_assign_fu_82;

assign ap_return_1 = num_res_1_write_assign_fu_78;

assign ap_return_2 = num_res_2_write_assign_fu_74;

assign empty_117_fu_211_p2 = (sub_ln166_fu_189_p2 + 6'd2);

assign empty_fu_200_p2 = (sub_ln166_fu_189_p2 + 6'd1);

assign grp_fu_1201_p_ce = 1'b1;

assign grp_fu_1201_p_din0 = grp_fu_160_p0;

assign grp_fu_1201_p_din1 = grp_fu_160_p1;

assign grp_fu_1201_p_opcode = 2'd0;

assign grp_fu_1205_p_ce = 1'b1;

assign grp_fu_1205_p_din0 = tmp_reg_481;

assign grp_fu_1205_p_din1 = num_b_load_reg_453;

assign grp_fu_1209_p_ce = 1'b1;

assign grp_fu_1209_p_din0 = tmp_s_reg_491;

assign grp_fu_1209_p_din1 = num_b_load_1_reg_458;

assign grp_fu_1213_p_ce = 1'b1;

assign grp_fu_1213_p_din0 = tmp_248_reg_501;

assign grp_fu_1213_p_din1 = num_b_load_2_reg_463;

assign icmp_ln169_fu_234_p2 = ((i_fu_62 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln172_22_fu_272_p2 = ((add_ln172_fu_266_p2 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln172_23_fu_300_p2 = ((add_ln172_12_fu_294_p2 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_246_p2 = ((i_fu_62 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln187_fu_359_p2 = ((i_69_fu_70 == 2'd3) ? 1'b1 : 1'b0);

assign num_b_address0 = p_cast2_fu_217_p1;

assign num_b_address1 = p_cast_fu_206_p1;

assign num_b_address2 = zext_ln166_2_fu_195_p1;

assign p_cast2_fu_217_p1 = empty_117_fu_211_p2;

assign p_cast_fu_206_p1 = empty_fu_200_p2;

assign sub_ln166_fu_189_p2 = (tmp_247_fu_181_p3 - zext_ln166_fu_177_p1);

assign tmp_247_fu_181_p3 = {{num_b_offset}, {2'd0}};

assign tmp_248_fu_312_p4 = (trunc_ln173_fu_252_p1 ^ 2'd2);

assign tmp_254_fu_332_p3 = ((icmp_ln172_reg_476[0:0] == 1'b1) ? grp_fu_1201_p_dout0 : 32'd0);

assign tmp_256_fu_339_p3 = ((icmp_ln172_22_reg_486[0:0] == 1'b1) ? grp_fu_1201_p_dout0 : tmp_254_reg_546);

assign tmp_258_fu_345_p3 = ((icmp_ln172_23_reg_496[0:0] == 1'b1) ? grp_fu_1201_p_dout0 : tmp_256_reg_552);

assign tmp_s_fu_284_p4 = ($signed(trunc_ln173_fu_252_p1) + $signed(2'd3));

assign trunc_ln173_fu_252_p1 = i_fu_62[1:0];

assign zext_ln166_2_fu_195_p1 = sub_ln166_fu_189_p2;

assign zext_ln166_fu_177_p1 = num_b_offset;

assign zext_ln169_fu_230_p1 = i_fu_62;

assign zext_ln187_fu_354_p1 = i_69_fu_70;

always @ (posedge ap_clk) begin
    zext_ln169_reg_468[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //main_p_mul
