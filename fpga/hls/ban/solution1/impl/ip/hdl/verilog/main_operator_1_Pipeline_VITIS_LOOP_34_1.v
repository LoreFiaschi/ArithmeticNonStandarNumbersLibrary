// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_operator_1_Pipeline_VITIS_LOOP_34_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_norm_1_02_reload,
        b_norm_2_03_reload,
        eps_2_0_out,
        eps_2_0_out_ap_vld,
        eps_1_0_out,
        eps_1_0_out_ap_vld,
        eps_0_0_out,
        eps_0_0_out_ap_vld,
        eps_load_2_out,
        eps_load_2_out_ap_vld,
        eps_load_1_out,
        eps_load_1_out_ap_vld,
        eps_load_out,
        eps_load_out_ap_vld,
        grp_fu_1024_p_din0,
        grp_fu_1024_p_din1,
        grp_fu_1024_p_dout0,
        grp_fu_1024_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] b_norm_1_02_reload;
input  [31:0] b_norm_2_03_reload;
output  [31:0] eps_2_0_out;
output   eps_2_0_out_ap_vld;
output  [31:0] eps_1_0_out;
output   eps_1_0_out_ap_vld;
output  [31:0] eps_0_0_out;
output   eps_0_0_out_ap_vld;
output  [31:0] eps_load_2_out;
output   eps_load_2_out_ap_vld;
output  [31:0] eps_load_1_out;
output   eps_load_1_out_ap_vld;
output  [31:0] eps_load_out;
output   eps_load_out_ap_vld;
output  [31:0] grp_fu_1024_p_din0;
output  [31:0] grp_fu_1024_p_din1;
input  [31:0] grp_fu_1024_p_dout0;
output   grp_fu_1024_p_ce;

reg ap_idle;
reg eps_2_0_out_ap_vld;
reg eps_1_0_out_ap_vld;
reg eps_0_0_out_ap_vld;
reg eps_load_2_out_ap_vld;
reg eps_load_1_out_ap_vld;
reg eps_load_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln34_fu_145_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] i_reg_271;
reg   [1:0] i_reg_271_pp0_iter1_reg;
reg   [1:0] i_reg_271_pp0_iter2_reg;
reg   [0:0] icmp_ln34_reg_275;
reg   [0:0] icmp_ln34_reg_275_pp0_iter1_reg;
wire   [31:0] tmp_29_fu_157_p5;
reg   [31:0] tmp_29_reg_279;
reg   [1:0] i_6_fu_50;
wire   [1:0] add_ln34_fu_151_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0;
reg   [31:0] eps_1_fu_54;
reg   [31:0] eps_1_2_fu_58;
reg   [31:0] eps_1_3_fu_62;
reg   [31:0] eps_1_4_fu_66;
reg   [31:0] eps_1_5_fu_70;
reg   [31:0] eps_1_6_fu_74;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

main_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U774(
    .din0(32'd0),
    .din1(b_norm_1_02_reload),
    .din2(b_norm_2_03_reload),
    .din3(ap_sig_allocacmp_i),
    .dout(tmp_29_fu_157_p5)
);

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln34_fu_145_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_6_fu_50 <= add_ln34_fu_151_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_6_fu_50 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_reg_271 <= ap_sig_allocacmp_i;
        i_reg_271_pp0_iter1_reg <= i_reg_271;
        icmp_ln34_reg_275 <= icmp_ln34_fu_145_p2;
        icmp_ln34_reg_275_pp0_iter1_reg <= icmp_ln34_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_271_pp0_iter2_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        eps_1_2_fu_58 <= grp_fu_1024_p_dout0;
        eps_1_5_fu_70 <= grp_fu_1024_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_271_pp0_iter2_reg == 2'd1) & ~(i_reg_271_pp0_iter2_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        eps_1_3_fu_62 <= grp_fu_1024_p_dout0;
        eps_1_6_fu_74 <= grp_fu_1024_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_271_pp0_iter2_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        eps_1_4_fu_66 <= grp_fu_1024_p_dout0;
        eps_1_fu_54 <= grp_fu_1024_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_reg_271_pp0_iter2_reg <= i_reg_271_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_145_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_29_reg_279 <= tmp_29_fu_157_p5;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_145_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 2'd0;
    end else begin
        ap_sig_allocacmp_i = i_6_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_275_pp0_iter1_reg == 1'd1))) begin
        eps_0_0_out_ap_vld = 1'b1;
    end else begin
        eps_0_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_275_pp0_iter1_reg == 1'd1))) begin
        eps_1_0_out_ap_vld = 1'b1;
    end else begin
        eps_1_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_275_pp0_iter1_reg == 1'd1))) begin
        eps_2_0_out_ap_vld = 1'b1;
    end else begin
        eps_2_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_275_pp0_iter1_reg == 1'd1))) begin
        eps_load_1_out_ap_vld = 1'b1;
    end else begin
        eps_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_275_pp0_iter1_reg == 1'd1))) begin
        eps_load_2_out_ap_vld = 1'b1;
    end else begin
        eps_load_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_275_pp0_iter1_reg == 1'd1))) begin
        eps_load_out_ap_vld = 1'b1;
    end else begin
        eps_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_fu_151_p2 = (ap_sig_allocacmp_i + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign eps_0_0_out = eps_1_4_fu_66;

assign eps_1_0_out = eps_1_5_fu_70;

assign eps_2_0_out = eps_1_6_fu_74;

assign eps_load_1_out = eps_1_2_fu_58;

assign eps_load_2_out = eps_1_3_fu_62;

assign eps_load_out = eps_1_fu_54;

assign grp_fu_1024_p_ce = 1'b1;

assign grp_fu_1024_p_din0 = tmp_29_reg_279;

assign grp_fu_1024_p_din1 = 32'd981668463;

assign icmp_ln34_fu_145_p2 = ((ap_sig_allocacmp_i == 2'd3) ? 1'b1 : 1'b0);

endmodule //main_operator_1_Pipeline_VITIS_LOOP_34_1
