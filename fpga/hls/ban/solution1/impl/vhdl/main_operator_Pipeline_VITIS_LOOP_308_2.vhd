-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_operator_Pipeline_VITIS_LOOP_308_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    sub11 : IN STD_LOGIC_VECTOR (1 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln4 : IN STD_LOGIC_VECTOR (1 downto 0);
    num_aux_0_01_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    num_aux_1_02_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    num_aux_2_03_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    this_1_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_1_0_out_ap_vld : OUT STD_LOGIC;
    this_112_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_112_0_out_ap_vld : OUT STD_LOGIC;
    this_12_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_12_0_out_ap_vld : OUT STD_LOGIC;
    grp_fu_268_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_268_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_268_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_268_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_268_p_ce : OUT STD_LOGIC );
end;


architecture behav of main_operator_Pipeline_VITIS_LOOP_308_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln308_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_328 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_328_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_328_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_328_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln308_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln308_reg_333_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln308_reg_333_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_337_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_337_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_337_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln312_fu_208_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln312_reg_342 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_219_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_347_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_347_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_228_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_60 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln308_fu_196_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal this_12_0_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln309_fu_237_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_112_0_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_1_0_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_condition_281 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component main_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_32_1_1_U168 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read4,
        din1 => p_read5,
        din2 => p_read6,
        din3 => i_2_reg_328,
        dout => tmp_s_fu_219_p5);

    mux_32_32_1_1_U169 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => num_aux_0_01_reload,
        din1 => num_aux_1_02_reload,
        din2 => num_aux_2_03_reload,
        din3 => add_ln312_reg_342,
        dout => tmp_16_fu_228_p5);

    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln308_fu_190_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_60 <= add_ln308_fu_196_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_60 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    this_112_0_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    this_112_0_fu_68 <= p_read1;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (i_2_reg_328_pp0_iter3_reg = ap_const_lv2_1))) then 
                    this_112_0_fu_68 <= select_ln309_fu_237_p3;
                end if;
            end if; 
        end if;
    end process;

    this_12_0_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    this_12_0_fu_64 <= p_read2;
                elsif ((ap_const_boolean_1 = ap_condition_281)) then 
                    this_12_0_fu_64 <= select_ln309_fu_237_p3;
                end if;
            end if; 
        end if;
    end process;

    this_1_0_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    this_1_0_fu_72 <= p_read;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (i_2_reg_328_pp0_iter3_reg = ap_const_lv2_0))) then 
                    this_1_0_fu_72 <= select_ln309_fu_237_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln308_fu_190_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln312_reg_342 <= add_ln312_fu_208_p2;
                icmp_ln309_reg_337 <= icmp_ln309_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_2_reg_328 <= ap_sig_allocacmp_i_2;
                i_2_reg_328_pp0_iter1_reg <= i_2_reg_328;
                icmp_ln308_reg_333 <= icmp_ln308_fu_190_p2;
                icmp_ln308_reg_333_pp0_iter1_reg <= icmp_ln308_reg_333;
                icmp_ln309_reg_337_pp0_iter1_reg <= icmp_ln309_reg_337;
                tmp_s_reg_347 <= tmp_s_fu_219_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                i_2_reg_328_pp0_iter2_reg <= i_2_reg_328_pp0_iter1_reg;
                i_2_reg_328_pp0_iter3_reg <= i_2_reg_328_pp0_iter2_reg;
                icmp_ln308_reg_333_pp0_iter2_reg <= icmp_ln308_reg_333_pp0_iter1_reg;
                icmp_ln309_reg_337_pp0_iter2_reg <= icmp_ln309_reg_337_pp0_iter1_reg;
                icmp_ln309_reg_337_pp0_iter3_reg <= icmp_ln309_reg_337_pp0_iter2_reg;
                tmp_s_reg_347_pp0_iter2_reg <= tmp_s_reg_347;
                tmp_s_reg_347_pp0_iter3_reg <= tmp_s_reg_347_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln308_fu_196_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv2_1));
    add_ln312_fu_208_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(trunc_ln4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_281_assign_proc : process(ap_enable_reg_pp0_iter4, i_2_reg_328_pp0_iter3_reg)
    begin
                ap_condition_281 <= (not((i_2_reg_328_pp0_iter3_reg = ap_const_lv2_1)) and not((i_2_reg_328_pp0_iter3_reg = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln308_fu_190_p2)
    begin
        if (((icmp_ln308_fu_190_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_60, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_60;
        end if; 
    end process;

    grp_fu_268_p_ce <= ap_const_logic_1;
    grp_fu_268_p_din0 <= tmp_s_fu_219_p5;
    grp_fu_268_p_din1 <= tmp_16_fu_228_p5;
    grp_fu_268_p_opcode <= ap_const_lv2_0;
    icmp_ln308_fu_190_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv2_3) else "0";
    icmp_ln309_fu_202_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_2) < unsigned(sub11)) else "0";
    select_ln309_fu_237_p3 <= 
        tmp_s_reg_347_pp0_iter3_reg when (icmp_ln309_reg_337_pp0_iter3_reg(0) = '1') else 
        grp_fu_268_p_dout0;
    this_112_0_out <= this_112_0_fu_68;

    this_112_0_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln308_reg_333_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln308_reg_333_pp0_iter2_reg = ap_const_lv1_1))) then 
            this_112_0_out_ap_vld <= ap_const_logic_1;
        else 
            this_112_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_12_0_out <= this_12_0_fu_64;

    this_12_0_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln308_reg_333_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln308_reg_333_pp0_iter2_reg = ap_const_lv1_1))) then 
            this_12_0_out_ap_vld <= ap_const_logic_1;
        else 
            this_12_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_0_out <= this_1_0_fu_72;

    this_1_0_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln308_reg_333_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln308_reg_333_pp0_iter2_reg = ap_const_lv1_1))) then 
            this_1_0_out_ap_vld <= ap_const_logic_1;
        else 
            this_1_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
