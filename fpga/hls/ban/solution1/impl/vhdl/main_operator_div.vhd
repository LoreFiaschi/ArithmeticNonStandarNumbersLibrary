-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_operator_div is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_num_offset : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of main_operator_div is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal b_num_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_num_1_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_2_reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln75_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_132 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_1_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_1_reg_137 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_reg_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_p_div_body_fu_34_ap_start : STD_LOGIC;
    signal grp_p_div_body_fu_34_ap_done : STD_LOGIC;
    signal grp_p_div_body_fu_34_ap_idle : STD_LOGIC;
    signal grp_p_div_body_fu_34_ap_ready : STD_LOGIC;
    signal grp_p_div_body_fu_34_num_num_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_p_div_body_fu_34_num_num_ce0 : STD_LOGIC;
    signal grp_p_div_body_fu_34_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_div_body_fu_34_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_div_body_fu_34_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start : STD_LOGIC;
    signal grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_done : STD_LOGIC;
    signal grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_idle : STD_LOGIC;
    signal grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_ready : STD_LOGIC;
    signal grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_idx_1_out : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_idx_1_out_ap_vld : STD_LOGIC;
    signal grp_p_div_body_fu_34_ap_start_reg : STD_LOGIC := '0';
    signal grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bitcast_ln75_fu_67_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_71_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_fu_81_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln75_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_49_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_49_ce : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_p_div_body IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        num_num_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        num_num_ce0 : OUT STD_LOGIC;
        num_num_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        num_den_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_operator_Pipeline_VITIS_LOOP_80_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_num_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_num_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        idx_1_out : OUT STD_LOGIC_VECTOR (1 downto 0);
        idx_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component main_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component main_p_sum_Pipeline_VITIS_LOOP_108_1_b_num_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    b_num_U : component main_p_sum_Pipeline_VITIS_LOOP_108_1_b_num_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_p_div_body_fu_34_num_num_address0,
        ce0 => grp_p_div_body_fu_34_num_num_ce0,
        q0 => b_num_q0);

    grp_p_div_body_fu_34 : component main_p_div_body
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_div_body_fu_34_ap_start,
        ap_done => grp_p_div_body_fu_34_ap_done,
        ap_idle => grp_p_div_body_fu_34_ap_idle,
        ap_ready => grp_p_div_body_fu_34_ap_ready,
        num_num_address0 => grp_p_div_body_fu_34_num_num_address0,
        num_num_ce0 => grp_p_div_body_fu_34_num_num_ce0,
        num_num_q0 => b_num_q0,
        num_den_offset => b_num_offset,
        ap_return_0 => grp_p_div_body_fu_34_ap_return_0,
        ap_return_1 => grp_p_div_body_fu_34_ap_return_1,
        ap_return_2 => grp_p_div_body_fu_34_ap_return_2);

    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42 : component main_operator_Pipeline_VITIS_LOOP_80_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start,
        ap_done => grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_done,
        ap_idle => grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_idle,
        ap_ready => grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_ready,
        c_num_1 => c_num_1_reg_122,
        c_num_2 => c_num_2_reg_127,
        idx_1_out => grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_idx_1_out,
        idx_1_out_ap_vld => grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_idx_1_out_ap_vld);

    fcmp_32ns_32ns_1_2_no_dsp_1_U97 : component main_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_p_div_body_fu_34_ap_return_0,
        din1 => ap_const_lv32_0,
        ce => grp_fu_49_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_49_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = and_ln75_fu_101_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_ready = ap_const_logic_1)) then 
                    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_p_div_body_fu_34_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_div_body_fu_34_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_p_div_body_fu_34_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_div_body_fu_34_ap_ready = ap_const_logic_1)) then 
                    grp_p_div_body_fu_34_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                and_ln75_reg_142 <= and_ln75_fu_101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_num_1_reg_122 <= grp_p_div_body_fu_34_ap_return_1;
                c_num_2_reg_127 <= grp_p_div_body_fu_34_ap_return_2;
                icmp_ln75_1_reg_137 <= icmp_ln75_1_fu_91_p2;
                icmp_ln75_reg_132 <= icmp_ln75_fu_85_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_p_div_body_fu_34_ap_done, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_p_div_body_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    and_ln75_fu_101_p2 <= (or_ln75_fu_97_p2 and grp_fu_49_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_p_div_body_fu_34_ap_done)
    begin
        if ((grp_p_div_body_fu_34_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(and_ln75_reg_142, grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((ap_const_lv1_1 = and_ln75_reg_142) and (grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln75_fu_67_p1 <= grp_p_div_body_fu_34_ap_return_0;

    grp_fu_49_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, grp_p_div_body_fu_34_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((grp_p_div_body_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_49_ce <= ap_const_logic_1;
        else 
            grp_fu_49_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start <= grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg;
    grp_p_div_body_fu_34_ap_start <= grp_p_div_body_fu_34_ap_start_reg;
    icmp_ln75_1_fu_91_p2 <= "1" when (trunc_ln75_fu_81_p1 = ap_const_lv23_0) else "0";
    icmp_ln75_fu_85_p2 <= "0" when (tmp_fu_71_p4 = ap_const_lv8_FF) else "1";
    or_ln75_fu_97_p2 <= (icmp_ln75_reg_132 or icmp_ln75_1_reg_137);
    tmp_fu_71_p4 <= bitcast_ln75_fu_67_p1(30 downto 23);
    trunc_ln75_fu_81_p1 <= bitcast_ln75_fu_67_p1(23 - 1 downto 0);
end behav;
