-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_p_mul_161 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_a_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_a_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_a_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_b_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_b_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_b_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_res_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_res_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    num_res_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of main_p_mul_161 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln167_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_reg_504 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln170_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_228_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln170_18_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_18_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_255_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln170_19_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_19_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_245_fu_282_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_245_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_i_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_i_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_242_fu_316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_242_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_244_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_244_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_247_fu_329_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_247_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_65_reg_620 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln185_fu_349_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln185_reg_627 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln185_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal aux_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal aux_ce0 : STD_LOGIC;
    signal aux_we0 : STD_LOGIC;
    signal aux_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln185_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_68 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln167_fu_212_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_63_fu_76 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal num_res6_06_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag_0_fu_84 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag8_0_fu_88 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_res5_07_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_08_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag5_0_fu_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln171_fu_224_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln170_fu_237_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_255_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln170_10_fu_264_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_245_fu_282_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln187_fu_373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln187_1_fu_380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln187_2_fu_387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_sqrt_aux_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    aux_U : component main_sqrt_aux_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => aux_address0,
        ce0 => aux_ce0,
        we0 => aux_we0,
        d0 => tmp_247_reg_615,
        q0 => aux_q0);

    fadd_32ns_32ns_32_4_full_dsp_1_U228 : component main_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_177_p0,
        din1 => grp_fu_177_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U229 : component main_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_517,
        din1 => num_b_0_read,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U230 : component main_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_527,
        din1 => num_b_1_read,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U231 : component main_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_245_reg_537,
        din1 => num_b_2_read,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    mux_32_32_1_1_U232 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => num_a_0_read,
        din1 => num_a_1_read,
        din2 => num_a_2_read,
        din3 => trunc_ln171_fu_224_p1,
        dout => tmp_fu_228_p5);

    mux_32_32_1_1_U233 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => num_a_0_read,
        din1 => num_a_1_read,
        din2 => num_a_2_read,
        din3 => tmp_s_fu_255_p4,
        dout => tmp_s_fu_255_p5);

    mux_32_32_1_1_U234 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => num_a_0_read,
        din1 => num_a_1_read,
        din2 => num_a_2_read,
        din3 => tmp_245_fu_282_p4,
        dout => tmp_245_fu_282_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_63_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_63_fu_76 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_63_fu_76 <= add_ln185_reg_627;
            end if; 
        end if;
    end process;

    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_68 <= ap_const_lv3_0;
            elsif (((icmp_ln167_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_68 <= add_ln167_fu_212_p2;
            end if; 
        end if;
    end process;

    write_flag5_0_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                write_flag5_0_fu_100 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (i_65_reg_620 = ap_const_lv2_1))) then 
                write_flag5_0_fu_100 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag8_0_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                write_flag8_0_fu_88 <= ap_const_lv1_0;
            elsif ((not((i_65_reg_620 = ap_const_lv2_1)) and not((i_65_reg_620 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                write_flag8_0_fu_88 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag_0_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                write_flag_0_fu_84 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (i_65_reg_620 = ap_const_lv2_0))) then 
                write_flag_0_fu_84 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln185_reg_627 <= add_ln185_fu_349_p2;
                i_65_reg_620 <= i_63_fu_76;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln170_18_reg_522 <= icmp_ln170_18_fu_243_p2;
                icmp_ln170_19_reg_532 <= icmp_ln170_19_fu_270_p2;
                icmp_ln170_reg_512 <= icmp_ln170_fu_218_p2;
                tmp_245_reg_537 <= tmp_245_fu_282_p5;
                tmp_reg_517 <= tmp_fu_228_p5;
                tmp_s_reg_527 <= tmp_s_fu_255_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln170_18_reg_522 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_1_i_reg_593 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln170_19_reg_532 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_2_i_reg_598 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln170_reg_512 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_i_reg_588 <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (i_65_reg_620 = ap_const_lv2_1))) then
                num_res5_07_fu_92 <= aux_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_65_reg_620 = ap_const_lv2_1)) and not((i_65_reg_620 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                num_res6_06_fu_80 <= aux_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (i_65_reg_620 = ap_const_lv2_0))) then
                num_res_08_fu_96 <= aux_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_242_reg_603 <= tmp_242_fu_316_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_244_reg_609 <= tmp_244_fu_323_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_247_reg_615 <= tmp_247_fu_329_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln167_reg_504(2 downto 0) <= zext_ln167_fu_202_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln167_reg_504(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln167_fu_206_p2, ap_CS_fsm_state19, icmp_ln185_fu_343_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln167_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln185_fu_343_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln167_fu_212_p2 <= std_logic_vector(unsigned(i_fu_68) + unsigned(ap_const_lv3_1));
    add_ln170_10_fu_264_p2 <= std_logic_vector(unsigned(i_fu_68) + unsigned(ap_const_lv3_6));
    add_ln170_fu_237_p2 <= std_logic_vector(unsigned(i_fu_68) + unsigned(ap_const_lv3_7));
    add_ln185_fu_349_p2 <= std_logic_vector(unsigned(i_63_fu_76) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, icmp_ln185_fu_343_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln185_fu_343_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln185_fu_343_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln185_fu_343_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= select_ln187_fu_373_p3;
    ap_return_1 <= select_ln187_1_fu_380_p3;
    ap_return_2 <= select_ln187_2_fu_387_p3;

    aux_address0_assign_proc : process(zext_ln167_reg_504, ap_CS_fsm_state19, ap_CS_fsm_state18, zext_ln185_fu_338_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            aux_address0 <= zext_ln185_fu_338_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            aux_address0 <= zext_ln167_reg_504(3 - 1 downto 0);
        else 
            aux_address0 <= "XXX";
        end if; 
    end process;


    aux_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            aux_ce0 <= ap_const_logic_1;
        else 
            aux_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            aux_we0 <= ap_const_logic_1;
        else 
            aux_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_177_p0_assign_proc : process(mul_i_reg_588, tmp_242_reg_603, tmp_244_reg_609, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_177_p0 <= tmp_244_reg_609;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_177_p0 <= tmp_242_reg_603;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_177_p0 <= mul_i_reg_588;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p1_assign_proc : process(mul_1_i_reg_593, mul_2_i_reg_598, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_177_p1 <= mul_2_i_reg_598;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_177_p1 <= mul_1_i_reg_593;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_177_p1 <= ap_const_lv32_0;
        else 
            grp_fu_177_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln167_fu_206_p2 <= "1" when (i_fu_68 = ap_const_lv3_5) else "0";
    icmp_ln170_18_fu_243_p2 <= "1" when (unsigned(add_ln170_fu_237_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln170_19_fu_270_p2 <= "1" when (unsigned(add_ln170_10_fu_264_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln170_fu_218_p2 <= "1" when (unsigned(i_fu_68) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln185_fu_343_p2 <= "1" when (i_63_fu_76 = ap_const_lv2_3) else "0";
    select_ln187_1_fu_380_p3 <= 
        num_res5_07_fu_92 when (write_flag5_0_fu_100(0) = '1') else 
        num_res_1_read;
    select_ln187_2_fu_387_p3 <= 
        num_res6_06_fu_80 when (write_flag8_0_fu_88(0) = '1') else 
        num_res_2_read;
    select_ln187_fu_373_p3 <= 
        num_res_08_fu_96 when (write_flag_0_fu_84(0) = '1') else 
        num_res_0_read;
    tmp_242_fu_316_p3 <= 
        grp_fu_177_p2 when (icmp_ln170_reg_512(0) = '1') else 
        ap_const_lv32_0;
    tmp_244_fu_323_p3 <= 
        grp_fu_177_p2 when (icmp_ln170_18_reg_522(0) = '1') else 
        tmp_242_reg_603;
    tmp_245_fu_282_p4 <= (trunc_ln171_fu_224_p1 xor ap_const_lv2_2);
    tmp_247_fu_329_p3 <= 
        grp_fu_177_p2 when (icmp_ln170_19_reg_532(0) = '1') else 
        tmp_244_reg_609;
    tmp_s_fu_255_p4 <= std_logic_vector(unsigned(trunc_ln171_fu_224_p1) + unsigned(ap_const_lv2_3));
    trunc_ln171_fu_224_p1 <= i_fu_68(2 - 1 downto 0);
    zext_ln167_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_68),64));
    zext_ln185_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_63_fu_76),64));
end behav;
