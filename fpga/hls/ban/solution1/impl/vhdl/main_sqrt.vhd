-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_sqrt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_1_ce1 : OUT STD_LOGIC;
    b_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_12738_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_12738_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_12738_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_12738_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_12738_p_ce : OUT STD_LOGIC;
    grp_fu_4178_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4178_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4178_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_4178_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4178_p_ce : OUT STD_LOGIC;
    grp_fu_4185_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4185_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4185_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_4185_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4185_p_ce : OUT STD_LOGIC;
    grp_fu_4193_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4193_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4193_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4193_p_ce : OUT STD_LOGIC;
    grp_fu_4199_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4199_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4199_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4199_p_ce : OUT STD_LOGIC;
    grp_fu_12742_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_12742_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_12742_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_12742_p_ce : OUT STD_LOGIC;
    grp_fu_4206_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4206_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4206_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4206_p_ce : OUT STD_LOGIC;
    grp_fu_4230_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4230_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4230_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_4230_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_4230_p_ce : OUT STD_LOGIC );
end;


architecture behav of main_sqrt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (54 downto 0) := "0000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (54 downto 0) := "0000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (54 downto 0) := "0000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (54 downto 0) := "0000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (54 downto 0) := "0000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (54 downto 0) := "0000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (54 downto 0) := "0001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (54 downto 0) := "0010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (54 downto 0) := "0100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (54 downto 0) := "1000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_BE000000 : STD_LOGIC_VECTOR (31 downto 0) := "10111110000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln170_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln170_1_reg_1269 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln170_2_reg_1279 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln60_fu_467_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln60_reg_1075 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal b_1_addr_2_reg_1108 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_1_addr_3_reg_1113 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln60_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_1118 : STD_LOGIC_VECTOR (0 downto 0);
    signal normalizer_1_reg_1122 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln60_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln60_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln60_1_reg_1139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln67_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_1161 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_1_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_1_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln559_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln559_reg_1225 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln558_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal eps_2_1_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln167_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_reg_1251 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln170_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_765_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1264 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln170_1_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_795_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1274 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln170_2_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_825_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_10_fu_847_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_13_fu_854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_860_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal i_8_reg_1341 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal add_ln185_fu_880_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln185_reg_1348 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln185_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_reg_1404 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_2_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1438 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal normalizer_reg_1443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal aux_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal aux_ce0 : STD_LOGIC;
    signal aux_we0 : STD_LOGIC;
    signal aux_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag_2_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_1_2_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag4_2_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_116_2_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag8_2_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_12_2_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_p_write_assign_reg_346 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln60_1_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln551_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln551_1_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_1_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_1_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal zext_ln185_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_110 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln66_fu_608_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal and_ln67_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_114 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln558_fu_652_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal eps_2_2_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_2_2_6_fu_674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal eps_2_2_3_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_2_2_5_fu_668_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_load_1_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln560_1_fu_719_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal num_res_load_2_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln560_fu_712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_1_2_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_1_2_6_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_1_2_3_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_1_2_5_fu_680_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_142 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln167_fu_749_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_fu_146 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal eps_3_2_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal eps_3_2_1_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_3_2_2_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_162 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_fu_973_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_9_load_fu_946_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal agg_result_12_0_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_979_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag8_0_fu_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_116_0_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag4_0_fu_178 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_1_0_fu_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag_0_fu_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_357_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_371_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_378_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_404_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_459_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln60_fu_455_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln551_fu_478_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln551_1_fu_488_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln60_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_507_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_fu_517_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln60_2_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_1_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln67_fu_548_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln67_fu_552_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln67_fu_568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_572_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_fu_582_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln67_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln559_fu_626_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln559_fu_630_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln171_fu_761_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln170_fu_777_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_795_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln170_1_fu_807_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_825_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal sext_ln0_fu_1026_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln617_fu_1030_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln617_1_fu_1037_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln617_2_fu_1044_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln66_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_condition_1229 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component main_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component main_fsqrt_32ns_32ns_32_8_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_sqrt_aux_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    aux_U : component main_sqrt_aux_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => aux_address0,
        ce0 => aux_ce0,
        we0 => aux_we0,
        d0 => tmp_16_reg_1336,
        q0 => aux_q0);

    fsqrt_32ns_32ns_32_8_no_dsp_1_U63 : component main_fsqrt_32ns_32ns_32_8_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => normalizer_1_reg_1122,
        ce => ap_const_logic_1,
        dout => grp_fu_399_p2);

    mux_32_32_1_1_U64 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => eps_1_2_3_fu_138,
        din2 => eps_1_2_fu_134,
        din3 => trunc_ln171_fu_761_p1,
        dout => tmp_6_fu_765_p5);

    mux_32_32_1_1_U65 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => eps_1_2_3_fu_138,
        din2 => eps_1_2_fu_134,
        din3 => tmp_11_fu_795_p4,
        dout => tmp_11_fu_795_p5);

    mux_32_32_1_1_U66 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => eps_1_2_3_fu_138,
        din2 => eps_1_2_fu_134,
        din3 => tmp_14_fu_825_p4,
        dout => tmp_14_fu_825_p5);

    mux_32_32_1_1_U67 : component main_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_439,
        din1 => reg_445,
        din2 => reg_450,
        din3 => i_4_fu_162,
        dout => tmp_20_fu_979_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    ap_return_0_preg <= sext_ln0_fu_1026_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    ap_return_1_preg <= select_ln617_fu_1030_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    ap_return_2_preg <= select_ln617_1_fu_1037_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    ap_return_3_preg <= select_ln617_2_fu_1044_p3;
                end if; 
            end if;
        end if;
    end process;


    agg_result_116_2_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_967_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                agg_result_116_2_reg_317 <= agg_result_116_0_fu_174;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                agg_result_116_2_reg_317 <= b_1_q1;
            end if; 
        end if;
    end process;

    agg_result_12_2_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_967_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                agg_result_12_2_reg_337 <= agg_result_12_0_fu_166;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                agg_result_12_2_reg_337 <= b_1_q0;
            end if; 
        end if;
    end process;

    agg_result_1_2_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_967_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                agg_result_1_2_reg_297 <= agg_result_1_0_fu_182;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                agg_result_1_2_reg_297 <= normalizer_1_reg_1122;
            end if; 
        end if;
    end process;

    i_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln60_reg_1118 = ap_const_lv1_0) or ((ap_const_lv1_0 = and_ln67_fu_602_p2) or (ap_const_lv1_0 = and_ln60_1_reg_1139))))) then 
                i_1_fu_114 <= ap_const_lv2_1;
            elsif (((icmp_ln558_fu_640_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_1_fu_114 <= add_ln558_fu_652_p2;
            end if; 
        end if;
    end process;

    i_2_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln558_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_2_fu_142 <= ap_const_lv3_0;
            elsif (((icmp_ln167_fu_743_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_2_fu_142 <= add_ln167_fu_749_p2;
            end if; 
        end if;
    end process;

    i_3_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_3_fu_146 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_3_fu_146 <= add_ln185_reg_1348;
            end if; 
        end if;
    end process;

    i_4_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_874_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                i_4_fu_162 <= ap_const_lv2_0;
            elsif (((icmp_ln21_fu_967_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                i_4_fu_162 <= add_ln21_fu_973_p2;
            end if; 
        end if;
    end process;

    i_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((icmp_ln60_reg_1118 = ap_const_lv1_1)) then
                if (((grp_fu_404_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    i_fu_110 <= ap_const_lv2_1;
                elsif ((ap_const_boolean_1 = ap_condition_1229)) then 
                    i_fu_110 <= add_ln66_fu_608_p2;
                end if;
            end if; 
        end if;
    end process;

    reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_431 <= b_1_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_431 <= b_1_q0;
            end if; 
        end if;
    end process;

    this_p_write_assign_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_967_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                this_p_write_assign_reg_346 <= p_reg_1404;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                this_p_write_assign_reg_346 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    write_flag4_0_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_874_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                write_flag4_0_fu_178 <= ap_const_lv1_0;
            elsif (((i_9_load_fu_946_p1 = ap_const_lv2_1) and (icmp_ln21_fu_967_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                write_flag4_0_fu_178 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag4_2_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_967_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                write_flag4_2_reg_306 <= write_flag4_0_fu_178;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                write_flag4_2_reg_306 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag8_0_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_874_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                write_flag8_0_fu_170 <= ap_const_lv1_0;
            elsif ((not((i_9_load_fu_946_p1 = ap_const_lv2_1)) and not((i_9_load_fu_946_p1 = ap_const_lv2_0)) and (icmp_ln21_fu_967_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                write_flag8_0_fu_170 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag8_2_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_967_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                write_flag8_2_reg_326 <= write_flag8_0_fu_170;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                write_flag8_2_reg_326 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag_0_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_874_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                write_flag_0_fu_186 <= ap_const_lv1_0;
            elsif (((i_9_load_fu_946_p1 = ap_const_lv2_0) and (icmp_ln21_fu_967_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                write_flag_0_fu_186 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag_2_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_967_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                write_flag_2_reg_286 <= write_flag_0_fu_186;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                write_flag_2_reg_286 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                add_ln185_reg_1348 <= add_ln185_fu_880_p2;
                i_8_reg_1341 <= i_3_fu_146;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_9_load_fu_946_p1 = ap_const_lv2_1) and (icmp_ln21_fu_967_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                agg_result_116_0_fu_174 <= tmp_20_fu_979_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_9_load_fu_946_p1 = ap_const_lv2_1)) and not((i_9_load_fu_946_p1 = ap_const_lv2_0)) and (icmp_ln21_fu_967_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                agg_result_12_0_fu_166 <= tmp_20_fu_979_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_9_load_fu_946_p1 = ap_const_lv2_0) and (icmp_ln21_fu_967_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                agg_result_1_0_fu_182 <= tmp_20_fu_979_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_reg_1118 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                and_ln60_1_reg_1139 <= grp_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                b_1_addr_2_reg_1108 <= zext_ln551_fu_483_p1(6 - 1 downto 0);
                b_1_addr_3_reg_1113 <= zext_ln551_1_fu_493_p1(6 - 1 downto 0);
                icmp_ln60_reg_1118 <= icmp_ln60_fu_498_p2;
                normalizer_1_reg_1122 <= b_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                eps_1_2_3_fu_138 <= eps_1_2_5_fu_680_p3;
                eps_1_2_fu_134 <= eps_1_2_6_fu_686_p3;
                eps_2_2_3_fu_122 <= eps_2_2_5_fu_668_p3;
                eps_2_2_fu_118 <= eps_2_2_6_fu_674_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                eps_2_1_reg_1242 <= grp_fu_4206_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_8_reg_1341 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                eps_3_2_1_fu_154 <= aux_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_8_reg_1341 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                eps_3_2_2_fu_158 <= aux_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_8_reg_1341 = ap_const_lv2_1)) and not((i_8_reg_1341 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                eps_3_2_fu_150 <= aux_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_743_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                icmp_ln170_1_reg_1269 <= icmp_ln170_1_fu_783_p2;
                icmp_ln170_2_reg_1279 <= icmp_ln170_2_fu_813_p2;
                icmp_ln170_reg_1259 <= icmp_ln170_fu_755_p2;
                tmp_11_reg_1274 <= tmp_11_fu_795_p5;
                tmp_14_reg_1284 <= tmp_14_fu_825_p5;
                tmp_6_reg_1264 <= tmp_6_fu_765_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln558_fu_640_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                icmp_ln559_reg_1225 <= icmp_ln559_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln67_1_reg_1166 <= icmp_ln67_1_fu_592_p2;
                icmp_ln67_reg_1161 <= icmp_ln67_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                normalizer_reg_1443 <= grp_fu_399_p2;
                tmp_2_reg_1433 <= grp_fu_4178_p_dout0;
                tmp_3_reg_1438 <= grp_fu_4185_p_dout0;
                tmp_reg_1428 <= grp_fu_12738_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                num_res_load_1_fu_126 <= select_ln560_1_fu_719_p3;
                num_res_load_2_fu_130 <= select_ln560_fu_712_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                or_ln60_reg_1131 <= or_ln60_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_874_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                p_reg_1404 <= b_p_read(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln170_2_reg_1279 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln170_1_reg_1269 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln170_reg_1259 = ap_const_lv1_1)))) then
                reg_439 <= grp_fu_4193_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state44))) then
                reg_445 <= grp_fu_4199_p_dout0;
                reg_450 <= grp_fu_12742_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sub_ln60_reg_1075 <= sub_ln60_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_10_reg_1319 <= tmp_10_fu_847_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_13_reg_1330 <= tmp_13_fu_854_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_16_reg_1336 <= tmp_16_fu_860_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                    zext_ln167_reg_1251(2 downto 0) <= zext_ln167_fu_739_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln167_reg_1251(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln60_fu_498_p2, icmp_ln60_reg_1118, ap_CS_fsm_state3, grp_fu_404_p2, and_ln60_1_reg_1139, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, icmp_ln558_fu_640_p2, ap_CS_fsm_state23, icmp_ln167_fu_743_p2, ap_CS_fsm_state40, icmp_ln185_fu_874_p2, ap_CS_fsm_state52, icmp_ln21_fu_967_p2, ap_CS_fsm_state7, and_ln67_fu_602_p2, icmp_ln66_fu_562_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln60_fu_498_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_fu_404_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_fu_404_p2 = ap_const_lv1_1) and (icmp_ln60_reg_1118 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln66_fu_562_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln60_reg_1118 = ap_const_lv1_0) or ((ap_const_lv1_0 = and_ln67_fu_602_p2) or (ap_const_lv1_0 = and_ln60_1_reg_1139))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln558_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln167_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state40 => 
                if (((icmp_ln185_fu_874_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((icmp_ln21_fu_967_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln167_fu_749_p2 <= std_logic_vector(unsigned(i_2_fu_142) + unsigned(ap_const_lv3_1));
    add_ln170_1_fu_807_p2 <= std_logic_vector(unsigned(i_2_fu_142) + unsigned(ap_const_lv3_6));
    add_ln170_fu_777_p2 <= std_logic_vector(unsigned(i_2_fu_142) + unsigned(ap_const_lv3_7));
    add_ln185_fu_880_p2 <= std_logic_vector(unsigned(i_3_fu_146) + unsigned(ap_const_lv2_1));
    add_ln21_fu_973_p2 <= std_logic_vector(unsigned(i_4_fu_162) + unsigned(ap_const_lv2_1));
    add_ln551_1_fu_488_p2 <= std_logic_vector(unsigned(sub_ln60_reg_1075) + unsigned(ap_const_lv6_2));
    add_ln551_fu_478_p2 <= std_logic_vector(unsigned(sub_ln60_reg_1075) + unsigned(ap_const_lv6_1));
    add_ln558_fu_652_p2 <= std_logic_vector(unsigned(i_1_fu_114) + unsigned(ap_const_lv2_1));
    add_ln559_fu_630_p2 <= std_logic_vector(unsigned(sub_ln60_reg_1075) + unsigned(zext_ln559_fu_626_p1));
    add_ln66_fu_608_p2 <= std_logic_vector(unsigned(i_fu_110) + unsigned(ap_const_lv2_1));
    add_ln67_fu_552_p2 <= std_logic_vector(unsigned(sub_ln60_reg_1075) + unsigned(zext_ln67_fu_548_p1));
    and_ln67_fu_602_p2 <= (or_ln67_fu_598_p2 and grp_fu_4230_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_condition_1229_assign_proc : process(and_ln60_1_reg_1139, ap_CS_fsm_state7, and_ln67_fu_602_p2)
    begin
                ap_condition_1229 <= ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln67_fu_602_p2) and (ap_const_lv1_1 = and_ln60_1_reg_1139));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state55, sext_ln0_fu_1026_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_return_0 <= sext_ln0_fu_1026_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state55, select_ln617_fu_1030_p3, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_return_1 <= select_ln617_fu_1030_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state55, select_ln617_1_fu_1037_p3, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_return_2 <= select_ln617_1_fu_1037_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state55, select_ln617_2_fu_1044_p3, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_return_3 <= select_ln617_2_fu_1044_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    aux_address0_assign_proc : process(zext_ln167_reg_1251, ap_CS_fsm_state40, ap_CS_fsm_state39, zext_ln185_fu_869_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            aux_address0 <= zext_ln185_fu_869_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            aux_address0 <= zext_ln167_reg_1251(3 - 1 downto 0);
        else 
            aux_address0 <= "XXX";
        end if; 
    end process;


    aux_ce0_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            aux_ce0 <= ap_const_logic_1;
        else 
            aux_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            aux_we0 <= ap_const_logic_1;
        else 
            aux_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_address0_assign_proc : process(ap_CS_fsm_state1, b_1_addr_3_reg_1113, ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln60_1_fu_473_p1, zext_ln67_1_fu_557_p1, zext_ln559_1_fu_635_p1, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            b_1_address0 <= b_1_addr_3_reg_1113;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            b_1_address0 <= zext_ln559_1_fu_635_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_1_address0 <= zext_ln67_1_fu_557_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_1_address0 <= zext_ln60_1_fu_473_p1(6 - 1 downto 0);
        else 
            b_1_address0 <= "XXXXXX";
        end if; 
    end process;

    b_1_address1 <= b_1_addr_2_reg_1108;

    b_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_ce1_assign_proc : process(ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            b_1_ce1 <= ap_const_logic_1;
        else 
            b_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln60_fu_504_p1 <= normalizer_1_reg_1122;
    bitcast_ln67_fu_568_p1 <= b_1_q0;
    eps_1_2_5_fu_680_p3 <= 
        eps_2_1_reg_1242 when (icmp_ln559_reg_1225(0) = '1') else 
        eps_1_2_3_fu_138;
    eps_1_2_6_fu_686_p3 <= 
        eps_1_2_fu_134 when (icmp_ln559_reg_1225(0) = '1') else 
        eps_2_1_reg_1242;
    eps_2_2_5_fu_668_p3 <= 
        eps_2_1_reg_1242 when (icmp_ln559_reg_1225(0) = '1') else 
        eps_2_2_3_fu_122;
    eps_2_2_6_fu_674_p3 <= 
        eps_2_2_fu_118 when (icmp_ln559_reg_1225(0) = '1') else 
        eps_2_1_reg_1242;
    grp_fu_12738_p_ce <= ap_const_logic_1;
    grp_fu_12738_p_din0 <= grp_fu_357_p0;
    grp_fu_12738_p_din1 <= grp_fu_357_p1;
    grp_fu_12738_p_opcode <= ap_const_lv2_0;
    grp_fu_12742_p_ce <= ap_const_logic_1;
    grp_fu_12742_p_din0 <= grp_fu_383_p0;
    grp_fu_12742_p_din1 <= grp_fu_383_p1;

    grp_fu_357_p0_assign_proc : process(reg_439, tmp_10_reg_1319, tmp_13_reg_1330, ap_CS_fsm_state45, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_357_p0 <= tmp_13_reg_1330;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_357_p0 <= tmp_10_reg_1319;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_357_p0 <= reg_439;
        else 
            grp_fu_357_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_357_p1_assign_proc : process(reg_439, ap_CS_fsm_state45, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_357_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_357_p1 <= reg_439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_357_p1 <= ap_const_lv32_0;
        else 
            grp_fu_357_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_371_p0_assign_proc : process(eps_2_1_reg_1242, tmp_6_reg_1264, tmp_11_reg_1274, tmp_14_reg_1284, ap_CS_fsm_state28, ap_CS_fsm_state32, tmp_reg_1428, ap_CS_fsm_state19, ap_CS_fsm_state42, eps_3_2_2_fu_158, ap_CS_fsm_state24, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_371_p0 <= tmp_reg_1428;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_371_p0 <= eps_3_2_2_fu_158;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_371_p0 <= tmp_14_reg_1284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_371_p0 <= tmp_11_reg_1274;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_371_p0 <= tmp_6_reg_1264;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_371_p0 <= eps_2_1_reg_1242;
        else 
            grp_fu_371_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_371_p1_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state32, normalizer_reg_1443, eps_2_2_fu_118, ap_CS_fsm_state19, eps_2_2_3_fu_122, ap_CS_fsm_state42, ap_CS_fsm_state24, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_371_p1 <= normalizer_reg_1443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_371_p1 <= ap_const_lv32_BE000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_371_p1 <= eps_2_2_fu_118;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_371_p1 <= eps_2_2_3_fu_122;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_371_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_371_p1 <= ap_const_lv32_3F000000;
        else 
            grp_fu_371_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_378_p0_assign_proc : process(tmp_2_reg_1433, ap_CS_fsm_state42, eps_3_2_1_fu_154, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_378_p0 <= tmp_2_reg_1433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_378_p0 <= eps_3_2_1_fu_154;
        else 
            grp_fu_378_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_378_p1_assign_proc : process(normalizer_reg_1443, ap_CS_fsm_state42, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_378_p1 <= normalizer_reg_1443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_378_p1 <= ap_const_lv32_BE000000;
        else 
            grp_fu_378_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_383_p0_assign_proc : process(tmp_3_reg_1438, eps_3_2_fu_150, ap_CS_fsm_state42, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_383_p0 <= tmp_3_reg_1438;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_383_p0 <= eps_3_2_fu_150;
        else 
            grp_fu_383_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_383_p1_assign_proc : process(normalizer_reg_1443, ap_CS_fsm_state42, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_383_p1 <= normalizer_reg_1443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_383_p1 <= ap_const_lv32_BE000000;
        else 
            grp_fu_383_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p0_assign_proc : process(b_1_q0, ap_CS_fsm_state6, ap_CS_fsm_state2, normalizer_1_reg_1122, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_392_p0 <= normalizer_1_reg_1122;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_392_p0 <= b_1_q0;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_392_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_392_p1 <= ap_const_lv32_0;
        else 
            grp_fu_392_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_404_p0_assign_proc : process(or_ln60_fu_533_p2, or_ln60_reg_1131, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_404_p0 <= or_ln60_reg_1131;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_404_p0 <= or_ln60_fu_533_p2;
        else 
            grp_fu_404_p0 <= "X";
        end if; 
    end process;

    grp_fu_404_p2 <= (grp_fu_4230_p_dout0 and grp_fu_404_p0);
    grp_fu_4178_p_ce <= ap_const_logic_1;
    grp_fu_4178_p_din0 <= num_res_load_1_fu_126;
    grp_fu_4178_p_din1 <= reg_445;
    grp_fu_4178_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_4185_p_ce <= ap_const_logic_1;
    grp_fu_4185_p_din0 <= num_res_load_2_fu_130;
    grp_fu_4185_p_din1 <= reg_450;
    grp_fu_4185_p_opcode <= ap_const_lv2_0;
    grp_fu_4193_p_ce <= ap_const_logic_1;
    grp_fu_4193_p_din0 <= grp_fu_371_p0;
    grp_fu_4193_p_din1 <= grp_fu_371_p1;
    grp_fu_4199_p_ce <= ap_const_logic_1;
    grp_fu_4199_p_din0 <= grp_fu_378_p0;
    grp_fu_4199_p_din1 <= grp_fu_378_p1;
    grp_fu_4206_p_ce <= ap_const_logic_1;
    grp_fu_4206_p_din0 <= reg_431;
    grp_fu_4206_p_din1 <= normalizer_1_reg_1122;
    grp_fu_4230_p_ce <= ap_const_logic_1;
    grp_fu_4230_p_din0 <= grp_fu_392_p0;
    grp_fu_4230_p_din1 <= grp_fu_392_p1;
    grp_fu_4230_p_opcode <= ap_const_lv5_1;
    i_9_load_fu_946_p1 <= i_4_fu_162;
    icmp_ln167_fu_743_p2 <= "1" when (i_2_fu_142 = ap_const_lv3_5) else "0";
    icmp_ln170_1_fu_783_p2 <= "1" when (unsigned(add_ln170_fu_777_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln170_2_fu_813_p2 <= "1" when (unsigned(add_ln170_1_fu_807_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln170_fu_755_p2 <= "1" when (unsigned(i_2_fu_142) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln185_fu_874_p2 <= "1" when (i_3_fu_146 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_967_p2 <= "1" when (i_4_fu_162 = ap_const_lv2_3) else "0";
    icmp_ln558_fu_640_p2 <= "1" when (i_1_fu_114 = ap_const_lv2_3) else "0";
    icmp_ln559_fu_646_p2 <= "1" when (i_1_fu_114 = ap_const_lv2_1) else "0";
    icmp_ln60_1_fu_521_p2 <= "0" when (tmp_4_fu_507_p4 = ap_const_lv8_FF) else "1";
    icmp_ln60_2_fu_527_p2 <= "1" when (trunc_ln60_fu_517_p1 = ap_const_lv23_0) else "0";
    icmp_ln60_fu_498_p2 <= "1" when (b_p_read = ap_const_lv32_0) else "0";
    icmp_ln66_fu_562_p2 <= "1" when (i_fu_110 = ap_const_lv2_3) else "0";
    icmp_ln67_1_fu_592_p2 <= "1" when (trunc_ln67_fu_582_p1 = ap_const_lv23_0) else "0";
    icmp_ln67_fu_586_p2 <= "0" when (tmp_8_fu_572_p4 = ap_const_lv8_FF) else "1";
    or_ln60_fu_533_p2 <= (icmp_ln60_2_fu_527_p2 or icmp_ln60_1_fu_521_p2);
    or_ln67_fu_598_p2 <= (icmp_ln67_reg_1161 or icmp_ln67_1_reg_1166);
    select_ln560_1_fu_719_p3 <= 
        reg_439 when (icmp_ln559_reg_1225(0) = '1') else 
        num_res_load_1_fu_126;
    select_ln560_fu_712_p3 <= 
        num_res_load_2_fu_130 when (icmp_ln559_reg_1225(0) = '1') else 
        reg_439;
    select_ln617_1_fu_1037_p3 <= 
        agg_result_116_2_reg_317 when (write_flag4_2_reg_306(0) = '1') else 
        p_read1;
    select_ln617_2_fu_1044_p3 <= 
        agg_result_12_2_reg_337 when (write_flag8_2_reg_326(0) = '1') else 
        p_read2;
    select_ln617_fu_1030_p3 <= 
        agg_result_1_2_reg_297 when (write_flag_2_reg_286(0) = '1') else 
        p_read;
        sext_ln0_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(this_p_write_assign_reg_346),32));

    sub_ln60_fu_467_p2 <= std_logic_vector(unsigned(tmp_1_fu_459_p3) - unsigned(zext_ln60_fu_455_p1));
    tmp_10_fu_847_p3 <= 
        grp_fu_12738_p_dout0 when (icmp_ln170_reg_1259(0) = '1') else 
        ap_const_lv32_0;
    tmp_11_fu_795_p4 <= std_logic_vector(unsigned(trunc_ln171_fu_761_p1) + unsigned(ap_const_lv2_3));
    tmp_13_fu_854_p3 <= 
        grp_fu_12738_p_dout0 when (icmp_ln170_1_reg_1269(0) = '1') else 
        tmp_10_reg_1319;
    tmp_14_fu_825_p4 <= (trunc_ln171_fu_761_p1 xor ap_const_lv2_2);
    tmp_16_fu_860_p3 <= 
        grp_fu_12738_p_dout0 when (icmp_ln170_2_reg_1279(0) = '1') else 
        tmp_13_reg_1330;
    tmp_1_fu_459_p3 <= (b_1_offset & ap_const_lv2_0);
    tmp_4_fu_507_p4 <= bitcast_ln60_fu_504_p1(30 downto 23);
    tmp_8_fu_572_p4 <= bitcast_ln67_fu_568_p1(30 downto 23);
    trunc_ln171_fu_761_p1 <= i_2_fu_142(2 - 1 downto 0);
    trunc_ln60_fu_517_p1 <= bitcast_ln60_fu_504_p1(23 - 1 downto 0);
    trunc_ln67_fu_582_p1 <= bitcast_ln67_fu_568_p1(23 - 1 downto 0);
    zext_ln167_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_142),64));
    zext_ln185_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_fu_146),64));
    zext_ln551_1_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln551_1_fu_488_p2),64));
    zext_ln551_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln551_fu_478_p2),64));
    zext_ln559_1_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln559_fu_630_p2),64));
    zext_ln559_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_114),6));
    zext_ln60_1_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln60_fu_467_p2),64));
    zext_ln60_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_1_offset),6));
    zext_ln67_1_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_fu_552_p2),64));
    zext_ln67_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_110),6));
end behav;
