-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_main_Pipeline_VITIS_LOOP_455_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln535 : IN STD_LOGIC_VECTOR (5 downto 0);
    b_num_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_num_ce0 : OUT STD_LOGIC;
    b_num_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sub_ln153 : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_4230_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4230_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4230_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_4230_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_4230_p_ce : OUT STD_LOGIC );
end;


architecture behav of main_main_Pipeline_VITIS_LOOP_455_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln456_1_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln455_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal merge_reg_87 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln455_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal add_ln455_fu_127_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln455_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln456_1_fu_148_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln456_1_reg_260 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal b_num_load_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_num_load_2_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal and_ln456_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln456_reg_282 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_phi_mux_merge_phi_fu_92_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln456_1_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln456_2_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_50 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_34 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_103_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln456_fu_133_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln456_fu_137_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln456_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln456_1_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_161_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln456_fu_171_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln456_1_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln456_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_137_fu_178_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln456_1_fu_188_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln456_3_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln456_2_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln456_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln456_1_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_103_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln455_reg_246 = ap_const_lv1_1) or ((ap_const_lv1_1 = and_ln456_1_reg_287) or (grp_fu_108_p2 = ap_const_lv1_1))))) then 
                    ap_return_preg <= ap_phi_mux_merge_phi_fu_92_p6;
                end if; 
            end if;
        end if;
    end process;


    i_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_50 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_0 = and_ln456_1_reg_287) and (icmp_ln455_reg_246 = ap_const_lv1_0) and (grp_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_fu_50 <= add_ln455_reg_250;
            end if; 
        end if;
    end process;

    merge_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln455_reg_246 = ap_const_lv1_0) and (grp_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                merge_reg_87 <= ap_const_lv2_2;
            elsif (((ap_const_lv1_0 = and_ln456_1_reg_287) and (icmp_ln455_reg_246 = ap_const_lv1_0) and (grp_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                merge_reg_87 <= ap_const_lv2_1;
            elsif (((icmp_ln455_fu_121_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                merge_reg_87 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln455_reg_250 <= add_ln455_fu_127_p2;
                icmp_ln455_reg_246 <= icmp_ln455_fu_121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln455_fu_121_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln456_1_reg_260 <= add_ln456_1_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln455_reg_246 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                and_ln456_1_reg_287 <= grp_fu_108_p2;
                and_ln456_reg_282 <= and_ln456_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln455_reg_246 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                b_num_load_2_reg_276 <= b_num_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln455_reg_246 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                b_num_load_reg_270 <= b_num_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln455_fu_127_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_34) + unsigned(ap_const_lv2_1));
    add_ln456_1_fu_148_p2 <= std_logic_vector(unsigned(sub_ln153) + unsigned(zext_ln456_fu_133_p1));
    add_ln456_fu_137_p2 <= std_logic_vector(unsigned(sub_ln535) + unsigned(zext_ln456_fu_133_p1));
    and_ln456_fu_228_p2 <= (or_ln456_fu_204_p2 and or_ln456_1_fu_222_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_CS_fsm_state5, grp_fu_108_p2, and_ln456_1_reg_287, icmp_ln455_reg_246)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln455_reg_246 = ap_const_lv1_1) or ((ap_const_lv1_1 = and_ln456_1_reg_287) or (grp_fu_108_p2 = ap_const_lv1_1))))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state5, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_phi_mux_merge_phi_fu_92_p6_assign_proc : process(ap_CS_fsm_state5, grp_fu_108_p2, and_ln456_1_reg_287, icmp_ln455_reg_246, merge_reg_87)
    begin
        if (((ap_const_lv1_0 = and_ln456_1_reg_287) and (icmp_ln455_reg_246 = ap_const_lv1_0) and (grp_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_merge_phi_fu_92_p6 <= ap_const_lv2_1;
        else 
            ap_phi_mux_merge_phi_fu_92_p6 <= merge_reg_87;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state5, grp_fu_108_p2, and_ln456_1_reg_287, icmp_ln455_reg_246, ap_phi_mux_merge_phi_fu_92_p6, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln455_reg_246 = ap_const_lv1_1) or ((ap_const_lv1_1 = and_ln456_1_reg_287) or (grp_fu_108_p2 = ap_const_lv1_1))))) then 
            ap_return <= ap_phi_mux_merge_phi_fu_92_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_i_34_assign_proc : process(ap_CS_fsm_state1, i_fu_50, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_34 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_34 <= i_fu_50;
        end if; 
    end process;


    b_num_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln455_reg_246, icmp_ln455_fu_121_p2, ap_CS_fsm_state2, zext_ln456_1_fu_143_p1, zext_ln456_2_fu_154_p1)
    begin
        if (((icmp_ln455_reg_246 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_num_address0 <= zext_ln456_2_fu_154_p1(6 - 1 downto 0);
        elsif (((icmp_ln455_fu_121_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_num_address0 <= zext_ln456_1_fu_143_p1(6 - 1 downto 0);
        else 
            b_num_address0 <= "XXXXXX";
        end if; 
    end process;


    b_num_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln455_reg_246, icmp_ln455_fu_121_p2, ap_CS_fsm_state2, ap_start_int)
    begin
        if ((((icmp_ln455_reg_246 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln455_fu_121_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            b_num_ce0 <= ap_const_logic_1;
        else 
            b_num_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln456_1_fu_175_p1 <= b_num_load_2_reg_276;
    bitcast_ln456_fu_158_p1 <= b_num_load_reg_270;

    grp_fu_103_opcode_assign_proc : process(grp_fu_108_p2, icmp_ln455_reg_246, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((icmp_ln455_reg_246 = ap_const_lv1_0)) then
            if (((grp_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                grp_fu_103_opcode <= ap_const_lv5_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                grp_fu_103_opcode <= ap_const_lv5_4;
            else 
                grp_fu_103_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_103_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_103_p1_assign_proc : process(b_num_q0, b_num_load_2_reg_276, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_103_p1 <= b_num_load_2_reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_103_p1 <= b_num_q0;
        else 
            grp_fu_103_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_108_p0_assign_proc : process(ap_CS_fsm_state5, and_ln456_fu_228_p2, and_ln456_reg_282, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_108_p0 <= and_ln456_reg_282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_108_p0 <= and_ln456_fu_228_p2;
        else 
            grp_fu_108_p0 <= "X";
        end if; 
    end process;

    grp_fu_108_p2 <= (grp_fu_4230_p_dout0 and grp_fu_108_p0);
    grp_fu_4230_p_ce <= ap_const_logic_1;
    grp_fu_4230_p_din0 <= b_num_load_reg_270;
    grp_fu_4230_p_din1 <= grp_fu_103_p1;
    grp_fu_4230_p_opcode <= grp_fu_103_opcode;
    icmp_ln455_fu_121_p2 <= "1" when (ap_sig_allocacmp_i_34 = ap_const_lv2_3) else "0";
    icmp_ln456_1_fu_198_p2 <= "1" when (trunc_ln456_fu_171_p1 = ap_const_lv23_0) else "0";
    icmp_ln456_2_fu_210_p2 <= "0" when (tmp_137_fu_178_p4 = ap_const_lv8_FF) else "1";
    icmp_ln456_3_fu_216_p2 <= "1" when (trunc_ln456_1_fu_188_p1 = ap_const_lv23_0) else "0";
    icmp_ln456_fu_192_p2 <= "0" when (tmp_s_fu_161_p4 = ap_const_lv8_FF) else "1";
    or_ln456_1_fu_222_p2 <= (icmp_ln456_3_fu_216_p2 or icmp_ln456_2_fu_210_p2);
    or_ln456_fu_204_p2 <= (icmp_ln456_fu_192_p2 or icmp_ln456_1_fu_198_p2);
    tmp_137_fu_178_p4 <= bitcast_ln456_1_fu_175_p1(30 downto 23);
    tmp_s_fu_161_p4 <= bitcast_ln456_fu_158_p1(30 downto 23);
    trunc_ln456_1_fu_188_p1 <= bitcast_ln456_1_fu_175_p1(23 - 1 downto 0);
    trunc_ln456_fu_171_p1 <= bitcast_ln456_fu_158_p1(23 - 1 downto 0);
    zext_ln456_1_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln456_fu_137_p2),64));
    zext_ln456_2_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln456_1_reg_260),64));
    zext_ln456_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_34),6));
end behav;
