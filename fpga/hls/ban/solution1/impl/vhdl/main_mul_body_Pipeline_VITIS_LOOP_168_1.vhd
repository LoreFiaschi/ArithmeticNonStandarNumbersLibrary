-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_mul_body_Pipeline_VITIS_LOOP_168_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    aux_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    aux_ce0 : OUT STD_LOGIC;
    aux_we0 : OUT STD_LOGIC;
    aux_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of main_mul_body_Pipeline_VITIS_LOOP_168_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_41185B57 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000110000101101101010111";
    constant ap_const_lv32_40CB6D87 : STD_LOGIC_VECTOR (31 downto 0) := "01000000110010110110110110000111";
    constant ap_const_lv32_3FB54079 : STD_LOGIC_VECTOR (31 downto 0) := "00111111101101010100000001111001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln168_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal b_num_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_num_ce0 : STD_LOGIC;
    signal b_num_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_num_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_num_ce1 : STD_LOGIC;
    signal b_num_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_num_address2 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_num_ce2 : STD_LOGIC;
    signal b_num_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_259 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_259_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_259_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln171_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_reg_276_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_reg_276_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_reg_276_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_reg_276_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_reg_276_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_reg_276_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal b_num_load_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln171_1_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_1_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_1_reg_291_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_1_reg_291_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_1_reg_291_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_1_reg_291_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_1_reg_291_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_1_reg_291_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_1_reg_291_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal b_num_load_1_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_199_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_306_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_306_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_306_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_i_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln171_2_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_2_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_2_reg_317_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_2_reg_317_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_2_reg_317_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_2_reg_317_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_2_reg_317_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_2_reg_317_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_2_reg_317_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal b_num_load_2_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_236_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_332_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_332_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_332_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_i_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln172_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln172_1_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln172_2_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln171_cast_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_46 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln168_fu_142_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln172_fu_148_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln171_fu_169_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln172_fu_180_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln172_1_fu_184_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln172_1_fu_190_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln171_1_fu_206_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln172_2_fu_217_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln172_2_fu_221_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln172_3_fu_227_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_109_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_mul_body_Pipeline_VITIS_LOOP_168_1_b_num_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    b_num_U : component main_mul_body_Pipeline_VITIS_LOOP_168_1_b_num_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_num_address0,
        ce0 => b_num_ce0,
        q0 => b_num_q0,
        address1 => b_num_address1,
        ce1 => b_num_ce1,
        q1 => b_num_q1,
        address2 => b_num_address2,
        ce2 => b_num_ce2,
        q2 => b_num_q2);

    fadd_32ns_32ns_32_4_full_dsp_1_U24 : component main_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_i_reg_286,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_100_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U25 : component main_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_306,
        din1 => mul_1_i_reg_312,
        ce => ap_const_logic_1,
        dout => grp_fu_105_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U26 : component main_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_332,
        din1 => mul_2_i_reg_338,
        ce => ap_const_logic_1,
        dout => grp_fu_109_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U27 : component main_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_num_load_reg_281,
        din1 => ap_const_lv32_41185B57,
        ce => ap_const_logic_1,
        dout => grp_fu_113_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U28 : component main_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_num_load_1_reg_301,
        din1 => ap_const_lv32_40CB6D87,
        ce => ap_const_logic_1,
        dout => grp_fu_118_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U29 : component main_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_num_load_2_reg_327,
        din1 => ap_const_lv32_3FB54079,
        ce => ap_const_logic_1,
        dout => grp_fu_123_p2);

    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln168_fu_136_p2 = ap_const_lv1_0))) then 
                    i_fu_46 <= add_ln168_fu_142_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_46 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_2_reg_259_pp0_iter10_reg <= i_2_reg_259_pp0_iter9_reg;
                i_2_reg_259_pp0_iter11_reg <= i_2_reg_259_pp0_iter10_reg;
                i_2_reg_259_pp0_iter12_reg <= i_2_reg_259_pp0_iter11_reg;
                i_2_reg_259_pp0_iter13_reg <= i_2_reg_259_pp0_iter12_reg;
                i_2_reg_259_pp0_iter14_reg <= i_2_reg_259_pp0_iter13_reg;
                i_2_reg_259_pp0_iter15_reg <= i_2_reg_259_pp0_iter14_reg;
                i_2_reg_259_pp0_iter16_reg <= i_2_reg_259_pp0_iter15_reg;
                i_2_reg_259_pp0_iter2_reg <= i_2_reg_259_pp0_iter1_reg;
                i_2_reg_259_pp0_iter3_reg <= i_2_reg_259_pp0_iter2_reg;
                i_2_reg_259_pp0_iter4_reg <= i_2_reg_259_pp0_iter3_reg;
                i_2_reg_259_pp0_iter5_reg <= i_2_reg_259_pp0_iter4_reg;
                i_2_reg_259_pp0_iter6_reg <= i_2_reg_259_pp0_iter5_reg;
                i_2_reg_259_pp0_iter7_reg <= i_2_reg_259_pp0_iter6_reg;
                i_2_reg_259_pp0_iter8_reg <= i_2_reg_259_pp0_iter7_reg;
                i_2_reg_259_pp0_iter9_reg <= i_2_reg_259_pp0_iter8_reg;
                icmp_ln171_1_reg_291 <= icmp_ln171_1_fu_174_p2;
                icmp_ln171_1_reg_291_pp0_iter10_reg <= icmp_ln171_1_reg_291_pp0_iter9_reg;
                icmp_ln171_1_reg_291_pp0_iter11_reg <= icmp_ln171_1_reg_291_pp0_iter10_reg;
                icmp_ln171_1_reg_291_pp0_iter5_reg <= icmp_ln171_1_reg_291;
                icmp_ln171_1_reg_291_pp0_iter6_reg <= icmp_ln171_1_reg_291_pp0_iter5_reg;
                icmp_ln171_1_reg_291_pp0_iter7_reg <= icmp_ln171_1_reg_291_pp0_iter6_reg;
                icmp_ln171_1_reg_291_pp0_iter8_reg <= icmp_ln171_1_reg_291_pp0_iter7_reg;
                icmp_ln171_1_reg_291_pp0_iter9_reg <= icmp_ln171_1_reg_291_pp0_iter8_reg;
                icmp_ln171_2_reg_317 <= icmp_ln171_2_fu_211_p2;
                icmp_ln171_2_reg_317_pp0_iter10_reg <= icmp_ln171_2_reg_317_pp0_iter9_reg;
                icmp_ln171_2_reg_317_pp0_iter11_reg <= icmp_ln171_2_reg_317_pp0_iter10_reg;
                icmp_ln171_2_reg_317_pp0_iter12_reg <= icmp_ln171_2_reg_317_pp0_iter11_reg;
                icmp_ln171_2_reg_317_pp0_iter13_reg <= icmp_ln171_2_reg_317_pp0_iter12_reg;
                icmp_ln171_2_reg_317_pp0_iter14_reg <= icmp_ln171_2_reg_317_pp0_iter13_reg;
                icmp_ln171_2_reg_317_pp0_iter15_reg <= icmp_ln171_2_reg_317_pp0_iter14_reg;
                icmp_ln171_2_reg_317_pp0_iter9_reg <= icmp_ln171_2_reg_317;
                icmp_ln171_reg_276_pp0_iter2_reg <= icmp_ln171_reg_276;
                icmp_ln171_reg_276_pp0_iter3_reg <= icmp_ln171_reg_276_pp0_iter2_reg;
                icmp_ln171_reg_276_pp0_iter4_reg <= icmp_ln171_reg_276_pp0_iter3_reg;
                icmp_ln171_reg_276_pp0_iter5_reg <= icmp_ln171_reg_276_pp0_iter4_reg;
                icmp_ln171_reg_276_pp0_iter6_reg <= icmp_ln171_reg_276_pp0_iter5_reg;
                icmp_ln171_reg_276_pp0_iter7_reg <= icmp_ln171_reg_276_pp0_iter6_reg;
                tmp_1_reg_306 <= tmp_1_fu_199_p3;
                tmp_1_reg_306_pp0_iter10_reg <= tmp_1_reg_306_pp0_iter9_reg;
                tmp_1_reg_306_pp0_iter11_reg <= tmp_1_reg_306_pp0_iter10_reg;
                tmp_1_reg_306_pp0_iter9_reg <= tmp_1_reg_306;
                tmp_3_reg_332 <= tmp_3_fu_236_p3;
                tmp_3_reg_332_pp0_iter13_reg <= tmp_3_reg_332;
                tmp_3_reg_332_pp0_iter14_reg <= tmp_3_reg_332_pp0_iter13_reg;
                tmp_3_reg_332_pp0_iter15_reg <= tmp_3_reg_332_pp0_iter14_reg;
                tmp_5_reg_343 <= tmp_5_fu_242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_2_reg_259 <= ap_sig_allocacmp_i_2;
                i_2_reg_259_pp0_iter1_reg <= i_2_reg_259;
                icmp_ln171_reg_276 <= icmp_ln171_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                b_num_load_1_reg_301 <= b_num_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                b_num_load_2_reg_327 <= b_num_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                b_num_load_reg_281 <= b_num_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln171_1_reg_291_pp0_iter7_reg = ap_const_lv1_1))) then
                mul_1_i_reg_312 <= grp_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln171_2_reg_317_pp0_iter11_reg = ap_const_lv1_1))) then
                mul_2_i_reg_338 <= grp_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln171_reg_276_pp0_iter3_reg = ap_const_lv1_1))) then
                mul_i_reg_286 <= grp_fu_113_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln168_fu_142_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv3_1));
    add_ln171_1_fu_206_p2 <= std_logic_vector(unsigned(i_2_reg_259_pp0_iter7_reg) + unsigned(ap_const_lv3_6));
    add_ln171_fu_169_p2 <= std_logic_vector(unsigned(i_2_reg_259_pp0_iter3_reg) + unsigned(ap_const_lv3_7));
    add_ln172_1_fu_184_p2 <= std_logic_vector(signed(sext_ln172_fu_180_p1) + signed(ap_const_lv4_3));
    add_ln172_2_fu_221_p2 <= std_logic_vector(signed(sext_ln172_2_fu_217_p1) + signed(ap_const_lv4_3));
    add_ln172_fu_148_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv3_3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln168_fu_136_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln168_fu_136_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter16_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_46, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_46;
        end if; 
    end process;

    aux_address0 <= trunc_ln171_cast_fu_248_p1(3 - 1 downto 0);

    aux_ce0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            aux_ce0 <= ap_const_logic_1;
        else 
            aux_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    aux_d0 <= tmp_5_reg_343;

    aux_we0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            aux_we0 <= ap_const_logic_1;
        else 
            aux_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_num_address0 <= zext_ln172_2_fu_231_p1(6 - 1 downto 0);
    b_num_address1 <= zext_ln172_1_fu_194_p1(6 - 1 downto 0);
    b_num_address2 <= zext_ln172_fu_154_p1(6 - 1 downto 0);

    b_num_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            b_num_ce0 <= ap_const_logic_1;
        else 
            b_num_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_num_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            b_num_ce1 <= ap_const_logic_1;
        else 
            b_num_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_num_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_num_ce2 <= ap_const_logic_1;
        else 
            b_num_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln168_fu_136_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv3_5) else "0";
    icmp_ln171_1_fu_174_p2 <= "1" when (unsigned(add_ln171_fu_169_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln171_2_fu_211_p2 <= "1" when (unsigned(add_ln171_1_fu_206_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln171_fu_164_p2 <= "1" when (unsigned(i_2_reg_259) < unsigned(ap_const_lv3_3)) else "0";
        sext_ln172_1_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln172_1_fu_184_p2),6));

        sext_ln172_2_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln171_1_fu_206_p2),4));

        sext_ln172_3_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln172_2_fu_221_p2),6));

        sext_ln172_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln171_fu_169_p2),4));

    tmp_1_fu_199_p3 <= 
        grp_fu_100_p2 when (icmp_ln171_reg_276_pp0_iter7_reg(0) = '1') else 
        ap_const_lv32_0;
    tmp_3_fu_236_p3 <= 
        grp_fu_105_p2 when (icmp_ln171_1_reg_291_pp0_iter11_reg(0) = '1') else 
        tmp_1_reg_306_pp0_iter11_reg;
    tmp_5_fu_242_p3 <= 
        grp_fu_109_p2 when (icmp_ln171_2_reg_317_pp0_iter15_reg(0) = '1') else 
        tmp_3_reg_332_pp0_iter15_reg;
    trunc_ln171_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_259_pp0_iter16_reg),64));
    zext_ln172_1_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln172_1_fu_190_p1),64));
    zext_ln172_2_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln172_3_fu_227_p1),64));
    zext_ln172_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln172_fu_148_p2),64));
end behav;
