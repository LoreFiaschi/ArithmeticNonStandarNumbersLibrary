-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_p_sum_Pipeline_VITIS_LOOP_80_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    agg_result_num_load_2226_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_num_load_31616_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    idx_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    idx_out_ap_vld : OUT STD_LOGIC;
    idx_2_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    idx_2_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of main_p_sum_Pipeline_VITIS_LOOP_80_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal idx_2_reg_199 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln80_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln81_fu_119_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln81_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln81_fu_131_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln81_3_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_3_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_4_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_4_reg_224 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_92_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_88 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal idx_fu_56 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal and_ln81_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln81_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_142_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln81_fu_152_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln81_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U12 : component main_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln81_fu_131_p3,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_100_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_92_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                UnifiedRetVal_reg_88 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                UnifiedRetVal_reg_88 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    idx_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_fu_56 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = and_ln81_fu_172_p2) and (icmp_ln80_reg_204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_fu_56 <= add_ln81_reg_208;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln81_reg_208 <= add_ln81_fu_119_p2;
                icmp_ln80_reg_204 <= icmp_ln80_fu_113_p2;
                idx_2_reg_199 <= idx_fu_56;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln81_3_reg_219 <= icmp_ln81_3_fu_156_p2;
                icmp_ln81_4_reg_224 <= icmp_ln81_4_fu_162_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln80_reg_204, ap_CS_fsm_state3, and_ln81_fu_172_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_lv1_1 = and_ln81_fu_172_p2) and (icmp_ln80_reg_204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln80_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln81_fu_119_p2 <= std_logic_vector(unsigned(idx_fu_56) + unsigned(ap_const_lv2_1));
    and_ln81_fu_172_p2 <= (or_ln81_fu_168_p2 and grp_fu_100_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_92_p4_assign_proc : process(icmp_ln80_reg_204, UnifiedRetVal_reg_88, ap_CS_fsm_state4)
    begin
        if (((icmp_ln80_reg_204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_92_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_92_p4 <= UnifiedRetVal_reg_88;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_92_p4, ap_CS_fsm_state4, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_92_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln81_fu_138_p1 <= select_ln81_fu_131_p3;
    icmp_ln80_fu_113_p2 <= "1" when (idx_fu_56 = ap_const_lv2_3) else "0";
    icmp_ln81_3_fu_156_p2 <= "0" when (tmp_7_fu_142_p4 = ap_const_lv8_FF) else "1";
    icmp_ln81_4_fu_162_p2 <= "1" when (trunc_ln81_fu_152_p1 = ap_const_lv23_0) else "0";
    icmp_ln81_fu_125_p2 <= "1" when (idx_fu_56 = ap_const_lv2_0) else "0";

    idx_2_out_assign_proc : process(icmp_ln80_reg_204, add_ln81_reg_208, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            idx_2_out <= ap_const_lv2_0;
        elsif (((icmp_ln80_reg_204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            idx_2_out <= add_ln81_reg_208;
        else 
            idx_2_out <= "XX";
        end if; 
    end process;


    idx_2_out_ap_vld_assign_proc : process(icmp_ln80_reg_204, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln80_reg_204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            idx_2_out_ap_vld <= ap_const_logic_1;
        else 
            idx_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    idx_out_assign_proc : process(idx_2_reg_199, icmp_ln80_reg_204, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            idx_out <= ap_const_lv2_3;
        elsif (((icmp_ln80_reg_204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            idx_out <= idx_2_reg_199;
        else 
            idx_out <= "XX";
        end if; 
    end process;


    idx_out_ap_vld_assign_proc : process(icmp_ln80_reg_204, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln80_reg_204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            idx_out_ap_vld <= ap_const_logic_1;
        else 
            idx_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln81_fu_168_p2 <= (icmp_ln81_4_reg_224 or icmp_ln81_3_reg_219);
    select_ln81_fu_131_p3 <= 
        agg_result_num_load_2226_reload when (icmp_ln81_fu_125_p2(0) = '1') else 
        agg_result_num_load_31616_reload;
    tmp_7_fu_142_p4 <= bitcast_ln81_fu_138_p1(30 downto 23);
    trunc_ln81_fu_152_p1 <= bitcast_ln81_fu_138_p1(23 - 1 downto 0);
end behav;
