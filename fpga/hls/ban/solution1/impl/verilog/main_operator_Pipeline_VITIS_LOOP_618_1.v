// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_operator_Pipeline_VITIS_LOOP_618_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_i1,
        this_p_read_cast,
        sub_ln634,
        this_1_address0,
        this_1_ce0,
        this_1_q0,
        num_res_1_02_out,
        num_res_1_02_out_ap_vld,
        num_res_2_01_out,
        num_res_2_01_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sub_i1;
input  [5:0] this_p_read_cast;
input  [5:0] sub_ln634;
output  [5:0] this_1_address0;
output   this_1_ce0;
input  [31:0] this_1_q0;
output  [31:0] num_res_1_02_out;
output   num_res_1_02_out_ap_vld;
output  [31:0] num_res_2_01_out;
output   num_res_2_01_out_ap_vld;

reg ap_idle;
reg this_1_ce0;
reg num_res_1_02_out_ap_vld;
reg num_res_2_01_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln618_fu_113_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] icmp_ln620_fu_123_p2;
reg   [0:0] icmp_ln620_reg_236;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln621_fu_150_p2;
reg   [0:0] icmp_ln621_reg_246;
wire   [63:0] zext_ln621_1_fu_145_p1;
wire    ap_block_pp0_stage0;
reg   [1:0] i_fu_48;
wire   [1:0] add_ln618_fu_156_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_2;
reg   [31:0] num_res_2_fu_52;
wire   [31:0] num_res_2_6_fu_187_p3;
reg   [31:0] num_res_2_3_fu_56;
wire   [31:0] num_res_2_5_fu_180_p3;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] i_cast_fu_119_p1;
wire   [5:0] add_ln621_fu_133_p2;
wire   [5:0] zext_ln621_fu_129_p1;
wire   [5:0] add_ln621_1_fu_139_p2;
wire   [31:0] num_res_1_fu_173_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln618_fu_113_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_48 <= add_ln618_fu_156_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln618_fu_113_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln620_reg_236 <= icmp_ln620_fu_123_p2;
        icmp_ln621_reg_246 <= icmp_ln621_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        num_res_2_3_fu_56 <= num_res_2_5_fu_180_p3;
        num_res_2_fu_52 <= num_res_2_6_fu_187_p3;
    end
end

always @ (*) begin
    if (((icmp_ln618_fu_113_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 2'd2;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_48;
    end
end

always @ (*) begin
    if (((icmp_ln618_fu_113_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        num_res_1_02_out_ap_vld = 1'b1;
    end else begin
        num_res_1_02_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln618_fu_113_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        num_res_2_01_out_ap_vld = 1'b1;
    end else begin
        num_res_2_01_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_1_ce0 = 1'b1;
    end else begin
        this_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln618_fu_156_p2 = ($signed(ap_sig_allocacmp_i_2) + $signed(2'd3));

assign add_ln621_1_fu_139_p2 = (add_ln621_fu_133_p2 + zext_ln621_fu_129_p1);

assign add_ln621_fu_133_p2 = (sub_ln634 + this_p_read_cast);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_cast_fu_119_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln618_fu_113_p2 = ((ap_sig_allocacmp_i_2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln620_fu_123_p2 = ((i_cast_fu_119_p1 < sub_i1) ? 1'b1 : 1'b0);

assign icmp_ln621_fu_150_p2 = ((ap_sig_allocacmp_i_2 == 2'd1) ? 1'b1 : 1'b0);

assign num_res_1_02_out = num_res_2_3_fu_56;

assign num_res_1_fu_173_p3 = ((icmp_ln620_reg_236[0:0] == 1'b1) ? 32'd0 : this_1_q0);

assign num_res_2_01_out = num_res_2_fu_52;

assign num_res_2_5_fu_180_p3 = ((icmp_ln621_reg_246[0:0] == 1'b1) ? num_res_1_fu_173_p3 : num_res_2_3_fu_56);

assign num_res_2_6_fu_187_p3 = ((icmp_ln621_reg_246[0:0] == 1'b1) ? num_res_2_fu_52 : num_res_1_fu_173_p3);

assign this_1_address0 = zext_ln621_1_fu_145_p1;

assign zext_ln621_1_fu_145_p1 = add_ln621_1_fu_139_p2;

assign zext_ln621_fu_129_p1 = ap_sig_allocacmp_i_2;

endmodule //main_operator_Pipeline_VITIS_LOOP_618_1
