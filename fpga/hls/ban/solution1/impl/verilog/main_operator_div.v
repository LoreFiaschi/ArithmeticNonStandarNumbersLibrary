// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_operator_div (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_num_offset
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] b_num_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] b_num_q0;
wire    ap_CS_fsm_state2;
reg   [31:0] c_num_1_reg_122;
reg   [31:0] c_num_2_reg_127;
wire   [0:0] icmp_ln75_fu_85_p2;
reg   [0:0] icmp_ln75_reg_132;
wire   [0:0] icmp_ln75_1_fu_91_p2;
reg   [0:0] icmp_ln75_1_reg_137;
wire   [0:0] and_ln75_fu_101_p2;
reg   [0:0] and_ln75_reg_142;
wire    ap_CS_fsm_state3;
wire    grp_p_div_body_fu_34_ap_start;
wire    grp_p_div_body_fu_34_ap_done;
wire    grp_p_div_body_fu_34_ap_idle;
wire    grp_p_div_body_fu_34_ap_ready;
wire   [5:0] grp_p_div_body_fu_34_num_num_address0;
wire    grp_p_div_body_fu_34_num_num_ce0;
wire   [31:0] grp_p_div_body_fu_34_ap_return_0;
wire   [31:0] grp_p_div_body_fu_34_ap_return_1;
wire   [31:0] grp_p_div_body_fu_34_ap_return_2;
wire    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start;
wire    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_done;
wire    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_idle;
wire    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_ready;
wire   [1:0] grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_idx_1_out;
wire    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_idx_1_out_ap_vld;
reg    grp_p_div_body_fu_34_ap_start_reg;
reg    grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [31:0] bitcast_ln75_fu_67_p1;
wire   [7:0] tmp_fu_71_p4;
wire   [22:0] trunc_ln75_fu_81_p1;
wire   [0:0] or_ln75_fu_97_p2;
wire   [0:0] grp_fu_49_p2;
reg    grp_fu_49_ce;
reg    ap_block_state4_on_subcall_done;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_p_div_body_fu_34_ap_start_reg = 1'b0;
#0 grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg = 1'b0;
end

main_p_sum_Pipeline_VITIS_LOOP_108_1_b_num_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 60 ),
    .AddressWidth( 6 ))
b_num_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_p_div_body_fu_34_num_num_address0),
    .ce0(grp_p_div_body_fu_34_num_num_ce0),
    .q0(b_num_q0)
);

main_p_div_body grp_p_div_body_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_p_div_body_fu_34_ap_start),
    .ap_done(grp_p_div_body_fu_34_ap_done),
    .ap_idle(grp_p_div_body_fu_34_ap_idle),
    .ap_ready(grp_p_div_body_fu_34_ap_ready),
    .num_num_address0(grp_p_div_body_fu_34_num_num_address0),
    .num_num_ce0(grp_p_div_body_fu_34_num_num_ce0),
    .num_num_q0(b_num_q0),
    .num_den_offset(b_num_offset),
    .ap_return_0(grp_p_div_body_fu_34_ap_return_0),
    .ap_return_1(grp_p_div_body_fu_34_ap_return_1),
    .ap_return_2(grp_p_div_body_fu_34_ap_return_2)
);

main_operator_Pipeline_VITIS_LOOP_80_1 grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start),
    .ap_done(grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_done),
    .ap_idle(grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_idle),
    .ap_ready(grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_ready),
    .c_num_1(c_num_1_reg_122),
    .c_num_2(c_num_2_reg_127),
    .idx_1_out(grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_idx_1_out),
    .idx_1_out_ap_vld(grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_idx_1_out_ap_vld)
);

main_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U97(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_p_div_body_fu_34_ap_return_0),
    .din1(32'd0),
    .ce(grp_fu_49_ce),
    .opcode(5'd1),
    .dout(grp_fu_49_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if (((1'd1 == and_ln75_fu_101_p2) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_ready == 1'b1)) begin
            grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_p_div_body_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_p_div_body_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_p_div_body_fu_34_ap_ready == 1'b1)) begin
            grp_p_div_body_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        and_ln75_reg_142 <= and_ln75_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_num_1_reg_122 <= grp_p_div_body_fu_34_ap_return_1;
        c_num_2_reg_127 <= grp_p_div_body_fu_34_ap_return_2;
        icmp_ln75_1_reg_137 <= icmp_ln75_1_fu_91_p2;
        icmp_ln75_reg_132 <= icmp_ln75_fu_85_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_p_div_body_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((grp_p_div_body_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_49_ce = 1'b1;
    end else begin
        grp_fu_49_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_p_div_body_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln75_fu_101_p2 = (or_ln75_fu_97_p2 & grp_fu_49_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((1'd1 == and_ln75_reg_142) & (grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_done == 1'b0));
end

assign bitcast_ln75_fu_67_p1 = grp_p_div_body_fu_34_ap_return_0;

assign grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start = grp_operator_Pipeline_VITIS_LOOP_80_1_fu_42_ap_start_reg;

assign grp_p_div_body_fu_34_ap_start = grp_p_div_body_fu_34_ap_start_reg;

assign icmp_ln75_1_fu_91_p2 = ((trunc_ln75_fu_81_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_85_p2 = ((tmp_fu_71_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln75_fu_97_p2 = (icmp_ln75_reg_132 | icmp_ln75_1_reg_137);

assign tmp_fu_71_p4 = {{bitcast_ln75_fu_67_p1[30:23]}};

assign trunc_ln75_fu_81_p1 = bitcast_ln75_fu_67_p1[22:0];

endmodule //main_operator_div
