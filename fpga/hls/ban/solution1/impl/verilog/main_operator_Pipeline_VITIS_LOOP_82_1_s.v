// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_operator_Pipeline_VITIS_LOOP_82_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_num_1,
        c_num_2,
        idx_tmp_out,
        idx_tmp_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] c_num_1;
input  [31:0] c_num_2;
output  [31:0] idx_tmp_out;
output   idx_tmp_out_ap_vld;

reg ap_idle;
reg idx_tmp_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln82_fu_86_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] add_ln83_fu_92_p2;
reg   [1:0] add_ln83_reg_198;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] select_ln83_fu_104_p3;
wire   [0:0] icmp_ln83_1_fu_131_p2;
reg   [0:0] icmp_ln83_1_reg_208;
wire   [0:0] icmp_ln83_2_fu_137_p2;
reg   [0:0] icmp_ln83_2_reg_213;
reg   [31:0] idx_tmp_fu_46;
wire   [31:0] idx_tmp_1_fu_164_p3;
wire    ap_block_pp0_stage0;
reg   [1:0] idx_fu_50;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_idx_1;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln83_fu_98_p2;
wire   [31:0] bitcast_ln83_fu_113_p1;
wire   [7:0] tmp_2_fu_117_p4;
wire   [22:0] trunc_ln83_fu_127_p1;
wire   [0:0] or_ln83_fu_151_p2;
wire   [0:0] grp_fu_73_p2;
wire   [0:0] and_ln83_fu_155_p2;
wire   [31:0] zext_ln83_fu_161_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

main_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U132(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln83_fu_104_p3),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_73_p2)
);

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln82_fu_86_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            idx_fu_50 <= add_ln83_fu_92_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            idx_fu_50 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln83_reg_198 <= add_ln83_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_fu_86_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_1_reg_208 <= icmp_ln83_1_fu_131_p2;
        icmp_ln83_2_reg_213 <= icmp_ln83_2_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_tmp_fu_46 <= idx_tmp_1_fu_164_p3;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_86_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_idx_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_idx_1 = idx_fu_50;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_86_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_tmp_out_ap_vld = 1'b1;
    end else begin
        idx_tmp_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln83_fu_92_p2 = (ap_sig_allocacmp_idx_1 + 2'd1);

assign and_ln83_fu_155_p2 = (or_ln83_fu_151_p2 & grp_fu_73_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln83_fu_113_p1 = select_ln83_fu_104_p3;

assign icmp_ln82_fu_86_p2 = ((ap_sig_allocacmp_idx_1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_131_p2 = ((tmp_2_fu_117_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_2_fu_137_p2 = ((trunc_ln83_fu_127_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_98_p2 = ((ap_sig_allocacmp_idx_1 == 2'd0) ? 1'b1 : 1'b0);

assign idx_tmp_1_fu_164_p3 = ((and_ln83_fu_155_p2[0:0] == 1'b1) ? idx_tmp_fu_46 : zext_ln83_fu_161_p1);

assign idx_tmp_out = idx_tmp_fu_46;

assign or_ln83_fu_151_p2 = (icmp_ln83_2_reg_213 | icmp_ln83_1_reg_208);

assign select_ln83_fu_104_p3 = ((icmp_ln83_fu_98_p2[0:0] == 1'b1) ? c_num_1 : c_num_2);

assign tmp_2_fu_117_p4 = {{bitcast_ln83_fu_113_p1[30:23]}};

assign trunc_ln83_fu_127_p1 = bitcast_ln83_fu_113_p1[22:0];

assign zext_ln83_fu_161_p1 = add_ln83_reg_198;

endmodule //main_operator_Pipeline_VITIS_LOOP_82_1_s
