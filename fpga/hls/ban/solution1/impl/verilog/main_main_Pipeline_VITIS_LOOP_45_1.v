// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_main_Pipeline_VITIS_LOOP_45_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_num_address0,
        r_num_ce0,
        r_num_we0,
        r_num_d0,
        r_num_address1,
        r_num_ce1,
        r_num_we1,
        r_num_d1,
        r_p_address0,
        r_p_ce0,
        r_p_we0,
        r_p_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] r_num_address0;
output   r_num_ce0;
output   r_num_we0;
output  [31:0] r_num_d0;
output  [12:0] r_num_address1;
output   r_num_ce1;
output   r_num_we1;
output  [31:0] r_num_d1;
output  [11:0] r_p_address0;
output   r_p_ce0;
output   r_p_we0;
output  [31:0] r_p_d0;

reg ap_idle;
reg[12:0] r_num_address0;
reg r_num_ce0;
reg r_num_we0;
reg r_num_ce1;
reg r_num_we1;
reg r_p_ce0;
reg r_p_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln45_fu_101_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [12:0] sub_ln46_fu_134_p2;
reg   [12:0] sub_ln46_reg_181;
wire   [63:0] zext_ln46_1_fu_140_p1;
wire   [63:0] zext_ln46_2_fu_151_p1;
wire   [63:0] i_28_cast_fu_113_p1;
wire   [63:0] zext_ln46_3_fu_166_p1;
reg   [11:0] i_28_fu_40;
wire   [11:0] add_ln45_fu_107_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i;
wire   [10:0] trunc_ln46_fu_122_p1;
wire   [12:0] tmp_146_cast_fu_126_p3;
wire   [12:0] zext_ln46_fu_118_p1;
wire   [12:0] add_ln46_fu_145_p2;
wire   [12:0] add_ln46_1_fu_161_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln45_fu_101_p2 == 1'd0)) begin
            i_28_fu_40 <= add_ln45_fu_107_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_28_fu_40 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        sub_ln46_reg_181 <= sub_ln46_fu_134_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln45_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 12'd0;
    end else begin
        ap_sig_allocacmp_i = i_28_fu_40;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_num_address0 = zext_ln46_3_fu_166_p1;
    end else if (((icmp_ln45_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        r_num_address0 = zext_ln46_2_fu_151_p1;
    end else begin
        r_num_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln45_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        r_num_ce0 = 1'b1;
    end else begin
        r_num_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        r_num_ce1 = 1'b1;
    end else begin
        r_num_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln45_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        r_num_we0 = 1'b1;
    end else begin
        r_num_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        r_num_we1 = 1'b1;
    end else begin
        r_num_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        r_p_ce0 = 1'b1;
    end else begin
        r_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        r_p_we0 = 1'b1;
    end else begin
        r_p_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln45_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_107_p2 = (ap_sig_allocacmp_i + 12'd1);

assign add_ln46_1_fu_161_p2 = (sub_ln46_reg_181 + 13'd2);

assign add_ln46_fu_145_p2 = (sub_ln46_fu_134_p2 + 13'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_28_cast_fu_113_p1 = ap_sig_allocacmp_i;

assign icmp_ln45_fu_101_p2 = ((ap_sig_allocacmp_i == 12'd2131) ? 1'b1 : 1'b0);

assign r_num_address1 = zext_ln46_1_fu_140_p1;

assign r_num_d0 = 32'd0;

assign r_num_d1 = 32'd0;

assign r_p_address0 = i_28_cast_fu_113_p1;

assign r_p_d0 = 32'd0;

assign sub_ln46_fu_134_p2 = (tmp_146_cast_fu_126_p3 - zext_ln46_fu_118_p1);

assign tmp_146_cast_fu_126_p3 = {{trunc_ln46_fu_122_p1}, {2'd0}};

assign trunc_ln46_fu_122_p1 = ap_sig_allocacmp_i[10:0];

assign zext_ln46_1_fu_140_p1 = sub_ln46_fu_134_p2;

assign zext_ln46_2_fu_151_p1 = add_ln46_fu_145_p2;

assign zext_ln46_3_fu_166_p1 = add_ln46_1_fu_161_p2;

assign zext_ln46_fu_118_p1 = ap_sig_allocacmp_i;

endmodule //main_main_Pipeline_VITIS_LOOP_45_1
