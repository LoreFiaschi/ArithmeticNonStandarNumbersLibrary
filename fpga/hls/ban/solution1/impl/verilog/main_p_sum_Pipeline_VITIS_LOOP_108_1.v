// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_p_sum_Pipeline_VITIS_LOOP_108_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln108,
        zext_ln108_1,
        sub_ln109_1,
        agg_result_num_load_31616_out,
        agg_result_num_load_31616_out_ap_vld,
        agg_result_num_load_2226_out,
        agg_result_num_load_2226_out_ap_vld,
        agg_result_num_load_1_out,
        agg_result_num_load_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] zext_ln108;
input  [0:0] zext_ln108_1;
input  [4:0] sub_ln109_1;
output  [31:0] agg_result_num_load_31616_out;
output   agg_result_num_load_31616_out_ap_vld;
output  [31:0] agg_result_num_load_2226_out;
output   agg_result_num_load_2226_out_ap_vld;
output  [31:0] agg_result_num_load_1_out;
output   agg_result_num_load_1_out_ap_vld;

reg ap_idle;
reg agg_result_num_load_31616_out_ap_vld;
reg agg_result_num_load_2226_out_ap_vld;
reg agg_result_num_load_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln108_reg_348;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] b_num_address0;
reg    b_num_ce0;
wire   [31:0] b_num_q0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] zext_ln108_1_cast_fu_136_p1;
reg   [5:0] zext_ln108_1_cast_reg_338;
wire  signed [5:0] sub_ln109_1_cast_fu_144_p1;
reg  signed [5:0] sub_ln109_1_cast_reg_343;
wire   [0:0] icmp_ln108_fu_186_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [1:0] trunc_ln109_fu_196_p1;
reg   [1:0] trunc_ln109_reg_352;
reg   [1:0] trunc_ln109_reg_352_pp0_iter1_reg;
reg   [31:0] b_num_load_reg_362;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] tmp_6_fu_235_p5;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln109_fu_210_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] i_fu_52;
wire   [63:0] add_ln108_fu_215_p2;
wire   [63:0] zext_ln108_cast_fu_140_p1;
wire    ap_loop_init;
reg   [31:0] tmp_1_fu_56;
wire   [31:0] grp_fu_132_p2;
wire    ap_block_pp0_stage0;
reg   [31:0] tmp_2_fu_60;
reg   [31:0] tmp_3_fu_64;
reg   [31:0] tmp_4_fu_68;
reg   [31:0] ap_sig_allocacmp_tmp_4_load;
reg   [31:0] tmp_5_fu_72;
reg   [31:0] ap_sig_allocacmp_tmp_5_load;
reg   [31:0] tmp_7_fu_76;
reg   [31:0] ap_sig_allocacmp_tmp_7_load;
wire    ap_block_pp0_stage0_01001;
wire   [5:0] empty_fu_192_p1;
wire   [5:0] newFirst_fu_200_p2;
wire   [5:0] newSecond_fu_204_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
reg    ap_done_pending_pp0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_320;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

main_p_sum_Pipeline_VITIS_LOOP_108_1_b_num_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 60 ),
    .AddressWidth( 6 ))
b_num_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_num_address0),
    .ce0(b_num_ce0),
    .q0(b_num_q0)
);

main_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_fu_235_p5),
    .din1(b_num_load_reg_362),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

main_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U2(
    .din0(ap_sig_allocacmp_tmp_4_load),
    .din1(ap_sig_allocacmp_tmp_5_load),
    .din2(ap_sig_allocacmp_tmp_7_load),
    .din3(trunc_ln109_reg_352),
    .dout(tmp_6_fu_235_p5)
);

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_52 <= zext_ln108_cast_fu_140_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln108_fu_186_p2 == 1'd0))) begin
        i_fu_52 <= add_ln108_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_1_fu_56 <= 32'd3237648248;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln109_reg_352_pp0_iter1_reg == 2'd0))) begin
            tmp_1_fu_56 <= grp_fu_132_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_2_fu_60 <= 32'd1083753565;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln109_reg_352_pp0_iter1_reg == 2'd1))) begin
            tmp_2_fu_60 <= grp_fu_132_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_3_fu_64 <= 32'd3226897136;
        end else if ((1'b1 == ap_condition_320)) begin
            tmp_3_fu_64 <= grp_fu_132_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_4_fu_68 <= 32'd3237648248;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln109_reg_352_pp0_iter1_reg == 2'd0))) begin
            tmp_4_fu_68 <= grp_fu_132_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_5_fu_72 <= 32'd1083753565;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln109_reg_352_pp0_iter1_reg == 2'd1))) begin
            tmp_5_fu_72 <= grp_fu_132_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_7_fu_76 <= 32'd3226897136;
        end else if ((1'b1 == ap_condition_320)) begin
            tmp_7_fu_76 <= grp_fu_132_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_reg_348 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        b_num_load_reg_362 <= b_num_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln108_reg_348 <= icmp_ln108_fu_186_p2;
        trunc_ln109_reg_352_pp0_iter1_reg <= trunc_ln109_reg_352;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln109_1_cast_reg_343 <= sub_ln109_1_cast_fu_144_p1;
        zext_ln108_1_cast_reg_338[0] <= zext_ln108_1_cast_fu_136_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln108_fu_186_p2 == 1'd0))) begin
        trunc_ln109_reg_352 <= trunc_ln109_fu_196_p1;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_348 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_num_load_1_out_ap_vld = 1'b1;
    end else begin
        agg_result_num_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_348 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_num_load_2226_out_ap_vld = 1'b1;
    end else begin
        agg_result_num_load_2226_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_348 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_num_load_31616_out_ap_vld = 1'b1;
    end else begin
        agg_result_num_load_31616_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_348 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_348 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln109_reg_352_pp0_iter1_reg == 2'd0))) begin
        ap_sig_allocacmp_tmp_4_load = grp_fu_132_p2;
    end else begin
        ap_sig_allocacmp_tmp_4_load = tmp_4_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln109_reg_352_pp0_iter1_reg == 2'd1))) begin
        ap_sig_allocacmp_tmp_5_load = grp_fu_132_p2;
    end else begin
        ap_sig_allocacmp_tmp_5_load = tmp_5_fu_72;
    end
end

always @ (*) begin
    if ((~(trunc_ln109_reg_352_pp0_iter1_reg == 2'd1) & ~(trunc_ln109_reg_352_pp0_iter1_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_tmp_7_load = grp_fu_132_p2;
    end else begin
        ap_sig_allocacmp_tmp_7_load = tmp_7_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_num_ce0 = 1'b1;
    end else begin
        b_num_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln108_fu_215_p2 = (i_fu_52 + 64'd1);

assign agg_result_num_load_1_out = tmp_1_fu_56;

assign agg_result_num_load_2226_out = tmp_2_fu_60;

assign agg_result_num_load_31616_out = tmp_3_fu_64;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_320 = (~(trunc_ln109_reg_352_pp0_iter1_reg == 2'd1) & ~(trunc_ln109_reg_352_pp0_iter1_reg == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign b_num_address0 = zext_ln109_fu_210_p1;

assign empty_fu_192_p1 = i_fu_52[5:0];

assign icmp_ln108_fu_186_p2 = ((i_fu_52 == 64'd3) ? 1'b1 : 1'b0);

assign newFirst_fu_200_p2 = ($signed(sub_ln109_1_cast_reg_343) - $signed(zext_ln108_1_cast_reg_338));

assign newSecond_fu_204_p2 = (empty_fu_192_p1 + newFirst_fu_200_p2);

assign sub_ln109_1_cast_fu_144_p1 = $signed(sub_ln109_1);

assign trunc_ln109_fu_196_p1 = i_fu_52[1:0];

assign zext_ln108_1_cast_fu_136_p1 = zext_ln108_1;

assign zext_ln108_cast_fu_140_p1 = zext_ln108;

assign zext_ln109_fu_210_p1 = newSecond_fu_204_p2;

always @ (posedge ap_clk) begin
    zext_ln108_1_cast_reg_338[5:1] <= 5'b00000;
end

endmodule //main_p_sum_Pipeline_VITIS_LOOP_108_1
