// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_p_sum_Pipeline_VITIS_LOOP_80_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result_num_load_2226_reload,
        agg_result_num_load_31616_reload,
        idx_out,
        idx_out_ap_vld,
        idx_2_out,
        idx_2_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] agg_result_num_load_2226_reload;
input  [31:0] agg_result_num_load_31616_reload;
output  [1:0] idx_out;
output   idx_out_ap_vld;
output  [1:0] idx_2_out;
output   idx_2_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] idx_out;
reg idx_out_ap_vld;
reg[1:0] idx_2_out;
reg idx_2_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] idx_2_reg_199;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln80_fu_113_p2;
reg   [0:0] icmp_ln80_reg_204;
wire   [1:0] add_ln81_fu_119_p2;
reg   [1:0] add_ln81_reg_208;
wire   [31:0] select_ln81_fu_131_p3;
wire   [0:0] icmp_ln81_3_fu_156_p2;
reg   [0:0] icmp_ln81_3_reg_219;
wire   [0:0] icmp_ln81_4_fu_162_p2;
reg   [0:0] icmp_ln81_4_reg_224;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_92_p4;
reg   [0:0] UnifiedRetVal_reg_88;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state4;
reg   [1:0] idx_fu_56;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln81_fu_172_p2;
wire   [0:0] icmp_ln81_fu_125_p2;
wire   [31:0] bitcast_ln81_fu_138_p1;
wire   [7:0] tmp_7_fu_142_p4;
wire   [22:0] trunc_ln81_fu_152_p1;
wire   [0:0] or_ln81_fu_168_p2;
wire   [0:0] grp_fu_100_p2;
reg   [0:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_return_preg = 1'd0;
end

main_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln81_fu_131_p3),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_100_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_92_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        UnifiedRetVal_reg_88 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        UnifiedRetVal_reg_88 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idx_fu_56 <= 2'd0;
    end else if (((1'd1 == and_ln81_fu_172_p2) & (icmp_ln80_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        idx_fu_56 <= add_ln81_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln81_reg_208 <= add_ln81_fu_119_p2;
        icmp_ln80_reg_204 <= icmp_ln80_fu_113_p2;
        idx_2_reg_199 <= idx_fu_56;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln81_3_reg_219 <= icmp_ln81_3_fu_156_p2;
        icmp_ln81_4_reg_224 <= icmp_ln81_4_fu_162_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_92_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_92_p4 = UnifiedRetVal_reg_88;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_92_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        idx_2_out = 2'd0;
    end else if (((icmp_ln80_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        idx_2_out = add_ln81_reg_208;
    end else begin
        idx_2_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln80_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        idx_2_out_ap_vld = 1'b1;
    end else begin
        idx_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        idx_out = 2'd3;
    end else if (((icmp_ln80_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        idx_out = idx_2_reg_199;
    end else begin
        idx_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln80_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        idx_out_ap_vld = 1'b1;
    end else begin
        idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'd1 == and_ln81_fu_172_p2) & (icmp_ln80_reg_204 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln80_reg_204 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln81_fu_119_p2 = (idx_fu_56 + 2'd1);

assign and_ln81_fu_172_p2 = (or_ln81_fu_168_p2 & grp_fu_100_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign bitcast_ln81_fu_138_p1 = select_ln81_fu_131_p3;

assign icmp_ln80_fu_113_p2 = ((idx_fu_56 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln81_3_fu_156_p2 = ((tmp_7_fu_142_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln81_4_fu_162_p2 = ((trunc_ln81_fu_152_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_125_p2 = ((idx_fu_56 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln81_fu_168_p2 = (icmp_ln81_4_reg_224 | icmp_ln81_3_reg_219);

assign select_ln81_fu_131_p3 = ((icmp_ln81_fu_125_p2[0:0] == 1'b1) ? agg_result_num_load_2226_reload : agg_result_num_load_31616_reload);

assign tmp_7_fu_142_p4 = {{bitcast_ln81_fu_138_p1[30:23]}};

assign trunc_ln81_fu_152_p1 = bitcast_ln81_fu_138_p1[22:0];

endmodule //main_p_sum_Pipeline_VITIS_LOOP_80_1
