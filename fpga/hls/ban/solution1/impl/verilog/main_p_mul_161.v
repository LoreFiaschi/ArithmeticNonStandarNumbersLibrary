// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_p_mul_161 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_a_0_read,
        num_a_1_read,
        num_a_2_read,
        num_b_0_read,
        num_b_1_read,
        num_b_2_read,
        num_res_0_read,
        num_res_1_read,
        num_res_2_read,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_a_0_read;
input  [31:0] num_a_1_read;
input  [31:0] num_a_2_read;
input  [31:0] num_b_0_read;
input  [31:0] num_b_1_read;
input  [31:0] num_b_2_read;
input  [31:0] num_res_0_read;
input  [31:0] num_res_1_read;
input  [31:0] num_res_2_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln167_fu_202_p1;
reg   [63:0] zext_ln167_reg_504;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln170_fu_218_p2;
reg   [0:0] icmp_ln170_reg_512;
wire   [0:0] icmp_ln167_fu_206_p2;
wire   [31:0] tmp_fu_228_p5;
reg   [31:0] tmp_reg_517;
wire   [0:0] icmp_ln170_18_fu_243_p2;
reg   [0:0] icmp_ln170_18_reg_522;
wire   [31:0] tmp_s_fu_255_p5;
reg   [31:0] tmp_s_reg_527;
wire   [0:0] icmp_ln170_19_fu_270_p2;
reg   [0:0] icmp_ln170_19_reg_532;
wire   [31:0] tmp_245_fu_282_p5;
reg   [31:0] tmp_245_reg_537;
wire   [31:0] grp_fu_182_p2;
reg   [31:0] mul_i_reg_588;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] mul_1_i_reg_593;
wire   [31:0] grp_fu_190_p2;
reg   [31:0] mul_2_i_reg_598;
wire   [31:0] tmp_242_fu_316_p3;
reg   [31:0] tmp_242_reg_603;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp_244_fu_323_p3;
reg   [31:0] tmp_244_reg_609;
wire    ap_CS_fsm_state13;
wire   [31:0] tmp_247_fu_329_p3;
reg   [31:0] tmp_247_reg_615;
wire    ap_CS_fsm_state17;
reg   [1:0] i_65_reg_620;
wire    ap_CS_fsm_state19;
wire   [1:0] add_ln185_fu_349_p2;
reg   [1:0] add_ln185_reg_627;
wire   [0:0] icmp_ln185_fu_343_p2;
reg   [2:0] aux_address0;
reg    aux_ce0;
reg    aux_we0;
wire   [31:0] aux_q0;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln185_fu_338_p1;
reg   [2:0] i_fu_68;
wire   [2:0] add_ln167_fu_212_p2;
reg   [1:0] i_63_fu_76;
wire    ap_CS_fsm_state20;
reg   [31:0] num_res6_06_fu_80;
reg   [0:0] write_flag_0_fu_84;
reg   [0:0] write_flag8_0_fu_88;
reg   [31:0] num_res5_07_fu_92;
reg   [31:0] num_res_08_fu_96;
reg   [0:0] write_flag5_0_fu_100;
reg   [31:0] grp_fu_177_p0;
reg   [31:0] grp_fu_177_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state3;
wire   [1:0] trunc_ln171_fu_224_p1;
wire   [2:0] add_ln170_fu_237_p2;
wire   [1:0] tmp_s_fu_255_p4;
wire   [2:0] add_ln170_10_fu_264_p2;
wire   [1:0] tmp_245_fu_282_p4;
wire   [31:0] grp_fu_177_p2;
wire   [31:0] select_ln187_fu_373_p3;
wire   [31:0] select_ln187_1_fu_380_p3;
wire   [31:0] select_ln187_2_fu_387_p3;
reg   [19:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

main_sqrt_aux_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
aux_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(aux_address0),
    .ce0(aux_ce0),
    .we0(aux_we0),
    .d0(tmp_247_reg_615),
    .q0(aux_q0)
);

main_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U228(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_177_p0),
    .din1(grp_fu_177_p1),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

main_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U229(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_517),
    .din1(num_b_0_read),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

main_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U230(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_527),
    .din1(num_b_1_read),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

main_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U231(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_245_reg_537),
    .din1(num_b_2_read),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

main_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U232(
    .din0(num_a_0_read),
    .din1(num_a_1_read),
    .din2(num_a_2_read),
    .din3(trunc_ln171_fu_224_p1),
    .dout(tmp_fu_228_p5)
);

main_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U233(
    .din0(num_a_0_read),
    .din1(num_a_1_read),
    .din2(num_a_2_read),
    .din3(tmp_s_fu_255_p4),
    .dout(tmp_s_fu_255_p5)
);

main_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U234(
    .din0(num_a_0_read),
    .din1(num_a_1_read),
    .din2(num_a_2_read),
    .din3(tmp_245_fu_282_p4),
    .dout(tmp_245_fu_282_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_63_fu_76 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_63_fu_76 <= add_ln185_reg_627;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_68 <= 3'd0;
    end else if (((icmp_ln167_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_68 <= add_ln167_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        write_flag5_0_fu_100 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state20) & (i_65_reg_620 == 2'd1))) begin
        write_flag5_0_fu_100 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        write_flag8_0_fu_88 <= 1'd0;
    end else if ((~(i_65_reg_620 == 2'd1) & ~(i_65_reg_620 == 2'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        write_flag8_0_fu_88 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        write_flag_0_fu_84 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state20) & (i_65_reg_620 == 2'd0))) begin
        write_flag_0_fu_84 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln185_reg_627 <= add_ln185_fu_349_p2;
        i_65_reg_620 <= i_63_fu_76;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln170_18_reg_522 <= icmp_ln170_18_fu_243_p2;
        icmp_ln170_19_reg_532 <= icmp_ln170_19_fu_270_p2;
        icmp_ln170_reg_512 <= icmp_ln170_fu_218_p2;
        tmp_245_reg_537 <= tmp_245_fu_282_p5;
        tmp_reg_517 <= tmp_fu_228_p5;
        tmp_s_reg_527 <= tmp_s_fu_255_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_18_reg_522 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_1_i_reg_593 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_19_reg_532 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_2_i_reg_598 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_reg_512 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_i_reg_588 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (i_65_reg_620 == 2'd1))) begin
        num_res5_07_fu_92 <= aux_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_65_reg_620 == 2'd1) & ~(i_65_reg_620 == 2'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        num_res6_06_fu_80 <= aux_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (i_65_reg_620 == 2'd0))) begin
        num_res_08_fu_96 <= aux_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_242_reg_603 <= tmp_242_fu_316_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_244_reg_609 <= tmp_244_fu_323_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_247_reg_615 <= tmp_247_fu_329_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln167_reg_504[2 : 0] <= zext_ln167_fu_202_p1[2 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state19) & (icmp_ln185_fu_343_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln185_fu_343_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        aux_address0 = zext_ln185_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        aux_address0 = zext_ln167_reg_504;
    end else begin
        aux_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19))) begin
        aux_ce0 = 1'b1;
    end else begin
        aux_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        aux_we0 = 1'b1;
    end else begin
        aux_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_177_p0 = tmp_244_reg_609;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_177_p0 = tmp_242_reg_603;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_177_p0 = mul_i_reg_588;
    end else begin
        grp_fu_177_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_177_p1 = mul_2_i_reg_598;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_177_p1 = mul_1_i_reg_593;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_177_p1 = 32'd0;
    end else begin
        grp_fu_177_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln167_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln185_fu_343_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_fu_212_p2 = (i_fu_68 + 3'd1);

assign add_ln170_10_fu_264_p2 = ($signed(i_fu_68) + $signed(3'd6));

assign add_ln170_fu_237_p2 = ($signed(i_fu_68) + $signed(3'd7));

assign add_ln185_fu_349_p2 = (i_63_fu_76 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = select_ln187_fu_373_p3;

assign ap_return_1 = select_ln187_1_fu_380_p3;

assign ap_return_2 = select_ln187_2_fu_387_p3;

assign icmp_ln167_fu_206_p2 = ((i_fu_68 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln170_18_fu_243_p2 = ((add_ln170_fu_237_p2 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln170_19_fu_270_p2 = ((add_ln170_10_fu_264_p2 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_218_p2 = ((i_fu_68 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_343_p2 = ((i_63_fu_76 == 2'd3) ? 1'b1 : 1'b0);

assign select_ln187_1_fu_380_p3 = ((write_flag5_0_fu_100[0:0] == 1'b1) ? num_res5_07_fu_92 : num_res_1_read);

assign select_ln187_2_fu_387_p3 = ((write_flag8_0_fu_88[0:0] == 1'b1) ? num_res6_06_fu_80 : num_res_2_read);

assign select_ln187_fu_373_p3 = ((write_flag_0_fu_84[0:0] == 1'b1) ? num_res_08_fu_96 : num_res_0_read);

assign tmp_242_fu_316_p3 = ((icmp_ln170_reg_512[0:0] == 1'b1) ? grp_fu_177_p2 : 32'd0);

assign tmp_244_fu_323_p3 = ((icmp_ln170_18_reg_522[0:0] == 1'b1) ? grp_fu_177_p2 : tmp_242_reg_603);

assign tmp_245_fu_282_p4 = (trunc_ln171_fu_224_p1 ^ 2'd2);

assign tmp_247_fu_329_p3 = ((icmp_ln170_19_reg_532[0:0] == 1'b1) ? grp_fu_177_p2 : tmp_244_reg_609);

assign tmp_s_fu_255_p4 = ($signed(trunc_ln171_fu_224_p1) + $signed(2'd3));

assign trunc_ln171_fu_224_p1 = i_fu_68[1:0];

assign zext_ln167_fu_202_p1 = i_fu_68;

assign zext_ln185_fu_338_p1 = i_63_fu_76;

always @ (posedge ap_clk) begin
    zext_ln167_reg_504[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //main_p_mul_161
