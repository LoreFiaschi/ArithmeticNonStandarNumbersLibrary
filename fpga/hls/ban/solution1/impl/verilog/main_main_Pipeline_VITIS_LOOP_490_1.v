// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_main_Pipeline_VITIS_LOOP_490_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_ln535,
        b_num_address0,
        b_num_ce0,
        b_num_q0,
        b_num_load_11_out,
        b_num_load_11_out_ap_vld,
        or_ln491_out,
        or_ln491_out_ap_vld,
        ap_return,
        grp_fu_4230_p_din0,
        grp_fu_4230_p_din1,
        grp_fu_4230_p_opcode,
        grp_fu_4230_p_dout0,
        grp_fu_4230_p_ce
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] sub_ln535;
output  [5:0] b_num_address0;
output   b_num_ce0;
input  [31:0] b_num_q0;
output  [31:0] b_num_load_11_out;
output   b_num_load_11_out_ap_vld;
output  [0:0] or_ln491_out;
output   or_ln491_out_ap_vld;
output  [0:0] ap_return;
output  [31:0] grp_fu_4230_p_din0;
output  [31:0] grp_fu_4230_p_din1;
output  [4:0] grp_fu_4230_p_opcode;
input  [0:0] grp_fu_4230_p_dout0;
output   grp_fu_4230_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg b_num_ce0;
reg b_num_load_11_out_ap_vld;
reg or_ln491_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] i_33_reg_202;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln490_fu_119_p2;
reg   [0:0] icmp_ln490_reg_207;
reg   [31:0] b_num_load_reg_216;
wire    ap_CS_fsm_state3;
wire   [0:0] or_ln491_fu_168_p2;
reg   [0:0] or_ln491_reg_223;
wire    ap_CS_fsm_state4;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_97_p4;
reg   [0:0] UnifiedRetVal_reg_93;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln491_1_fu_134_p1;
reg   [1:0] i_fu_56;
wire   [1:0] add_ln490_fu_180_p2;
wire   [0:0] and_ln491_fu_174_p2;
wire   [5:0] zext_ln491_fu_125_p1;
wire   [5:0] add_ln491_fu_129_p2;
wire   [31:0] bitcast_ln491_fu_139_p1;
wire   [7:0] tmp_s_fu_142_p4;
wire   [22:0] trunc_ln491_fu_152_p1;
wire   [0:0] icmp_ln491_1_fu_162_p2;
wire   [0:0] icmp_ln491_fu_156_p2;
reg   [0:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_97_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln490_reg_207 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        UnifiedRetVal_reg_93 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_93 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_56 <= 2'd1;
    end else if (((1'd1 == and_ln491_fu_174_p2) & (icmp_ln490_reg_207 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_56 <= add_ln490_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln490_reg_207 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        b_num_load_reg_216 <= b_num_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_33_reg_202 <= i_fu_56;
        icmp_ln490_reg_207 <= icmp_ln490_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln490_reg_207 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        or_ln491_reg_223 <= or_ln491_fu_168_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln490_reg_207 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_97_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_97_p4 = UnifiedRetVal_reg_93;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_97_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_num_ce0 = 1'b1;
    end else begin
        b_num_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln490_reg_207 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        b_num_load_11_out_ap_vld = 1'b1;
    end else begin
        b_num_load_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln490_reg_207 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        or_ln491_out_ap_vld = 1'b1;
    end else begin
        or_ln491_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'd1 == and_ln491_fu_174_p2) & (icmp_ln490_reg_207 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln490_reg_207 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln490_fu_180_p2 = (i_33_reg_202 + 2'd1);

assign add_ln491_fu_129_p2 = (sub_ln535 + zext_ln491_fu_125_p1);

assign and_ln491_fu_174_p2 = (or_ln491_fu_168_p2 & grp_fu_4230_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign b_num_address0 = zext_ln491_1_fu_134_p1;

assign b_num_load_11_out = b_num_load_reg_216;

assign bitcast_ln491_fu_139_p1 = b_num_load_reg_216;

assign grp_fu_4230_p_ce = 1'b1;

assign grp_fu_4230_p_din0 = b_num_q0;

assign grp_fu_4230_p_din1 = 32'd0;

assign grp_fu_4230_p_opcode = 5'd1;

assign icmp_ln490_fu_119_p2 = ((i_fu_56 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln491_1_fu_162_p2 = ((trunc_ln491_fu_152_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln491_fu_156_p2 = ((tmp_s_fu_142_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln491_fu_168_p2 = (icmp_ln491_fu_156_p2 | icmp_ln491_1_fu_162_p2);

assign or_ln491_out = or_ln491_reg_223;

assign tmp_s_fu_142_p4 = {{bitcast_ln491_fu_139_p1[30:23]}};

assign trunc_ln491_fu_152_p1 = bitcast_ln491_fu_139_p1[22:0];

assign zext_ln491_1_fu_134_p1 = add_ln491_fu_129_p2;

assign zext_ln491_fu_125_p1 = i_fu_56;

endmodule //main_main_Pipeline_VITIS_LOOP_490_1
