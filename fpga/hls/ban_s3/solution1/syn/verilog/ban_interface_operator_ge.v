// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_operator_ge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        p_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] n;
input  [127:0] p_read;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln27_fu_134_p2;
reg   [0:0] icmp_ln27_reg_738;
wire   [31:0] bitcast_ln27_fu_150_p1;
wire   [0:0] or_ln27_5_fu_208_p2;
reg   [0:0] or_ln27_5_reg_754;
wire   [0:0] or_ln27_6_fu_226_p2;
reg   [0:0] or_ln27_6_reg_760;
reg   [0:0] pl_reg_767;
wire   [0:0] icmp_ln246_fu_240_p2;
reg   [0:0] icmp_ln246_reg_773;
wire   [31:0] bitcast_ln27_5_fu_256_p1;
wire   [0:0] or_ln27_7_fu_294_p2;
reg   [0:0] or_ln27_7_reg_785;
wire   [31:0] bitcast_ln27_6_fu_310_p1;
wire   [0:0] or_ln27_8_fu_348_p2;
reg   [0:0] or_ln27_8_reg_797;
wire   [31:0] trunc_ln27_fu_130_p1;
wire   [31:0] trunc_ln27_6_fu_140_p4;
wire   [31:0] bitcast_ln27_7_fu_178_p1;
wire   [7:0] tmp_s_fu_158_p4;
wire   [22:0] trunc_ln27_s_fu_168_p4;
wire   [0:0] icmp_ln27_12_fu_202_p2;
wire   [0:0] icmp_ln27_11_fu_196_p2;
wire   [7:0] tmp_7_fu_182_p4;
wire   [22:0] trunc_ln27_1_fu_192_p1;
wire   [0:0] icmp_ln27_14_fu_220_p2;
wire   [0:0] icmp_ln27_13_fu_214_p2;
wire   [31:0] trunc_ln27_7_fu_246_p4;
wire   [7:0] tmp_1_fu_262_p4;
wire   [22:0] trunc_ln27_2_fu_272_p4;
wire   [0:0] icmp_ln27_16_fu_288_p2;
wire   [0:0] icmp_ln27_15_fu_282_p2;
wire   [31:0] trunc_ln27_8_fu_300_p4;
wire   [7:0] tmp_3_fu_316_p4;
wire   [22:0] trunc_ln27_3_fu_326_p4;
wire   [0:0] icmp_ln27_18_fu_342_p2;
wire   [0:0] icmp_ln27_17_fu_336_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln27_fu_354_p2;
wire   [0:0] grp_fu_78_p2;
wire   [0:0] and_ln27_6_fu_358_p2;
wire   [0:0] xor_ln27_fu_364_p2;
wire   [0:0] grp_fu_83_p2;
wire   [0:0] and_ln246_1_fu_375_p2;
wire   [0:0] xor_ln246_1_fu_380_p2;
wire   [0:0] grp_fu_88_p2;
wire   [0:0] and_ln27_7_fu_391_p2;
wire   [0:0] grp_fu_93_p2;
wire   [0:0] grp_fu_98_p2;
wire   [0:0] and_ln246_2_fu_407_p2;
wire   [0:0] grp_fu_104_p2;
wire   [0:0] and_ln246_3_fu_418_p2;
wire   [0:0] xor_ln246_3_fu_423_p2;
wire   [0:0] or_ln246_1_fu_429_p2;
wire   [0:0] xor_ln246_2_fu_412_p2;
wire   [0:0] and_ln246_4_fu_441_p2;
wire   [0:0] or_ln246_3_fu_447_p2;
wire   [0:0] grp_fu_110_p2;
wire   [0:0] grp_fu_115_p2;
wire   [0:0] grp_fu_120_p2;
wire   [0:0] xor_ln27_2_fu_474_p2;
wire   [0:0] and_ln27_9_fu_479_p2;
wire   [0:0] and_ln27_8_fu_402_p2;
wire   [0:0] and_ln27_10_fu_485_p2;
wire   [0:0] xor_ln246_fu_497_p2;
wire   [0:0] or_ln27_fu_370_p2;
wire   [0:0] and_ln246_8_fu_502_p2;
wire   [0:0] and_ln246_7_fu_469_p2;
wire   [0:0] and_ln246_9_fu_508_p2;
wire   [0:0] or_ln246_4_fu_514_p2;
wire   [0:0] and_ln27_11_fu_491_p2;
wire   [0:0] or_ln246_fu_386_p2;
wire   [0:0] and_ln246_10_fu_526_p2;
wire   [0:0] and_ln242_fu_532_p2;
wire   [0:0] or_ln246_2_fu_453_p2;
wire   [0:0] and_ln246_11_fu_537_p2;
wire   [0:0] or_ln246_5_fu_520_p2;
wire   [0:0] xor_ln27_1_fu_396_p2;
wire   [0:0] xor_ln27_3_fu_551_p2;
wire   [0:0] or_ln27_9_fu_557_p2;
wire   [0:0] xor_ln242_fu_569_p2;
wire   [0:0] and_ln27_12_fu_563_p2;
wire   [0:0] and_ln242_1_fu_574_p2;
wire   [0:0] or_ln242_fu_580_p2;
wire   [0:0] and_ln242_2_fu_586_p2;
wire   [0:0] select_ln246_fu_543_p3;
wire   [0:0] xor_ln242_1_fu_591_p2;
wire   [0:0] and_ln246_12_fu_609_p2;
wire   [0:0] and_ln246_fu_435_p2;
wire   [0:0] and_ln242_4_fu_603_p2;
wire   [0:0] and_ln246_13_fu_615_p2;
wire   [0:0] and_ln246_5_fu_458_p2;
wire   [0:0] or_ln246_6_fu_621_p2;
wire   [0:0] and_ln246_14_fu_627_p2;
wire   [0:0] and_ln242_3_fu_597_p2;
wire   [0:0] grp_fu_125_p2;
wire   [0:0] and_ln246_15_fu_639_p2;
wire   [0:0] xor_ln246_4_fu_645_p2;
wire   [0:0] or_ln246_7_fu_633_p2;
wire   [0:0] or_ln246_8_fu_651_p2;
wire   [0:0] xor_ln246_5_fu_663_p2;
wire   [0:0] and_ln246_6_fu_464_p2;
wire   [0:0] and_ln246_18_fu_675_p2;
wire   [0:0] and_ln246_17_fu_669_p2;
wire   [0:0] and_ln246_19_fu_681_p2;
wire   [0:0] and_ln246_16_fu_657_p2;
wire   [0:0] xor_ln246_6_fu_693_p2;
wire   [0:0] and_ln246_21_fu_705_p2;
wire   [0:0] and_ln246_20_fu_699_p2;
wire   [0:0] and_ln246_22_fu_711_p2;
wire   [0:0] or_ln246_9_fu_687_p2;
wire   [0:0] xor_ln246_7_fu_717_p2;
wire   [0:0] and_ln246_23_fu_723_p2;
reg   [0:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 1'd0;
end

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln27_fu_150_p1),
    .din1(n),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_78_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln27_fu_150_p1),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_83_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln27_5_fu_256_p1),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_88_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln27_6_fu_310_p1),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_93_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(n),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_98_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(n),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_104_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln27_fu_150_p1),
    .din1(n),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_110_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln27_5_fu_256_p1),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_115_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln27_6_fu_310_p1),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_120_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln27_fu_150_p1),
    .din1(n),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_125_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= and_ln246_23_fu_723_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln246_reg_773 <= icmp_ln246_fu_240_p2;
        icmp_ln27_reg_738 <= icmp_ln27_fu_134_p2;
        or_ln27_5_reg_754 <= or_ln27_5_fu_208_p2;
        or_ln27_6_reg_760 <= or_ln27_6_fu_226_p2;
        or_ln27_7_reg_785 <= or_ln27_7_fu_294_p2;
        or_ln27_8_reg_797 <= or_ln27_8_fu_348_p2;
        pl_reg_767 <= p_read[32'd31];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = and_ln246_23_fu_723_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln242_1_fu_574_p2 = (xor_ln242_fu_569_p2 & and_ln246_10_fu_526_p2);

assign and_ln242_2_fu_586_p2 = (or_ln242_fu_580_p2 & icmp_ln27_reg_738);

assign and_ln242_3_fu_597_p2 = (xor_ln242_1_fu_591_p2 & select_ln246_fu_543_p3);

assign and_ln242_4_fu_603_p2 = (xor_ln27_2_fu_474_p2 & or_ln242_fu_580_p2);

assign and_ln242_fu_532_p2 = (pl_reg_767 & and_ln246_10_fu_526_p2);

assign and_ln246_10_fu_526_p2 = (or_ln27_fu_370_p2 & or_ln246_fu_386_p2);

assign and_ln246_11_fu_537_p2 = (or_ln246_2_fu_453_p2 & and_ln242_fu_532_p2);

assign and_ln246_12_fu_609_p2 = (xor_ln27_2_fu_474_p2 & and_ln242_fu_532_p2);

assign and_ln246_13_fu_615_p2 = (and_ln246_fu_435_p2 & and_ln246_12_fu_609_p2);

assign and_ln246_14_fu_627_p2 = (or_ln246_6_fu_621_p2 & and_ln246_5_fu_458_p2);

assign and_ln246_15_fu_639_p2 = (grp_fu_125_p2 & and_ln27_fu_354_p2);

assign and_ln246_16_fu_657_p2 = (or_ln246_8_fu_651_p2 & or_ln246_7_fu_633_p2);

assign and_ln246_17_fu_669_p2 = (xor_ln246_5_fu_663_p2 & and_ln27_6_fu_358_p2);

assign and_ln246_18_fu_675_p2 = (or_ln246_6_fu_621_p2 & and_ln246_6_fu_464_p2);

assign and_ln246_19_fu_681_p2 = (and_ln246_18_fu_675_p2 & and_ln246_17_fu_669_p2);

assign and_ln246_1_fu_375_p2 = (or_ln27_5_reg_754 & grp_fu_83_p2);

assign and_ln246_20_fu_699_p2 = (xor_ln246_6_fu_693_p2 & and_ln246_17_fu_669_p2);

assign and_ln246_21_fu_705_p2 = (xor_ln27_1_fu_396_p2 & or_ln246_6_fu_621_p2);

assign and_ln246_22_fu_711_p2 = (and_ln246_21_fu_705_p2 & and_ln246_20_fu_699_p2);

assign and_ln246_23_fu_723_p2 = (xor_ln246_7_fu_717_p2 & or_ln246_9_fu_687_p2);

assign and_ln246_2_fu_407_p2 = (or_ln27_6_reg_760 & grp_fu_98_p2);

assign and_ln246_3_fu_418_p2 = (or_ln27_6_reg_760 & grp_fu_104_p2);

assign and_ln246_4_fu_441_p2 = (and_ln246_3_fu_418_p2 & and_ln246_1_fu_375_p2);

assign and_ln246_5_fu_458_p2 = (grp_fu_110_p2 & and_ln27_fu_354_p2);

assign and_ln246_6_fu_464_p2 = (or_ln27_7_reg_785 & grp_fu_115_p2);

assign and_ln246_7_fu_469_p2 = (or_ln27_8_reg_797 & grp_fu_120_p2);

assign and_ln246_8_fu_502_p2 = (xor_ln246_fu_497_p2 & and_ln246_1_fu_375_p2);

assign and_ln246_9_fu_508_p2 = (or_ln27_fu_370_p2 & and_ln246_8_fu_502_p2);

assign and_ln246_fu_435_p2 = (xor_ln246_2_fu_412_p2 & or_ln246_1_fu_429_p2);

assign and_ln27_10_fu_485_p2 = (and_ln27_9_fu_479_p2 & and_ln27_7_fu_391_p2);

assign and_ln27_11_fu_491_p2 = (and_ln27_8_fu_402_p2 & and_ln27_10_fu_485_p2);

assign and_ln27_12_fu_563_p2 = (or_ln27_9_fu_557_p2 & and_ln27_9_fu_479_p2);

assign and_ln27_6_fu_358_p2 = (grp_fu_78_p2 & and_ln27_fu_354_p2);

assign and_ln27_7_fu_391_p2 = (or_ln27_7_reg_785 & grp_fu_88_p2);

assign and_ln27_8_fu_402_p2 = (or_ln27_8_reg_797 & grp_fu_93_p2);

assign and_ln27_9_fu_479_p2 = (xor_ln27_2_fu_474_p2 & and_ln27_6_fu_358_p2);

assign and_ln27_fu_354_p2 = (or_ln27_6_reg_760 & or_ln27_5_reg_754);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign bitcast_ln27_5_fu_256_p1 = trunc_ln27_7_fu_246_p4;

assign bitcast_ln27_6_fu_310_p1 = trunc_ln27_8_fu_300_p4;

assign bitcast_ln27_7_fu_178_p1 = n;

assign bitcast_ln27_fu_150_p1 = trunc_ln27_6_fu_140_p4;

assign icmp_ln246_fu_240_p2 = (($signed(trunc_ln27_fu_130_p1) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign icmp_ln27_11_fu_196_p2 = ((tmp_s_fu_158_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_12_fu_202_p2 = ((trunc_ln27_s_fu_168_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_13_fu_214_p2 = ((tmp_7_fu_182_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_14_fu_220_p2 = ((trunc_ln27_1_fu_192_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_15_fu_282_p2 = ((tmp_1_fu_262_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_16_fu_288_p2 = ((trunc_ln27_2_fu_272_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_17_fu_336_p2 = ((tmp_3_fu_316_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_18_fu_342_p2 = ((trunc_ln27_3_fu_326_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_134_p2 = ((trunc_ln27_fu_130_p1 != 32'd0) ? 1'b1 : 1'b0);

assign or_ln242_fu_580_p2 = (and_ln27_12_fu_563_p2 | and_ln242_1_fu_574_p2);

assign or_ln246_1_fu_429_p2 = (xor_ln246_3_fu_423_p2 | xor_ln246_1_fu_380_p2);

assign or_ln246_2_fu_453_p2 = (or_ln246_3_fu_447_p2 | icmp_ln27_reg_738);

assign or_ln246_3_fu_447_p2 = (and_ln246_4_fu_441_p2 | and_ln246_2_fu_407_p2);

assign or_ln246_4_fu_514_p2 = (and_ln246_9_fu_508_p2 | and_ln246_7_fu_469_p2);

assign or_ln246_5_fu_520_p2 = (or_ln246_4_fu_514_p2 | and_ln27_11_fu_491_p2);

assign or_ln246_6_fu_621_p2 = (and_ln246_13_fu_615_p2 | and_ln242_4_fu_603_p2);

assign or_ln246_7_fu_633_p2 = (and_ln246_14_fu_627_p2 | and_ln242_3_fu_597_p2);

assign or_ln246_8_fu_651_p2 = (xor_ln246_4_fu_645_p2 | and_ln246_15_fu_639_p2);

assign or_ln246_9_fu_687_p2 = (and_ln246_19_fu_681_p2 | and_ln246_16_fu_657_p2);

assign or_ln246_fu_386_p2 = (xor_ln246_1_fu_380_p2 | icmp_ln246_reg_773);

assign or_ln27_5_fu_208_p2 = (icmp_ln27_12_fu_202_p2 | icmp_ln27_11_fu_196_p2);

assign or_ln27_6_fu_226_p2 = (icmp_ln27_14_fu_220_p2 | icmp_ln27_13_fu_214_p2);

assign or_ln27_7_fu_294_p2 = (icmp_ln27_16_fu_288_p2 | icmp_ln27_15_fu_282_p2);

assign or_ln27_8_fu_348_p2 = (icmp_ln27_18_fu_342_p2 | icmp_ln27_17_fu_336_p2);

assign or_ln27_9_fu_557_p2 = (xor_ln27_3_fu_551_p2 | xor_ln27_1_fu_396_p2);

assign or_ln27_fu_370_p2 = (xor_ln27_fu_364_p2 | icmp_ln27_reg_738);

assign select_ln246_fu_543_p3 = ((and_ln246_11_fu_537_p2[0:0] == 1'b1) ? or_ln246_3_fu_447_p2 : or_ln246_5_fu_520_p2);

assign tmp_1_fu_262_p4 = {{p_read[94:87]}};

assign tmp_3_fu_316_p4 = {{p_read[126:119]}};

assign tmp_7_fu_182_p4 = {{bitcast_ln27_7_fu_178_p1[30:23]}};

assign tmp_s_fu_158_p4 = {{p_read[62:55]}};

assign trunc_ln27_1_fu_192_p1 = bitcast_ln27_7_fu_178_p1[22:0];

assign trunc_ln27_2_fu_272_p4 = {{p_read[86:64]}};

assign trunc_ln27_3_fu_326_p4 = {{p_read[118:96]}};

assign trunc_ln27_6_fu_140_p4 = {{p_read[63:32]}};

assign trunc_ln27_7_fu_246_p4 = {{p_read[95:64]}};

assign trunc_ln27_8_fu_300_p4 = {{p_read[127:96]}};

assign trunc_ln27_fu_130_p1 = p_read[31:0];

assign trunc_ln27_s_fu_168_p4 = {{p_read[54:32]}};

assign xor_ln242_1_fu_591_p2 = (1'd1 ^ and_ln242_2_fu_586_p2);

assign xor_ln242_fu_569_p2 = (pl_reg_767 ^ 1'd1);

assign xor_ln246_1_fu_380_p2 = (1'd1 ^ and_ln246_1_fu_375_p2);

assign xor_ln246_2_fu_412_p2 = (1'd1 ^ and_ln246_2_fu_407_p2);

assign xor_ln246_3_fu_423_p2 = (1'd1 ^ and_ln246_3_fu_418_p2);

assign xor_ln246_4_fu_645_p2 = (or_ln246_6_fu_621_p2 ^ 1'd1);

assign xor_ln246_5_fu_663_p2 = (1'd1 ^ and_ln246_5_fu_458_p2);

assign xor_ln246_6_fu_693_p2 = (1'd1 ^ and_ln246_6_fu_464_p2);

assign xor_ln246_7_fu_717_p2 = (1'd1 ^ and_ln246_22_fu_711_p2);

assign xor_ln246_fu_497_p2 = (icmp_ln246_reg_773 ^ 1'd1);

assign xor_ln27_1_fu_396_p2 = (1'd1 ^ and_ln27_7_fu_391_p2);

assign xor_ln27_2_fu_474_p2 = (icmp_ln27_reg_738 ^ 1'd1);

assign xor_ln27_3_fu_551_p2 = (1'd1 ^ and_ln27_8_fu_402_p2);

assign xor_ln27_fu_364_p2 = (1'd1 ^ and_ln27_6_fu_358_p2);

endmodule //ban_interface_operator_ge
