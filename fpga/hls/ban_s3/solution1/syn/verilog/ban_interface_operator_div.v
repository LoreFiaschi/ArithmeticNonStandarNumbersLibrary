// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_operator_div (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        p_read14,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        grp_fu_928_p_din0,
        grp_fu_928_p_din1,
        grp_fu_928_p_opcode,
        grp_fu_928_p_dout0,
        grp_fu_928_p_ce,
        grp_fu_932_p_din0,
        grp_fu_932_p_din1,
        grp_fu_932_p_opcode,
        grp_fu_932_p_dout0,
        grp_fu_932_p_ce,
        grp_fu_936_p_din0,
        grp_fu_936_p_din1,
        grp_fu_936_p_opcode,
        grp_fu_936_p_dout0,
        grp_fu_936_p_ce,
        grp_fu_940_p_din0,
        grp_fu_940_p_din1,
        grp_fu_940_p_dout0,
        grp_fu_940_p_ce,
        grp_fu_945_p_din0,
        grp_fu_945_p_din1,
        grp_fu_945_p_dout0,
        grp_fu_945_p_ce,
        grp_fu_950_p_din0,
        grp_fu_950_p_din1,
        grp_fu_950_p_dout0,
        grp_fu_950_p_ce,
        grp_fu_958_p_din0,
        grp_fu_958_p_din1,
        grp_fu_958_p_dout0,
        grp_fu_958_p_ce,
        grp_fu_963_p_din0,
        grp_fu_963_p_din1,
        grp_fu_963_p_dout0,
        grp_fu_963_p_ce,
        grp_fu_967_p_din0,
        grp_fu_967_p_din1,
        grp_fu_967_p_dout0,
        grp_fu_967_p_ce,
        grp_fu_971_p_din0,
        grp_fu_971_p_din1,
        grp_fu_971_p_dout0,
        grp_fu_971_p_ce,
        grp_fu_976_p_din0,
        grp_fu_976_p_din1,
        grp_fu_976_p_dout0,
        grp_fu_976_p_ce
);

parameter    ap_ST_fsm_state1 = 60'd1;
parameter    ap_ST_fsm_state2 = 60'd2;
parameter    ap_ST_fsm_state3 = 60'd4;
parameter    ap_ST_fsm_state4 = 60'd8;
parameter    ap_ST_fsm_state5 = 60'd16;
parameter    ap_ST_fsm_state6 = 60'd32;
parameter    ap_ST_fsm_state7 = 60'd64;
parameter    ap_ST_fsm_state8 = 60'd128;
parameter    ap_ST_fsm_state9 = 60'd256;
parameter    ap_ST_fsm_state10 = 60'd512;
parameter    ap_ST_fsm_state11 = 60'd1024;
parameter    ap_ST_fsm_state12 = 60'd2048;
parameter    ap_ST_fsm_state13 = 60'd4096;
parameter    ap_ST_fsm_state14 = 60'd8192;
parameter    ap_ST_fsm_state15 = 60'd16384;
parameter    ap_ST_fsm_state16 = 60'd32768;
parameter    ap_ST_fsm_state17 = 60'd65536;
parameter    ap_ST_fsm_state18 = 60'd131072;
parameter    ap_ST_fsm_state19 = 60'd262144;
parameter    ap_ST_fsm_state20 = 60'd524288;
parameter    ap_ST_fsm_state21 = 60'd1048576;
parameter    ap_ST_fsm_state22 = 60'd2097152;
parameter    ap_ST_fsm_state23 = 60'd4194304;
parameter    ap_ST_fsm_state24 = 60'd8388608;
parameter    ap_ST_fsm_state25 = 60'd16777216;
parameter    ap_ST_fsm_state26 = 60'd33554432;
parameter    ap_ST_fsm_state27 = 60'd67108864;
parameter    ap_ST_fsm_state28 = 60'd134217728;
parameter    ap_ST_fsm_state29 = 60'd268435456;
parameter    ap_ST_fsm_state30 = 60'd536870912;
parameter    ap_ST_fsm_state31 = 60'd1073741824;
parameter    ap_ST_fsm_state32 = 60'd2147483648;
parameter    ap_ST_fsm_state33 = 60'd4294967296;
parameter    ap_ST_fsm_state34 = 60'd8589934592;
parameter    ap_ST_fsm_state35 = 60'd17179869184;
parameter    ap_ST_fsm_state36 = 60'd34359738368;
parameter    ap_ST_fsm_state37 = 60'd68719476736;
parameter    ap_ST_fsm_state38 = 60'd137438953472;
parameter    ap_ST_fsm_state39 = 60'd274877906944;
parameter    ap_ST_fsm_state40 = 60'd549755813888;
parameter    ap_ST_fsm_state41 = 60'd1099511627776;
parameter    ap_ST_fsm_state42 = 60'd2199023255552;
parameter    ap_ST_fsm_state43 = 60'd4398046511104;
parameter    ap_ST_fsm_state44 = 60'd8796093022208;
parameter    ap_ST_fsm_state45 = 60'd17592186044416;
parameter    ap_ST_fsm_state46 = 60'd35184372088832;
parameter    ap_ST_fsm_state47 = 60'd70368744177664;
parameter    ap_ST_fsm_state48 = 60'd140737488355328;
parameter    ap_ST_fsm_state49 = 60'd281474976710656;
parameter    ap_ST_fsm_state50 = 60'd562949953421312;
parameter    ap_ST_fsm_state51 = 60'd1125899906842624;
parameter    ap_ST_fsm_state52 = 60'd2251799813685248;
parameter    ap_ST_fsm_state53 = 60'd4503599627370496;
parameter    ap_ST_fsm_state54 = 60'd9007199254740992;
parameter    ap_ST_fsm_state55 = 60'd18014398509481984;
parameter    ap_ST_fsm_state56 = 60'd36028797018963968;
parameter    ap_ST_fsm_state57 = 60'd72057594037927936;
parameter    ap_ST_fsm_state58 = 60'd144115188075855872;
parameter    ap_ST_fsm_state59 = 60'd288230376151711744;
parameter    ap_ST_fsm_state60 = 60'd576460752303423488;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] n;
input  [127:0] p_read14;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] grp_fu_928_p_din0;
output  [31:0] grp_fu_928_p_din1;
output  [1:0] grp_fu_928_p_opcode;
input  [31:0] grp_fu_928_p_dout0;
output   grp_fu_928_p_ce;
output  [31:0] grp_fu_932_p_din0;
output  [31:0] grp_fu_932_p_din1;
output  [1:0] grp_fu_932_p_opcode;
input  [31:0] grp_fu_932_p_dout0;
output   grp_fu_932_p_ce;
output  [31:0] grp_fu_936_p_din0;
output  [31:0] grp_fu_936_p_din1;
output  [1:0] grp_fu_936_p_opcode;
input  [31:0] grp_fu_936_p_dout0;
output   grp_fu_936_p_ce;
output  [31:0] grp_fu_940_p_din0;
output  [31:0] grp_fu_940_p_din1;
input  [31:0] grp_fu_940_p_dout0;
output   grp_fu_940_p_ce;
output  [31:0] grp_fu_945_p_din0;
output  [31:0] grp_fu_945_p_din1;
input  [31:0] grp_fu_945_p_dout0;
output   grp_fu_945_p_ce;
output  [31:0] grp_fu_950_p_din0;
output  [31:0] grp_fu_950_p_din1;
input  [31:0] grp_fu_950_p_dout0;
output   grp_fu_950_p_ce;
output  [31:0] grp_fu_958_p_din0;
output  [31:0] grp_fu_958_p_din1;
input  [31:0] grp_fu_958_p_dout0;
output   grp_fu_958_p_ce;
output  [31:0] grp_fu_963_p_din0;
output  [31:0] grp_fu_963_p_din1;
input  [31:0] grp_fu_963_p_dout0;
output   grp_fu_963_p_ce;
output  [31:0] grp_fu_967_p_din0;
output  [31:0] grp_fu_967_p_din1;
input  [31:0] grp_fu_967_p_dout0;
output   grp_fu_967_p_ce;
output  [31:0] grp_fu_971_p_din0;
output  [31:0] grp_fu_971_p_din1;
input  [31:0] grp_fu_971_p_dout0;
output   grp_fu_971_p_ce;
output  [31:0] grp_fu_976_p_din0;
output  [31:0] grp_fu_976_p_din1;
input  [31:0] grp_fu_976_p_dout0;
output   grp_fu_976_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [59:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_171;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state56;
reg   [31:0] reg_182;
wire    ap_CS_fsm_state57;
reg   [31:0] reg_192;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state36;
reg   [31:0] reg_203;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state48;
reg   [31:0] reg_212;
wire    ap_CS_fsm_state29;
reg   [31:0] reg_218;
wire    ap_CS_fsm_state25;
reg   [31:0] reg_224;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state40;
reg   [31:0] reg_232;
reg   [31:0] reg_237;
reg   [31:0] reg_243;
reg   [31:0] reg_251;
reg   [31:0] reg_258;
wire   [0:0] and_ln27_fu_299_p2;
reg   [0:0] and_ln27_reg_564;
wire    ap_CS_fsm_state2;
wire   [31:0] trunc_ln172_fu_305_p1;
reg   [31:0] trunc_ln172_reg_568;
wire   [31:0] normalizer_fu_319_p1;
reg   [31:0] normalizer_reg_575;
wire   [31:0] xor_ln143_fu_333_p2;
reg   [31:0] xor_ln143_reg_581;
wire   [31:0] xor_ln144_fu_349_p2;
reg   [31:0] xor_ln144_reg_586;
wire   [31:0] bitcast_ln143_fu_355_p1;
wire    ap_CS_fsm_state3;
wire   [31:0] bitcast_ln144_fu_359_p1;
reg   [31:0] mul15_i3_i_reg_601;
reg   [31:0] add_i_reg_606;
reg   [31:0] mul12_i2_i_reg_611;
reg   [31:0] mul15_i4_i_reg_616;
reg   [31:0] mul19_i4_i_reg_621;
reg   [31:0] c_num_1_reg_626;
wire   [31:0] c_p_fu_363_p2;
wire    ap_CS_fsm_state58;
wire   [0:0] and_ln32_fu_404_p2;
reg   [0:0] and_ln32_reg_640;
wire   [0:0] and_ln35_fu_445_p2;
reg   [0:0] and_ln35_reg_644;
wire    ap_CS_fsm_state59;
wire   [31:0] c_p_3_fu_451_p2;
reg   [31:0] ap_phi_mux_agg_result_0_0_phi_fu_60_p8;
reg   [31:0] agg_result_0_0_reg_56;
wire   [31:0] select_ln43_fu_503_p3;
wire    ap_CS_fsm_state60;
reg   [31:0] ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8;
reg   [31:0] agg_result_1_0_0_reg_71;
wire   [31:0] select_ln43_1_fu_512_p3;
reg   [31:0] ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8;
reg   [31:0] agg_result_1_1_0_reg_86;
reg   [31:0] ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8;
reg   [31:0] agg_result_1_2_0_reg_101;
wire   [31:0] select_ln43_2_fu_521_p3;
reg   [31:0] grp_fu_117_p0;
reg   [31:0] grp_fu_117_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state45;
reg   [31:0] grp_fu_122_p0;
reg   [31:0] grp_fu_122_p1;
reg   [31:0] grp_fu_126_p1;
reg   [31:0] grp_fu_130_p0;
reg   [31:0] grp_fu_130_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state27;
reg   [31:0] grp_fu_135_p0;
reg   [31:0] grp_fu_135_p1;
reg   [31:0] grp_fu_139_p0;
reg   [31:0] grp_fu_157_p0;
wire    ap_CS_fsm_state49;
reg   [31:0] grp_fu_161_p0;
reg   [31:0] grp_fu_165_p0;
wire   [31:0] bitcast_ln27_fu_264_p1;
wire   [7:0] tmp_fu_267_p4;
wire   [22:0] trunc_ln27_fu_277_p1;
wire   [0:0] icmp_ln27_21_fu_287_p2;
wire   [0:0] icmp_ln27_fu_281_p2;
wire   [0:0] or_ln27_fu_293_p2;
wire   [0:0] grp_fu_165_p2;
wire   [31:0] trunc_ln_fu_309_p4;
wire   [31:0] trunc_ln1_fu_323_p4;
wire   [31:0] trunc_ln2_fu_339_p4;
wire   [31:0] bitcast_ln32_fu_368_p1;
wire   [7:0] tmp_24_fu_372_p4;
wire   [22:0] trunc_ln32_fu_382_p1;
wire   [0:0] icmp_ln32_1_fu_392_p2;
wire   [0:0] icmp_ln32_fu_386_p2;
wire   [0:0] or_ln32_fu_398_p2;
wire   [31:0] bitcast_ln35_fu_410_p1;
wire   [7:0] tmp_26_fu_413_p4;
wire   [22:0] trunc_ln35_fu_423_p1;
wire   [0:0] icmp_ln35_1_fu_433_p2;
wire   [0:0] icmp_ln35_fu_427_p2;
wire   [0:0] or_ln35_fu_439_p2;
wire   [31:0] bitcast_ln43_fu_456_p1;
wire   [7:0] tmp_28_fu_460_p4;
wire   [22:0] trunc_ln43_fu_470_p1;
wire   [0:0] icmp_ln43_1_fu_480_p2;
wire   [0:0] icmp_ln43_fu_474_p2;
wire   [0:0] or_ln43_fu_486_p2;
wire   [0:0] and_ln43_fu_492_p2;
wire   [31:0] c_p_2_fu_498_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [59:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 60'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_165_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_165_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_return_0_preg <= ap_phi_mux_agg_result_0_0_phi_fu_60_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_return_1_preg <= ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_return_2_preg <= ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_return_3_preg <= ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln35_reg_644) & (1'd1 == and_ln32_reg_640) & (1'd0 == and_ln27_reg_564) & (1'b1 == ap_CS_fsm_state60))) begin
        agg_result_0_0_reg_56 <= select_ln43_fu_503_p3;
    end else if (((1'd0 == and_ln35_fu_445_p2) & (1'b1 == ap_CS_fsm_state59))) begin
        agg_result_0_0_reg_56 <= c_p_3_fu_451_p2;
    end else if (((1'd0 == and_ln32_fu_404_p2) & (1'b1 == ap_CS_fsm_state58))) begin
        agg_result_0_0_reg_56 <= c_p_fu_363_p2;
    end else if (((1'd1 == and_ln27_fu_299_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_0_0_reg_56 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln35_reg_644) & (1'd1 == and_ln32_reg_640) & (1'd0 == and_ln27_reg_564) & (1'b1 == ap_CS_fsm_state60))) begin
        agg_result_1_0_0_reg_71 <= select_ln43_1_fu_512_p3;
    end else if (((1'd0 == and_ln35_fu_445_p2) & (1'b1 == ap_CS_fsm_state59))) begin
        agg_result_1_0_0_reg_71 <= c_num_1_reg_626;
    end else if (((1'd0 == and_ln32_fu_404_p2) & (1'b1 == ap_CS_fsm_state58))) begin
        agg_result_1_0_0_reg_71 <= reg_171;
    end else if (((1'd1 == and_ln27_fu_299_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_1_0_0_reg_71 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln35_fu_445_p2) & (1'b1 == ap_CS_fsm_state59))) begin
        agg_result_1_1_0_reg_86 <= reg_182;
    end else if ((((1'd1 == and_ln35_reg_644) & (1'd1 == and_ln32_reg_640) & (1'd0 == and_ln27_reg_564) & (1'b1 == ap_CS_fsm_state60)) | ((1'd0 == and_ln32_fu_404_p2) & (1'b1 == ap_CS_fsm_state58)))) begin
        agg_result_1_1_0_reg_86 <= c_num_1_reg_626;
    end else if (((1'd1 == and_ln27_fu_299_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_1_1_0_reg_86 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln35_reg_644) & (1'd1 == and_ln32_reg_640) & (1'd0 == and_ln27_reg_564) & (1'b1 == ap_CS_fsm_state60))) begin
        agg_result_1_2_0_reg_101 <= select_ln43_2_fu_521_p3;
    end else if (((1'd0 == and_ln32_fu_404_p2) & (1'b1 == ap_CS_fsm_state58))) begin
        agg_result_1_2_0_reg_101 <= reg_182;
    end else if ((((1'd1 == and_ln27_fu_299_p2) & (1'b1 == ap_CS_fsm_state2)) | ((1'd0 == and_ln35_fu_445_p2) & (1'b1 == ap_CS_fsm_state59)))) begin
        agg_result_1_2_0_reg_101 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        add_i_reg_606 <= grp_fu_928_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln27_reg_564 <= and_ln27_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        and_ln32_reg_640 <= and_ln32_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        and_ln35_reg_644 <= and_ln35_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        c_num_1_reg_626 <= grp_fu_971_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        mul12_i2_i_reg_611 <= grp_fu_958_p_dout0;
        mul15_i4_i_reg_616 <= grp_fu_963_p_dout0;
        mul19_i4_i_reg_621 <= grp_fu_967_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        mul15_i3_i_reg_601 <= grp_fu_945_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln27_fu_299_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        normalizer_reg_575 <= normalizer_fu_319_p1;
        trunc_ln172_reg_568 <= trunc_ln172_fu_305_p1;
        xor_ln143_reg_581 <= xor_ln143_fu_333_p2;
        xor_ln144_reg_586 <= xor_ln144_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_171 <= grp_fu_971_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state57))) begin
        reg_182 <= grp_fu_976_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_192 <= grp_fu_940_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_203 <= grp_fu_928_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_212 <= grp_fu_945_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state29))) begin
        reg_218 <= grp_fu_940_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_224 <= grp_fu_928_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state36))) begin
        reg_232 <= grp_fu_928_p_dout0;
        reg_237 <= grp_fu_950_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_243 <= grp_fu_932_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_251 <= grp_fu_936_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state44))) begin
        reg_258 <= grp_fu_932_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln35_reg_644) & (1'd1 == and_ln32_reg_640) & (1'd0 == and_ln27_reg_564) & (1'b1 == ap_CS_fsm_state60))) begin
        ap_phi_mux_agg_result_0_0_phi_fu_60_p8 = select_ln43_fu_503_p3;
    end else begin
        ap_phi_mux_agg_result_0_0_phi_fu_60_p8 = agg_result_0_0_reg_56;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln35_reg_644) & (1'd1 == and_ln32_reg_640) & (1'd0 == and_ln27_reg_564) & (1'b1 == ap_CS_fsm_state60))) begin
        ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8 = select_ln43_1_fu_512_p3;
    end else begin
        ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8 = agg_result_1_0_0_reg_71;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln35_reg_644) & (1'd1 == and_ln32_reg_640) & (1'd0 == and_ln27_reg_564) & (1'b1 == ap_CS_fsm_state60))) begin
        ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8 = c_num_1_reg_626;
    end else begin
        ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8 = agg_result_1_1_0_reg_86;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln35_reg_644) & (1'd1 == and_ln32_reg_640) & (1'd0 == and_ln27_reg_564) & (1'b1 == ap_CS_fsm_state60))) begin
        ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8 = select_ln43_2_fu_521_p3;
    end else begin
        ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8 = agg_result_1_2_0_reg_101;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_return_0 = ap_phi_mux_agg_result_0_0_phi_fu_60_p8;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_return_1 = ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_return_2 = ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_return_3 = ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_117_p0 = reg_243;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_117_p0 = reg_258;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_117_p0 = reg_224;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_117_p0 = add_i_reg_606;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_117_p0 = reg_218;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state37))) begin
        grp_fu_117_p0 = reg_212;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_117_p0 = reg_203;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_117_p0 = reg_192;
    end else begin
        grp_fu_117_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_117_p1 = reg_203;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_117_p1 = mul19_i4_i_reg_621;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_117_p1 = reg_237;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_117_p1 = reg_243;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_117_p1 = n;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_117_p1 = mul15_i3_i_reg_601;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_117_p1 = reg_192;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_117_p1 = 32'd0;
    end else begin
        grp_fu_117_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_122_p0 = mul12_i2_i_reg_611;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_122_p0 = reg_203;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_122_p0 = reg_218;
    end else begin
        grp_fu_122_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_122_p1 = reg_224;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_122_p1 = mul15_i4_i_reg_616;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_122_p1 = reg_251;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_122_p1 = reg_212;
    end else begin
        grp_fu_122_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_126_p1 = reg_192;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_126_p1 = reg_237;
    end else begin
        grp_fu_126_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_fu_130_p0 = reg_192;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_130_p0 = reg_224;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_130_p0 = reg_203;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_130_p0 = n;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_130_p0 = reg_171;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_130_p0 = reg_182;
    end else begin
        grp_fu_130_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_130_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_130_p1 = n;
    end else begin
        grp_fu_130_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_135_p0 = reg_243;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_135_p0 = reg_192;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_135_p0 = reg_171;
    end else begin
        grp_fu_135_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_135_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_135_p1 = reg_171;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_135_p1 = reg_182;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_135_p1 = n;
    end else begin
        grp_fu_135_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_139_p0 = reg_192;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_139_p0 = reg_224;
    end else begin
        grp_fu_139_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_157_p0 = reg_258;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_157_p0 = reg_251;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_157_p0 = bitcast_ln143_fu_355_p1;
    end else begin
        grp_fu_157_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_161_p0 = reg_203;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_161_p0 = bitcast_ln144_fu_359_p1;
    end else begin
        grp_fu_161_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_165_p0 = reg_182;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_165_p0 = c_num_1_reg_626;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_165_p0 = reg_171;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_165_p0 = n;
    end else begin
        grp_fu_165_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'd1 == and_ln27_fu_299_p2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((1'd0 == and_ln32_fu_404_p2) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln27_fu_299_p2 = (or_ln27_fu_293_p2 & grp_fu_165_p2);

assign and_ln32_fu_404_p2 = (or_ln32_fu_398_p2 & grp_fu_165_p2);

assign and_ln35_fu_445_p2 = (or_ln35_fu_439_p2 & grp_fu_165_p2);

assign and_ln43_fu_492_p2 = (or_ln43_fu_486_p2 & grp_fu_165_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign bitcast_ln143_fu_355_p1 = xor_ln143_reg_581;

assign bitcast_ln144_fu_359_p1 = xor_ln144_reg_586;

assign bitcast_ln27_fu_264_p1 = n;

assign bitcast_ln32_fu_368_p1 = reg_171;

assign bitcast_ln35_fu_410_p1 = c_num_1_reg_626;

assign bitcast_ln43_fu_456_p1 = reg_182;

assign c_p_2_fu_498_p2 = ($signed(32'd4294967294) - $signed(trunc_ln172_reg_568));

assign c_p_3_fu_451_p2 = (trunc_ln172_reg_568 ^ 32'd4294967295);

assign c_p_fu_363_p2 = (32'd0 - trunc_ln172_reg_568);

assign grp_fu_928_p_ce = 1'b1;

assign grp_fu_928_p_din0 = grp_fu_117_p0;

assign grp_fu_928_p_din1 = grp_fu_117_p1;

assign grp_fu_928_p_opcode = 2'd0;

assign grp_fu_932_p_ce = 1'b1;

assign grp_fu_932_p_din0 = grp_fu_122_p0;

assign grp_fu_932_p_din1 = grp_fu_122_p1;

assign grp_fu_932_p_opcode = 2'd0;

assign grp_fu_936_p_ce = 1'b1;

assign grp_fu_936_p_din0 = reg_232;

assign grp_fu_936_p_din1 = grp_fu_126_p1;

assign grp_fu_936_p_opcode = 2'd0;

assign grp_fu_940_p_ce = 1'b1;

assign grp_fu_940_p_din0 = grp_fu_130_p0;

assign grp_fu_940_p_din1 = grp_fu_130_p1;

assign grp_fu_945_p_ce = 1'b1;

assign grp_fu_945_p_din0 = grp_fu_135_p0;

assign grp_fu_945_p_din1 = grp_fu_135_p1;

assign grp_fu_950_p_ce = 1'b1;

assign grp_fu_950_p_din0 = grp_fu_139_p0;

assign grp_fu_950_p_din1 = reg_171;

assign grp_fu_958_p_ce = 1'b1;

assign grp_fu_958_p_din0 = reg_251;

assign grp_fu_958_p_din1 = 32'd0;

assign grp_fu_963_p_ce = 1'b1;

assign grp_fu_963_p_din0 = reg_192;

assign grp_fu_963_p_din1 = reg_182;

assign grp_fu_967_p_ce = 1'b1;

assign grp_fu_967_p_din0 = reg_243;

assign grp_fu_967_p_din1 = reg_171;

assign grp_fu_971_p_ce = 1'b1;

assign grp_fu_971_p_din0 = grp_fu_157_p0;

assign grp_fu_971_p_din1 = normalizer_reg_575;

assign grp_fu_976_p_ce = 1'b1;

assign grp_fu_976_p_din0 = grp_fu_161_p0;

assign grp_fu_976_p_din1 = normalizer_reg_575;

assign icmp_ln27_21_fu_287_p2 = ((trunc_ln27_fu_277_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_281_p2 = ((tmp_fu_267_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_392_p2 = ((trunc_ln32_fu_382_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_386_p2 = ((tmp_24_fu_372_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_433_p2 = ((trunc_ln35_fu_423_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_427_p2 = ((tmp_26_fu_413_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_480_p2 = ((trunc_ln43_fu_470_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_474_p2 = ((tmp_28_fu_460_p4 != 8'd255) ? 1'b1 : 1'b0);

assign normalizer_fu_319_p1 = trunc_ln_fu_309_p4;

assign or_ln27_fu_293_p2 = (icmp_ln27_fu_281_p2 | icmp_ln27_21_fu_287_p2);

assign or_ln32_fu_398_p2 = (icmp_ln32_fu_386_p2 | icmp_ln32_1_fu_392_p2);

assign or_ln35_fu_439_p2 = (icmp_ln35_fu_427_p2 | icmp_ln35_1_fu_433_p2);

assign or_ln43_fu_486_p2 = (icmp_ln43_fu_474_p2 | icmp_ln43_1_fu_480_p2);

assign select_ln43_1_fu_512_p3 = ((and_ln43_fu_492_p2[0:0] == 1'b1) ? reg_171 : reg_182);

assign select_ln43_2_fu_521_p3 = ((and_ln43_fu_492_p2[0:0] == 1'b1) ? reg_182 : 32'd0);

assign select_ln43_fu_503_p3 = ((and_ln43_fu_492_p2[0:0] == 1'b1) ? 32'd0 : c_p_2_fu_498_p2);

assign tmp_24_fu_372_p4 = {{bitcast_ln32_fu_368_p1[30:23]}};

assign tmp_26_fu_413_p4 = {{bitcast_ln35_fu_410_p1[30:23]}};

assign tmp_28_fu_460_p4 = {{bitcast_ln43_fu_456_p1[30:23]}};

assign tmp_fu_267_p4 = {{bitcast_ln27_fu_264_p1[30:23]}};

assign trunc_ln172_fu_305_p1 = p_read14[31:0];

assign trunc_ln1_fu_323_p4 = {{p_read14[95:64]}};

assign trunc_ln27_fu_277_p1 = bitcast_ln27_fu_264_p1[22:0];

assign trunc_ln2_fu_339_p4 = {{p_read14[127:96]}};

assign trunc_ln32_fu_382_p1 = bitcast_ln32_fu_368_p1[22:0];

assign trunc_ln35_fu_423_p1 = bitcast_ln35_fu_410_p1[22:0];

assign trunc_ln43_fu_470_p1 = bitcast_ln43_fu_456_p1[22:0];

assign trunc_ln_fu_309_p4 = {{p_read14[63:32]}};

assign xor_ln143_fu_333_p2 = (trunc_ln1_fu_323_p4 ^ 32'd2147483648);

assign xor_ln144_fu_349_p2 = (trunc_ln2_fu_339_p4 ^ 32'd2147483648);

endmodule //ban_interface_operator_div
