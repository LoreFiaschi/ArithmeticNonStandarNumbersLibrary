// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_operator_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read13,
        n,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] p_read13;
input  [31:0] n;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] res_p_fu_97_p1;
reg   [31:0] res_p_reg_729;
wire   [30:0] trunc_ln306_fu_101_p1;
reg   [30:0] trunc_ln306_reg_739;
reg   [0:0] tmp_reg_745;
wire   [31:0] num_res_3_fu_123_p1;
reg   [31:0] num_res_3_reg_751;
wire   [31:0] num_res_fu_137_p1;
reg   [31:0] num_res_reg_760;
wire   [31:0] bitcast_ln304_2_fu_151_p1;
reg   [31:0] bitcast_ln304_2_reg_769;
wire   [1:0] trunc_ln312_fu_155_p1;
reg   [1:0] trunc_ln312_reg_777;
wire   [31:0] tmp_47_fu_159_p5;
wire   [31:0] grp_fu_72_p2;
reg   [31:0] add_reg_788;
wire    ap_CS_fsm_state4;
wire   [31:0] select_ln312_fu_177_p3;
reg   [31:0] select_ln312_reg_795;
wire    ap_CS_fsm_state5;
wire   [31:0] select_ln312_2_fu_195_p3;
reg   [31:0] select_ln312_2_reg_803;
wire   [31:0] select_ln312_4_fu_209_p3;
reg   [31:0] select_ln312_4_reg_813;
wire   [31:0] grp_fu_82_p0;
wire   [31:0] grp_fu_87_p0;
wire   [31:0] grp_fu_92_p0;
wire   [31:0] trunc_ln304_1_fu_113_p4;
wire   [31:0] trunc_ln304_2_fu_127_p4;
wire   [31:0] trunc_ln304_3_fu_141_p4;
wire   [31:0] tmp_47_fu_159_p1;
wire   [31:0] tmp_47_fu_159_p2;
wire   [31:0] tmp_47_fu_159_p3;
wire   [1:0] tmp_47_fu_159_p4;
wire   [0:0] icmp_ln312_fu_172_p2;
wire   [0:0] icmp_ln312_1_fu_184_p2;
wire   [31:0] select_ln312_1_fu_189_p3;
wire   [31:0] select_ln312_3_fu_203_p3;
wire    ap_CS_fsm_state6;
wire   [31:0] bitcast_ln303_fu_217_p1;
wire   [7:0] tmp_s_fu_220_p4;
wire   [22:0] trunc_ln303_fu_230_p1;
wire   [0:0] icmp_ln303_1_fu_240_p2;
wire   [0:0] icmp_ln303_fu_234_p2;
wire   [0:0] or_ln303_fu_246_p2;
wire   [0:0] grp_fu_77_p2;
wire   [0:0] and_ln303_fu_252_p2;
wire   [31:0] add_ln309_fu_269_p2;
wire   [0:0] tmp_2_fu_274_p3;
wire   [0:0] icmp_ln321_fu_288_p2;
wire   [0:0] icmp_ln321_1_fu_300_p2;
wire   [31:0] num_res_4_fu_293_p3;
wire   [31:0] bitcast_ln32_fu_319_p1;
wire   [7:0] tmp_48_fu_322_p4;
wire   [22:0] trunc_ln32_fu_332_p1;
wire   [0:0] icmp_ln32_3_fu_342_p2;
wire   [0:0] icmp_ln32_fu_336_p2;
wire   [0:0] or_ln32_fu_348_p2;
wire   [0:0] grp_fu_82_p2;
wire   [0:0] and_ln32_fu_354_p2;
wire   [31:0] bitcast_ln35_fu_366_p1;
wire   [7:0] tmp_50_fu_369_p4;
wire   [22:0] trunc_ln35_fu_379_p1;
wire   [0:0] icmp_ln35_3_fu_389_p2;
wire   [0:0] icmp_ln35_fu_383_p2;
wire   [0:0] or_ln35_fu_395_p2;
wire   [0:0] grp_fu_87_p2;
wire   [0:0] and_ln35_fu_401_p2;
wire   [31:0] bitcast_ln43_fu_418_p1;
wire   [7:0] tmp_52_fu_421_p4;
wire   [22:0] trunc_ln43_fu_431_p1;
wire   [0:0] icmp_ln43_3_fu_441_p2;
wire   [0:0] icmp_ln43_fu_435_p2;
wire   [0:0] or_ln43_fu_447_p2;
wire   [0:0] grp_fu_92_p2;
wire   [0:0] and_ln43_fu_453_p2;
wire   [0:0] xor_ln306_fu_264_p2;
wire   [0:0] xor_ln303_fu_258_p2;
wire   [0:0] and_ln306_fu_470_p2;
wire   [0:0] xor_ln309_fu_282_p2;
wire   [0:0] and_ln309_fu_476_p2;
wire   [0:0] and_ln309_1_fu_488_p2;
wire   [0:0] xor_ln32_fu_360_p2;
wire   [0:0] and_ln32_1_fu_494_p2;
wire   [31:0] select_ln309_fu_482_p3;
wire   [0:0] and_ln32_2_fu_507_p2;
wire   [0:0] xor_ln35_fu_407_p2;
wire   [0:0] and_ln35_3_fu_513_p2;
wire   [31:0] select_ln32_fu_500_p3;
wire   [0:0] xor_ln43_fu_459_p2;
wire   [0:0] and_ln43_2_fu_526_p2;
wire   [0:0] and_ln43_3_fu_532_p2;
wire   [31:0] select_ln35_fu_519_p3;
wire   [0:0] and_ln306_1_fu_545_p2;
wire   [31:0] select_ln43_fu_538_p3;
wire   [31:0] select_ln306_fu_550_p3;
wire   [31:0] select_ln309_1_fu_564_p3;
wire   [31:0] select_ln32_1_fu_570_p3;
wire   [31:0] select_ln35_1_fu_577_p3;
wire   [31:0] select_ln321_fu_312_p3;
wire   [31:0] select_ln43_5_fu_584_p3;
wire   [31:0] select_ln306_1_fu_591_p3;
wire   [31:0] select_ln309_2_fu_606_p3;
wire   [0:0] or_ln43_2_fu_619_p2;
wire   [31:0] select_ln32_2_fu_612_p3;
wire   [31:0] num_res_5_fu_305_p3;
wire   [31:0] select_ln43_6_fu_625_p3;
wire   [31:0] select_ln306_2_fu_633_p3;
wire   [30:0] res_p_3_fu_648_p3;
wire   [30:0] res_p_4_fu_655_p3;
wire   [31:0] res_p_1_fu_413_p2;
wire   [31:0] zext_ln39_fu_662_p1;
wire   [31:0] res_p_2_fu_465_p2;
wire   [31:0] res_p_5_fu_666_p3;
wire   [31:0] res_p_6_fu_674_p3;
wire   [31:0] res_p_7_fu_682_p3;
wire   [31:0] res_p_8_fu_690_p3;
wire   [31:0] select_ln303_fu_557_p3;
wire   [31:0] select_ln303_1_fu_599_p3;
wire   [31:0] select_ln303_2_fu_641_p3;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_47_fu_159_p5),
    .din1(n),
    .ce(1'b1),
    .dout(grp_fu_72_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(n),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_77_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_82_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_82_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_87_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_87_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_92_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_92_p2)
);

ban_interface_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U33(
    .din0(tmp_47_fu_159_p1),
    .din1(tmp_47_fu_159_p2),
    .din2(tmp_47_fu_159_p3),
    .din3(tmp_47_fu_159_p4),
    .dout(tmp_47_fu_159_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_0_preg <= res_p_8_fu_690_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_1_preg <= select_ln303_fu_557_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_2_preg <= select_ln303_1_fu_599_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_3_preg <= select_ln303_2_fu_641_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_reg_788 <= grp_fu_72_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bitcast_ln304_2_reg_769 <= bitcast_ln304_2_fu_151_p1;
        num_res_3_reg_751 <= num_res_3_fu_123_p1;
        num_res_reg_760 <= num_res_fu_137_p1;
        res_p_reg_729 <= res_p_fu_97_p1;
        tmp_reg_745 <= p_read13[32'd31];
        trunc_ln306_reg_739 <= trunc_ln306_fu_101_p1;
        trunc_ln312_reg_777 <= trunc_ln312_fu_155_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        select_ln312_2_reg_803 <= select_ln312_2_fu_195_p3;
        select_ln312_4_reg_813 <= select_ln312_4_fu_209_p3;
        select_ln312_reg_795 <= select_ln312_fu_177_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_0 = res_p_8_fu_690_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_1 = select_ln303_fu_557_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_2 = select_ln303_1_fu_599_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_3 = select_ln303_2_fu_641_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln309_fu_269_p2 = ($signed(res_p_reg_729) + $signed(32'd4294967293));

assign and_ln303_fu_252_p2 = (or_ln303_fu_246_p2 & grp_fu_77_p2);

assign and_ln306_1_fu_545_p2 = (xor_ln303_fu_258_p2 & tmp_reg_745);

assign and_ln306_fu_470_p2 = (xor_ln306_fu_264_p2 & xor_ln303_fu_258_p2);

assign and_ln309_1_fu_488_p2 = (tmp_2_fu_274_p3 & and_ln306_fu_470_p2);

assign and_ln309_fu_476_p2 = (xor_ln309_fu_282_p2 & and_ln306_fu_470_p2);

assign and_ln32_1_fu_494_p2 = (xor_ln32_fu_360_p2 & and_ln309_1_fu_488_p2);

assign and_ln32_2_fu_507_p2 = (and_ln32_fu_354_p2 & and_ln309_1_fu_488_p2);

assign and_ln32_fu_354_p2 = (or_ln32_fu_348_p2 & grp_fu_82_p2);

assign and_ln35_3_fu_513_p2 = (xor_ln35_fu_407_p2 & and_ln32_2_fu_507_p2);

assign and_ln35_fu_401_p2 = (or_ln35_fu_395_p2 & grp_fu_87_p2);

assign and_ln43_2_fu_526_p2 = (xor_ln43_fu_459_p2 & and_ln35_fu_401_p2);

assign and_ln43_3_fu_532_p2 = (and_ln43_2_fu_526_p2 & and_ln32_2_fu_507_p2);

assign and_ln43_fu_453_p2 = (or_ln43_fu_447_p2 & grp_fu_92_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln303_fu_217_p1 = n;

assign bitcast_ln304_2_fu_151_p1 = trunc_ln304_3_fu_141_p4;

assign bitcast_ln32_fu_319_p1 = select_ln312_reg_795;

assign bitcast_ln35_fu_366_p1 = select_ln312_2_reg_803;

assign bitcast_ln43_fu_418_p1 = select_ln312_4_reg_813;

assign grp_fu_82_p0 = ((icmp_ln312_fu_172_p2[0:0] == 1'b1) ? add_reg_788 : num_res_3_reg_751);

assign grp_fu_87_p0 = ((icmp_ln312_fu_172_p2[0:0] == 1'b1) ? num_res_reg_760 : select_ln312_1_fu_189_p3);

assign grp_fu_92_p0 = ((icmp_ln312_fu_172_p2[0:0] == 1'b1) ? bitcast_ln304_2_reg_769 : select_ln312_3_fu_203_p3);

assign icmp_ln303_1_fu_240_p2 = ((trunc_ln303_fu_230_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln303_fu_234_p2 = ((tmp_s_fu_220_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln312_1_fu_184_p2 = ((trunc_ln312_reg_777 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln312_fu_172_p2 = ((trunc_ln312_reg_777 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln321_1_fu_300_p2 = ((res_p_reg_729 == 32'd4294967295) ? 1'b1 : 1'b0);

assign icmp_ln321_fu_288_p2 = ((res_p_reg_729 == 32'd4294967294) ? 1'b1 : 1'b0);

assign icmp_ln32_3_fu_342_p2 = ((trunc_ln32_fu_332_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_336_p2 = ((tmp_48_fu_322_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_3_fu_389_p2 = ((trunc_ln35_fu_379_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_383_p2 = ((tmp_50_fu_369_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln43_3_fu_441_p2 = ((trunc_ln43_fu_431_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_435_p2 = ((tmp_52_fu_421_p4 != 8'd255) ? 1'b1 : 1'b0);

assign num_res_3_fu_123_p1 = trunc_ln304_1_fu_113_p4;

assign num_res_4_fu_293_p3 = ((icmp_ln321_fu_288_p2[0:0] == 1'b1) ? num_res_3_reg_751 : 32'd0);

assign num_res_5_fu_305_p3 = ((icmp_ln321_1_fu_300_p2[0:0] == 1'b1) ? num_res_reg_760 : num_res_4_fu_293_p3);

assign num_res_fu_137_p1 = trunc_ln304_2_fu_127_p4;

assign or_ln303_fu_246_p2 = (icmp_ln303_fu_234_p2 | icmp_ln303_1_fu_240_p2);

assign or_ln32_fu_348_p2 = (icmp_ln32_fu_336_p2 | icmp_ln32_3_fu_342_p2);

assign or_ln35_fu_395_p2 = (icmp_ln35_fu_383_p2 | icmp_ln35_3_fu_389_p2);

assign or_ln43_2_fu_619_p2 = (and_ln43_3_fu_532_p2 | and_ln35_3_fu_513_p2);

assign or_ln43_fu_447_p2 = (icmp_ln43_fu_435_p2 | icmp_ln43_3_fu_441_p2);

assign res_p_1_fu_413_p2 = ($signed(res_p_reg_729) + $signed(32'd4294967295));

assign res_p_2_fu_465_p2 = ($signed(res_p_reg_729) + $signed(32'd4294967294));

assign res_p_3_fu_648_p3 = ((and_ln309_fu_476_p2[0:0] == 1'b1) ? trunc_ln306_reg_739 : 31'd0);

assign res_p_4_fu_655_p3 = ((and_ln32_1_fu_494_p2[0:0] == 1'b1) ? trunc_ln306_reg_739 : res_p_3_fu_648_p3);

assign res_p_5_fu_666_p3 = ((and_ln35_3_fu_513_p2[0:0] == 1'b1) ? res_p_1_fu_413_p2 : zext_ln39_fu_662_p1);

assign res_p_6_fu_674_p3 = ((and_ln43_3_fu_532_p2[0:0] == 1'b1) ? res_p_2_fu_465_p2 : res_p_5_fu_666_p3);

assign res_p_7_fu_682_p3 = ((and_ln306_1_fu_545_p2[0:0] == 1'b1) ? 32'd0 : res_p_6_fu_674_p3);

assign res_p_8_fu_690_p3 = ((and_ln303_fu_252_p2[0:0] == 1'b1) ? res_p_reg_729 : res_p_7_fu_682_p3);

assign res_p_fu_97_p1 = p_read13[31:0];

assign select_ln303_1_fu_599_p3 = ((and_ln303_fu_252_p2[0:0] == 1'b1) ? num_res_reg_760 : select_ln306_1_fu_591_p3);

assign select_ln303_2_fu_641_p3 = ((and_ln303_fu_252_p2[0:0] == 1'b1) ? bitcast_ln304_2_reg_769 : select_ln306_2_fu_633_p3);

assign select_ln303_fu_557_p3 = ((and_ln303_fu_252_p2[0:0] == 1'b1) ? num_res_3_reg_751 : select_ln306_fu_550_p3);

assign select_ln306_1_fu_591_p3 = ((and_ln306_1_fu_545_p2[0:0] == 1'b1) ? select_ln321_fu_312_p3 : select_ln43_5_fu_584_p3);

assign select_ln306_2_fu_633_p3 = ((and_ln306_1_fu_545_p2[0:0] == 1'b1) ? num_res_5_fu_305_p3 : select_ln43_6_fu_625_p3);

assign select_ln306_fu_550_p3 = ((and_ln306_1_fu_545_p2[0:0] == 1'b1) ? n : select_ln43_fu_538_p3);

assign select_ln309_1_fu_564_p3 = ((and_ln309_fu_476_p2[0:0] == 1'b1) ? num_res_reg_760 : select_ln312_2_reg_803);

assign select_ln309_2_fu_606_p3 = ((and_ln309_fu_476_p2[0:0] == 1'b1) ? bitcast_ln304_2_reg_769 : select_ln312_4_reg_813);

assign select_ln309_fu_482_p3 = ((and_ln309_fu_476_p2[0:0] == 1'b1) ? num_res_3_reg_751 : select_ln312_reg_795);

assign select_ln312_1_fu_189_p3 = ((icmp_ln312_1_fu_184_p2[0:0] == 1'b1) ? add_reg_788 : num_res_reg_760);

assign select_ln312_2_fu_195_p3 = ((icmp_ln312_fu_172_p2[0:0] == 1'b1) ? num_res_reg_760 : select_ln312_1_fu_189_p3);

assign select_ln312_3_fu_203_p3 = ((icmp_ln312_1_fu_184_p2[0:0] == 1'b1) ? bitcast_ln304_2_reg_769 : add_reg_788);

assign select_ln312_4_fu_209_p3 = ((icmp_ln312_fu_172_p2[0:0] == 1'b1) ? bitcast_ln304_2_reg_769 : select_ln312_3_fu_203_p3);

assign select_ln312_fu_177_p3 = ((icmp_ln312_fu_172_p2[0:0] == 1'b1) ? add_reg_788 : num_res_3_reg_751);

assign select_ln321_fu_312_p3 = ((icmp_ln321_1_fu_300_p2[0:0] == 1'b1) ? num_res_3_reg_751 : 32'd0);

assign select_ln32_1_fu_570_p3 = ((and_ln32_1_fu_494_p2[0:0] == 1'b1) ? select_ln312_2_reg_803 : select_ln309_1_fu_564_p3);

assign select_ln32_2_fu_612_p3 = ((and_ln32_1_fu_494_p2[0:0] == 1'b1) ? select_ln312_4_reg_813 : select_ln309_2_fu_606_p3);

assign select_ln32_fu_500_p3 = ((and_ln32_1_fu_494_p2[0:0] == 1'b1) ? select_ln312_reg_795 : select_ln309_fu_482_p3);

assign select_ln35_1_fu_577_p3 = ((and_ln35_3_fu_513_p2[0:0] == 1'b1) ? select_ln312_4_reg_813 : select_ln32_1_fu_570_p3);

assign select_ln35_fu_519_p3 = ((and_ln35_3_fu_513_p2[0:0] == 1'b1) ? select_ln312_2_reg_803 : select_ln32_fu_500_p3);

assign select_ln43_5_fu_584_p3 = ((and_ln43_3_fu_532_p2[0:0] == 1'b1) ? select_ln312_2_reg_803 : select_ln35_1_fu_577_p3);

assign select_ln43_6_fu_625_p3 = ((or_ln43_2_fu_619_p2[0:0] == 1'b1) ? 32'd0 : select_ln32_2_fu_612_p3);

assign select_ln43_fu_538_p3 = ((and_ln43_3_fu_532_p2[0:0] == 1'b1) ? select_ln312_4_reg_813 : select_ln35_fu_519_p3);

assign tmp_2_fu_274_p3 = add_ln309_fu_269_p2[32'd31];

assign tmp_47_fu_159_p1 = trunc_ln304_1_fu_113_p4;

assign tmp_47_fu_159_p2 = trunc_ln304_2_fu_127_p4;

assign tmp_47_fu_159_p3 = trunc_ln304_3_fu_141_p4;

assign tmp_47_fu_159_p4 = p_read13[1:0];

assign tmp_48_fu_322_p4 = {{bitcast_ln32_fu_319_p1[30:23]}};

assign tmp_50_fu_369_p4 = {{bitcast_ln35_fu_366_p1[30:23]}};

assign tmp_52_fu_421_p4 = {{bitcast_ln43_fu_418_p1[30:23]}};

assign tmp_s_fu_220_p4 = {{bitcast_ln303_fu_217_p1[30:23]}};

assign trunc_ln303_fu_230_p1 = bitcast_ln303_fu_217_p1[22:0];

assign trunc_ln304_1_fu_113_p4 = {{p_read13[63:32]}};

assign trunc_ln304_2_fu_127_p4 = {{p_read13[95:64]}};

assign trunc_ln304_3_fu_141_p4 = {{p_read13[127:96]}};

assign trunc_ln306_fu_101_p1 = p_read13[30:0];

assign trunc_ln312_fu_155_p1 = p_read13[1:0];

assign trunc_ln32_fu_332_p1 = bitcast_ln32_fu_319_p1[22:0];

assign trunc_ln35_fu_379_p1 = bitcast_ln35_fu_366_p1[22:0];

assign trunc_ln43_fu_431_p1 = bitcast_ln43_fu_418_p1[22:0];

assign xor_ln303_fu_258_p2 = (1'd1 ^ and_ln303_fu_252_p2);

assign xor_ln306_fu_264_p2 = (tmp_reg_745 ^ 1'd1);

assign xor_ln309_fu_282_p2 = (tmp_2_fu_274_p3 ^ 1'd1);

assign xor_ln32_fu_360_p2 = (1'd1 ^ and_ln32_fu_354_p2);

assign xor_ln35_fu_407_p2 = (1'd1 ^ and_ln35_fu_401_p2);

assign xor_ln43_fu_459_p2 = (1'd1 ^ and_ln43_fu_453_p2);

assign zext_ln39_fu_662_p1 = res_p_4_fu_655_p3;

endmodule //ban_interface_operator_2
