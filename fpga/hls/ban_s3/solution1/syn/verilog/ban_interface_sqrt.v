// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_sqrt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read14,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        grp_fu_928_p_din0,
        grp_fu_928_p_din1,
        grp_fu_928_p_opcode,
        grp_fu_928_p_dout0,
        grp_fu_928_p_ce,
        grp_fu_932_p_din0,
        grp_fu_932_p_din1,
        grp_fu_932_p_opcode,
        grp_fu_932_p_dout0,
        grp_fu_932_p_ce,
        grp_fu_940_p_din0,
        grp_fu_940_p_din1,
        grp_fu_940_p_dout0,
        grp_fu_940_p_ce,
        grp_fu_945_p_din0,
        grp_fu_945_p_din1,
        grp_fu_945_p_dout0,
        grp_fu_945_p_ce,
        grp_fu_971_p_din0,
        grp_fu_971_p_din1,
        grp_fu_971_p_dout0,
        grp_fu_971_p_ce,
        grp_fu_976_p_din0,
        grp_fu_976_p_din1,
        grp_fu_976_p_dout0,
        grp_fu_976_p_ce,
        grp_fu_1001_p_din0,
        grp_fu_1001_p_din1,
        grp_fu_1001_p_opcode,
        grp_fu_1001_p_dout0,
        grp_fu_1001_p_ce
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_state4 = 38'd8;
parameter    ap_ST_fsm_state5 = 38'd16;
parameter    ap_ST_fsm_state6 = 38'd32;
parameter    ap_ST_fsm_state7 = 38'd64;
parameter    ap_ST_fsm_state8 = 38'd128;
parameter    ap_ST_fsm_state9 = 38'd256;
parameter    ap_ST_fsm_state10 = 38'd512;
parameter    ap_ST_fsm_state11 = 38'd1024;
parameter    ap_ST_fsm_state12 = 38'd2048;
parameter    ap_ST_fsm_state13 = 38'd4096;
parameter    ap_ST_fsm_state14 = 38'd8192;
parameter    ap_ST_fsm_state15 = 38'd16384;
parameter    ap_ST_fsm_state16 = 38'd32768;
parameter    ap_ST_fsm_state17 = 38'd65536;
parameter    ap_ST_fsm_state18 = 38'd131072;
parameter    ap_ST_fsm_state19 = 38'd262144;
parameter    ap_ST_fsm_state20 = 38'd524288;
parameter    ap_ST_fsm_state21 = 38'd1048576;
parameter    ap_ST_fsm_state22 = 38'd2097152;
parameter    ap_ST_fsm_state23 = 38'd4194304;
parameter    ap_ST_fsm_state24 = 38'd8388608;
parameter    ap_ST_fsm_state25 = 38'd16777216;
parameter    ap_ST_fsm_state26 = 38'd33554432;
parameter    ap_ST_fsm_state27 = 38'd67108864;
parameter    ap_ST_fsm_state28 = 38'd134217728;
parameter    ap_ST_fsm_state29 = 38'd268435456;
parameter    ap_ST_fsm_state30 = 38'd536870912;
parameter    ap_ST_fsm_state31 = 38'd1073741824;
parameter    ap_ST_fsm_state32 = 38'd2147483648;
parameter    ap_ST_fsm_state33 = 38'd4294967296;
parameter    ap_ST_fsm_state34 = 38'd8589934592;
parameter    ap_ST_fsm_state35 = 38'd17179869184;
parameter    ap_ST_fsm_state36 = 38'd34359738368;
parameter    ap_ST_fsm_state37 = 38'd68719476736;
parameter    ap_ST_fsm_state38 = 38'd137438953472;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] p_read14;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] grp_fu_928_p_din0;
output  [31:0] grp_fu_928_p_din1;
output  [1:0] grp_fu_928_p_opcode;
input  [31:0] grp_fu_928_p_dout0;
output   grp_fu_928_p_ce;
output  [31:0] grp_fu_932_p_din0;
output  [31:0] grp_fu_932_p_din1;
output  [1:0] grp_fu_932_p_opcode;
input  [31:0] grp_fu_932_p_dout0;
output   grp_fu_932_p_ce;
output  [31:0] grp_fu_940_p_din0;
output  [31:0] grp_fu_940_p_din1;
input  [31:0] grp_fu_940_p_dout0;
output   grp_fu_940_p_ce;
output  [31:0] grp_fu_945_p_din0;
output  [31:0] grp_fu_945_p_din1;
input  [31:0] grp_fu_945_p_dout0;
output   grp_fu_945_p_ce;
output  [31:0] grp_fu_971_p_din0;
output  [31:0] grp_fu_971_p_din1;
input  [31:0] grp_fu_971_p_dout0;
output   grp_fu_971_p_ce;
output  [31:0] grp_fu_976_p_din0;
output  [31:0] grp_fu_976_p_din1;
input  [31:0] grp_fu_976_p_dout0;
output   grp_fu_976_p_ce;
output  [31:0] grp_fu_1001_p_din0;
output  [31:0] grp_fu_1001_p_din1;
output  [4:0] grp_fu_1001_p_opcode;
input  [0:0] grp_fu_1001_p_dout0;
output   grp_fu_1001_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_243;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state36;
reg   [31:0] reg_250;
wire    ap_CS_fsm_state25;
reg   [31:0] reg_258;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln27_fu_268_p2;
reg   [0:0] icmp_ln27_reg_458;
wire   [31:0] normalizer_fu_284_p1;
reg   [31:0] normalizer_reg_462;
wire   [0:0] or_ln27_fu_319_p2;
reg   [0:0] or_ln27_reg_471;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_fu_160_p2;
reg   [0:0] and_ln27_reg_476;
wire   [31:0] bitcast_ln27_1_fu_326_p1;
reg   [31:0] bitcast_ln27_1_reg_480;
wire   [0:0] and_ln27_1_fu_337_p2;
reg   [0:0] and_ln27_1_reg_486;
wire    ap_CS_fsm_state3;
wire   [31:0] bitcast_ln27_2_fu_343_p1;
wire   [0:0] and_ln27_2_fu_354_p2;
reg   [0:0] and_ln27_2_reg_495;
wire    ap_CS_fsm_state4;
reg   [0:0] and_ln27_3_reg_499;
wire    ap_CS_fsm_state5;
wire   [31:0] bitcast_ln27_3_fu_360_p1;
reg   [31:0] bitcast_ln27_3_reg_503;
wire   [0:0] and_ln27_4_fu_371_p2;
reg   [0:0] and_ln27_4_reg_509;
wire    ap_CS_fsm_state6;
wire   [31:0] bitcast_ln27_4_fu_377_p1;
wire   [0:0] and_ln27_5_fu_388_p2;
reg   [0:0] and_ln27_5_reg_518;
wire    ap_CS_fsm_state7;
wire   [31:0] bitcast_ln279_fu_394_p1;
wire   [31:0] bitcast_ln280_fu_399_p1;
reg   [30:0] p_reg_532;
wire   [31:0] bitcast_ln272_fu_413_p1;
reg   [31:0] bitcast_ln272_reg_537;
reg   [31:0] eps_2_reg_542;
wire    ap_CS_fsm_state15;
reg   [31:0] eps_2_1_reg_548;
reg   [31:0] add16_i_reg_554;
reg   [31:0] conv_reg_559;
reg   [31:0] add1_reg_564;
wire    ap_CS_fsm_state33;
wire   [31:0] grp_fu_155_p2;
reg   [31:0] normalizer_2_reg_569;
reg   [31:0] ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4;
reg   [31:0] this_num_0_write_assign_reg_72;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state37;
reg   [31:0] ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4;
reg   [31:0] this_num_1_write_assign_reg_81;
reg   [31:0] ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4;
reg   [31:0] this_num_2_write_assign_reg_90;
reg   [30:0] ap_phi_mux_this_p_write_assign_phi_fu_103_p4;
reg   [30:0] this_p_write_assign_reg_99;
reg   [31:0] p_1_1_reg_110;
reg   [31:0] grp_fu_121_p0;
reg   [31:0] grp_fu_121_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state30;
reg   [31:0] grp_fu_129_p0;
reg   [31:0] grp_fu_129_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state34;
reg   [31:0] grp_fu_134_p0;
reg   [31:0] grp_fu_134_p1;
reg   [31:0] grp_fu_149_p0;
reg   [31:0] grp_fu_149_p1;
reg   [0:0] grp_fu_160_p0;
wire   [7:0] grp_fu_174_p4;
wire   [22:0] grp_fu_183_p4;
wire   [7:0] grp_fu_213_p4;
wire   [22:0] grp_fu_222_p4;
wire   [31:0] trunc_ln27_fu_264_p1;
wire   [31:0] trunc_ln27_1_fu_274_p4;
wire   [7:0] tmp_fu_289_p4;
wire   [22:0] trunc_ln27_8_fu_298_p4;
wire   [0:0] icmp_ln27_2_fu_313_p2;
wire   [0:0] icmp_ln27_1_fu_307_p2;
wire   [31:0] grp_fu_165_p4;
wire   [0:0] grp_fu_198_p2;
wire   [0:0] grp_fu_192_p2;
wire   [0:0] or_ln27_1_fu_331_p2;
wire   [31:0] grp_fu_204_p4;
wire   [0:0] grp_fu_237_p2;
wire   [0:0] grp_fu_231_p2;
wire   [0:0] or_ln27_2_fu_348_p2;
wire   [0:0] or_ln27_3_fu_365_p2;
wire   [0:0] or_ln27_4_fu_382_p2;
wire  signed [31:0] sext_ln0_fu_417_p1;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [37:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

ban_interface_fsqrt_32ns_32ns_32_8_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsqrt_32ns_32ns_32_8_no_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(normalizer_reg_462),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_return_0_preg <= sext_ln0_fu_417_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_return_1_preg <= ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_return_2_preg <= ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_return_3_preg <= ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((((1'd0 == and_ln27_1_reg_486) & (1'd1 == and_ln27_5_fu_388_p2) & (1'd1 == and_ln27_4_reg_509) & (1'd1 == and_ln27_3_reg_499) & (icmp_ln27_reg_458 == 1'd1)) | ((1'd0 == and_ln27_2_reg_495) & (1'd1 == and_ln27_5_fu_388_p2) & (1'd1 == and_ln27_4_reg_509) & (1'd1 == and_ln27_3_reg_499) & (icmp_ln27_reg_458 == 1'd1))) | ((1'd0 == and_ln27_reg_476) & (1'd1 == and_ln27_5_fu_388_p2) & (1'd1 == and_ln27_4_reg_509) & (1'd1 == and_ln27_3_reg_499) & (icmp_ln27_reg_458 == 1'd1))))) begin
        p_1_1_reg_110 <= bitcast_ln27_3_reg_503;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln27_2_fu_354_p2) & (1'd1 == and_ln27_1_reg_486) & (1'd1 == and_ln27_reg_476))) begin
        p_1_1_reg_110 <= bitcast_ln27_1_reg_480;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((icmp_ln27_reg_458 == 1'd0) | ((((((((((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_2_reg_495)) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_reg_476)))))) begin
        this_num_0_write_assign_reg_72 <= normalizer_2_reg_569;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        this_num_0_write_assign_reg_72 <= normalizer_reg_462;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((icmp_ln27_reg_458 == 1'd0) | ((((((((((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_2_reg_495)) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_reg_476)))))) begin
        this_num_1_write_assign_reg_81 <= reg_243;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        this_num_1_write_assign_reg_81 <= p_1_1_reg_110;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((icmp_ln27_reg_458 == 1'd0) | ((((((((((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_2_reg_495)) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_reg_476)))))) begin
        this_num_2_write_assign_reg_90 <= reg_250;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        this_num_2_write_assign_reg_90 <= bitcast_ln272_reg_537;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((icmp_ln27_reg_458 == 1'd0) | ((((((((((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_2_reg_495)) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_reg_476)))))) begin
        this_p_write_assign_reg_99 <= p_reg_532;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        this_p_write_assign_reg_99 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add16_i_reg_554 <= grp_fu_932_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        add1_reg_564 <= grp_fu_928_p_dout0;
        normalizer_2_reg_569 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        and_ln27_1_reg_486 <= and_ln27_1_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln27_1_reg_486) & (1'd1 == and_ln27_reg_476))) begin
        and_ln27_2_reg_495 <= and_ln27_2_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        and_ln27_3_reg_499 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        and_ln27_4_reg_509 <= and_ln27_4_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((((1'd0 == and_ln27_1_reg_486) & (1'd1 == and_ln27_4_reg_509) & (1'd1 == and_ln27_3_reg_499) & (icmp_ln27_reg_458 == 1'd1)) | ((1'd0 == and_ln27_2_reg_495) & (1'd1 == and_ln27_4_reg_509) & (1'd1 == and_ln27_3_reg_499) & (icmp_ln27_reg_458 == 1'd1))) | ((1'd0 == and_ln27_reg_476) & (1'd1 == and_ln27_4_reg_509) & (1'd1 == and_ln27_3_reg_499) & (icmp_ln27_reg_458 == 1'd1))))) begin
        and_ln27_5_reg_518 <= and_ln27_5_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln27_reg_476 <= grp_fu_160_p2;
        or_ln27_reg_471 <= or_ln27_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (((1'd1 == and_ln27_2_reg_495) & (1'd1 == and_ln27_1_reg_486) & (1'd1 == and_ln27_reg_476) & (icmp_ln27_reg_458 == 1'd1)) | ((1'd1 == and_ln27_5_fu_388_p2) & (1'd1 == and_ln27_4_reg_509) & (1'd1 == and_ln27_3_reg_499) & (icmp_ln27_reg_458 == 1'd1))))) begin
        bitcast_ln272_reg_537 <= bitcast_ln272_fu_413_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_160_p2 == 1'd1))) begin
        bitcast_ln27_1_reg_480 <= bitcast_ln27_1_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_fu_160_p2 == 1'd1))) begin
        bitcast_ln27_3_reg_503 <= bitcast_ln27_3_fu_360_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        conv_reg_559 <= grp_fu_940_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        eps_2_1_reg_548 <= grp_fu_976_p_dout0;
        eps_2_reg_542 <= grp_fu_971_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln27_reg_458 <= icmp_ln27_fu_268_p2;
        normalizer_reg_462 <= normalizer_fu_284_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln27_reg_458 == 1'd0) | ((((((((((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_2_reg_495)) | ((1'd0 == and_ln27_5_fu_388_p2) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_5_fu_388_p2) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_5_fu_388_p2) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_reg_476)))))) begin
        p_reg_532 <= {{p_read14[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_243 <= grp_fu_940_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_250 <= grp_fu_945_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_258 <= grp_fu_928_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((icmp_ln27_reg_458 == 1'd0) | ((((((((((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_2_reg_495)) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_reg_476)))))) begin
        ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4 = normalizer_2_reg_569;
    end else begin
        ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4 = this_num_0_write_assign_reg_72;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((icmp_ln27_reg_458 == 1'd0) | ((((((((((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_2_reg_495)) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_reg_476)))))) begin
        ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4 = reg_243;
    end else begin
        ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4 = this_num_1_write_assign_reg_81;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((icmp_ln27_reg_458 == 1'd0) | ((((((((((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_2_reg_495)) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_reg_476)))))) begin
        ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4 = reg_250;
    end else begin
        ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4 = this_num_2_write_assign_reg_90;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((icmp_ln27_reg_458 == 1'd0) | ((((((((((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_2_reg_495)) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_2_reg_495))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_1_reg_486))) | ((1'd0 == and_ln27_5_reg_518) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_4_reg_509) & (1'd0 == and_ln27_reg_476))) | ((1'd0 == and_ln27_3_reg_499) & (1'd0 == and_ln27_reg_476)))))) begin
        ap_phi_mux_this_p_write_assign_phi_fu_103_p4 = p_reg_532;
    end else begin
        ap_phi_mux_this_p_write_assign_phi_fu_103_p4 = this_p_write_assign_reg_99;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_return_0 = sext_ln0_fu_417_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_return_1 = ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_return_2 = ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_return_3 = ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_121_p0 = conv_reg_559;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_121_p0 = add16_i_reg_554;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_121_p0 = reg_243;
    end else begin
        grp_fu_121_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_121_p1 = reg_250;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_121_p1 = reg_243;
    end else begin
        grp_fu_121_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_129_p0 = reg_258;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_129_p0 = eps_2_1_reg_548;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_129_p0 = eps_2_reg_542;
    end else begin
        grp_fu_129_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_129_p1 = normalizer_2_reg_569;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_129_p1 = 32'd1056964608;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_129_p1 = eps_2_reg_542;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_129_p1 = 32'd0;
    end else begin
        grp_fu_129_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_134_p0 = add1_reg_564;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_134_p0 = reg_258;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_134_p0 = eps_2_1_reg_548;
    end else begin
        grp_fu_134_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_134_p1 = normalizer_2_reg_569;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_134_p1 = 32'd3187671040;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_134_p1 = 32'd0;
    end else begin
        grp_fu_134_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_149_p0 = bitcast_ln27_4_fu_377_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_149_p0 = bitcast_ln27_3_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_149_p0 = normalizer_reg_462;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_149_p0 = bitcast_ln27_2_fu_343_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_149_p0 = bitcast_ln27_1_fu_326_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_149_p0 = normalizer_fu_284_p1;
    end else begin
        grp_fu_149_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_149_p1 = 32'd1065353216;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_149_p1 = 32'd0;
    end else begin
        grp_fu_149_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_160_p0 = or_ln27_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_160_p0 = or_ln27_fu_319_p2;
    end else begin
        grp_fu_160_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln27_fu_268_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln27_fu_268_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_160_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln27_2_fu_354_p2) & (1'd1 == and_ln27_1_reg_486) & (1'd1 == and_ln27_reg_476))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_fu_160_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (((1'd1 == and_ln27_2_reg_495) & (1'd1 == and_ln27_1_reg_486) & (1'd1 == and_ln27_reg_476) & (icmp_ln27_reg_458 == 1'd1)) | ((1'd1 == and_ln27_5_fu_388_p2) & (1'd1 == and_ln27_4_reg_509) & (1'd1 == and_ln27_3_reg_499) & (icmp_ln27_reg_458 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln27_1_fu_337_p2 = (or_ln27_1_fu_331_p2 & grp_fu_1001_p_dout0);

assign and_ln27_2_fu_354_p2 = (or_ln27_2_fu_348_p2 & grp_fu_1001_p_dout0);

assign and_ln27_4_fu_371_p2 = (or_ln27_3_fu_365_p2 & grp_fu_1001_p_dout0);

assign and_ln27_5_fu_388_p2 = (or_ln27_4_fu_382_p2 & grp_fu_1001_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln272_fu_413_p1 = grp_fu_204_p4;

assign bitcast_ln279_fu_394_p1 = grp_fu_165_p4;

assign bitcast_ln27_1_fu_326_p1 = grp_fu_165_p4;

assign bitcast_ln27_2_fu_343_p1 = grp_fu_204_p4;

assign bitcast_ln27_3_fu_360_p1 = grp_fu_165_p4;

assign bitcast_ln27_4_fu_377_p1 = grp_fu_204_p4;

assign bitcast_ln280_fu_399_p1 = grp_fu_204_p4;

assign grp_fu_1001_p_ce = 1'b1;

assign grp_fu_1001_p_din0 = grp_fu_149_p0;

assign grp_fu_1001_p_din1 = grp_fu_149_p1;

assign grp_fu_1001_p_opcode = 5'd1;

assign grp_fu_160_p2 = (grp_fu_160_p0 & grp_fu_1001_p_dout0);

assign grp_fu_165_p4 = {{p_read14[95:64]}};

assign grp_fu_174_p4 = {{p_read14[94:87]}};

assign grp_fu_183_p4 = {{p_read14[86:64]}};

assign grp_fu_192_p2 = ((grp_fu_174_p4 != 8'd255) ? 1'b1 : 1'b0);

assign grp_fu_198_p2 = ((grp_fu_183_p4 == 23'd0) ? 1'b1 : 1'b0);

assign grp_fu_204_p4 = {{p_read14[127:96]}};

assign grp_fu_213_p4 = {{p_read14[126:119]}};

assign grp_fu_222_p4 = {{p_read14[118:96]}};

assign grp_fu_231_p2 = ((grp_fu_213_p4 != 8'd255) ? 1'b1 : 1'b0);

assign grp_fu_237_p2 = ((grp_fu_222_p4 == 23'd0) ? 1'b1 : 1'b0);

assign grp_fu_928_p_ce = 1'b1;

assign grp_fu_928_p_din0 = grp_fu_121_p0;

assign grp_fu_928_p_din1 = grp_fu_121_p1;

assign grp_fu_928_p_opcode = 2'd0;

assign grp_fu_932_p_ce = 1'b1;

assign grp_fu_932_p_din0 = reg_250;

assign grp_fu_932_p_din1 = reg_250;

assign grp_fu_932_p_opcode = 2'd0;

assign grp_fu_940_p_ce = 1'b1;

assign grp_fu_940_p_din0 = grp_fu_129_p0;

assign grp_fu_940_p_din1 = grp_fu_129_p1;

assign grp_fu_945_p_ce = 1'b1;

assign grp_fu_945_p_din0 = grp_fu_134_p0;

assign grp_fu_945_p_din1 = grp_fu_134_p1;

assign grp_fu_971_p_ce = 1'b1;

assign grp_fu_971_p_din0 = bitcast_ln279_fu_394_p1;

assign grp_fu_971_p_din1 = normalizer_reg_462;

assign grp_fu_976_p_ce = 1'b1;

assign grp_fu_976_p_din0 = bitcast_ln280_fu_399_p1;

assign grp_fu_976_p_din1 = normalizer_reg_462;

assign icmp_ln27_1_fu_307_p2 = ((tmp_fu_289_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_2_fu_313_p2 = ((trunc_ln27_8_fu_298_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_268_p2 = ((trunc_ln27_fu_264_p1 == 32'd0) ? 1'b1 : 1'b0);

assign normalizer_fu_284_p1 = trunc_ln27_1_fu_274_p4;

assign or_ln27_1_fu_331_p2 = (grp_fu_198_p2 | grp_fu_192_p2);

assign or_ln27_2_fu_348_p2 = (grp_fu_237_p2 | grp_fu_231_p2);

assign or_ln27_3_fu_365_p2 = (grp_fu_198_p2 | grp_fu_192_p2);

assign or_ln27_4_fu_382_p2 = (grp_fu_237_p2 | grp_fu_231_p2);

assign or_ln27_fu_319_p2 = (icmp_ln27_2_fu_313_p2 | icmp_ln27_1_fu_307_p2);

assign sext_ln0_fu_417_p1 = $signed(ap_phi_mux_this_p_write_assign_phi_fu_103_p4);

assign tmp_fu_289_p4 = {{p_read14[62:55]}};

assign trunc_ln27_1_fu_274_p4 = {{p_read14[63:32]}};

assign trunc_ln27_8_fu_298_p4 = {{p_read14[54:32]}};

assign trunc_ln27_fu_264_p1 = p_read14[31:0];

endmodule //ban_interface_sqrt
