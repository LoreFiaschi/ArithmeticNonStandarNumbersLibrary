-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_sqrt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read14 : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_928_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_ce : OUT STD_LOGIC;
    grp_fu_932_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_932_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_932_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_932_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_932_p_ce : OUT STD_LOGIC;
    grp_fu_940_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_940_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_940_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_940_p_ce : OUT STD_LOGIC;
    grp_fu_945_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_945_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_945_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_945_p_ce : OUT STD_LOGIC;
    grp_fu_971_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_971_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_971_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_971_p_ce : OUT STD_LOGIC;
    grp_fu_976_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_976_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_976_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_976_p_ce : OUT STD_LOGIC;
    grp_fu_1001_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1001_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1001_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1001_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1001_p_ce : OUT STD_LOGIC );
end;


architecture behav of ban_interface_sqrt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_BE000000 : STD_LOGIC_VECTOR (31 downto 0) := "10111110000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln27_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_458 : STD_LOGIC_VECTOR (0 downto 0);
    signal normalizer_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal normalizer_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln27_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln27_1_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_1_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_1_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bitcast_ln27_2_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_2_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_2_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal and_ln27_3_reg_499 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal bitcast_ln27_3_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_3_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_4_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_4_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bitcast_ln27_4_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_5_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_5_reg_518 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal bitcast_ln279_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln280_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_532 : STD_LOGIC_VECTOR (30 downto 0);
    signal bitcast_ln272_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln272_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_2_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal eps_2_1_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal add16_i_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal normalizer_2_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_num_0_write_assign_reg_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_num_1_write_assign_reg_81 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_num_2_write_assign_reg_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_this_p_write_assign_phi_fu_103_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal this_p_write_assign_reg_99 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_1_1_reg_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_121_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_134_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_174_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_183_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_213_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_222_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln27_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln27_1_fu_274_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_289_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_8_fu_298_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_2_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_165_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_1_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_204_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_2_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_3_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_4_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln0_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ban_interface_fsqrt_32ns_32ns_32_8_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fsqrt_32ns_32ns_32_8_no_dsp_1_U44 : component ban_interface_fsqrt_32ns_32ns_32_8_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => normalizer_reg_462,
        ce => ap_const_logic_1,
        dout => grp_fu_155_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_return_0_preg <= sext_ln0_fu_417_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_return_1_preg <= ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_return_2_preg <= ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_return_3_preg <= ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4;
                end if; 
            end if;
        end if;
    end process;


    p_1_1_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((((ap_const_lv1_0 = and_ln27_1_reg_486) and (ap_const_lv1_1 = and_ln27_5_fu_388_p2) and (ap_const_lv1_1 = and_ln27_4_reg_509) and (ap_const_lv1_1 = and_ln27_3_reg_499) and (icmp_ln27_reg_458 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln27_2_reg_495) and (ap_const_lv1_1 = and_ln27_5_fu_388_p2) and (ap_const_lv1_1 = and_ln27_4_reg_509) and (ap_const_lv1_1 = and_ln27_3_reg_499) and (icmp_ln27_reg_458 = ap_const_lv1_1))) or ((ap_const_lv1_0 = and_ln27_reg_476) and (ap_const_lv1_1 = and_ln27_5_fu_388_p2) and (ap_const_lv1_1 = and_ln27_4_reg_509) and (ap_const_lv1_1 = and_ln27_3_reg_499) and (icmp_ln27_reg_458 = ap_const_lv1_1))))) then 
                p_1_1_reg_110 <= bitcast_ln27_3_reg_503;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln27_2_fu_354_p2) and (ap_const_lv1_1 = and_ln27_1_reg_486) and (ap_const_lv1_1 = and_ln27_reg_476))) then 
                p_1_1_reg_110 <= bitcast_ln27_1_reg_480;
            end if; 
        end if;
    end process;

    this_num_0_write_assign_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((icmp_ln27_reg_458 = ap_const_lv1_0) or ((((((((((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_2_reg_495)) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_reg_476)))))) then 
                this_num_0_write_assign_reg_72 <= normalizer_2_reg_569;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                this_num_0_write_assign_reg_72 <= normalizer_reg_462;
            end if; 
        end if;
    end process;

    this_num_1_write_assign_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((icmp_ln27_reg_458 = ap_const_lv1_0) or ((((((((((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_2_reg_495)) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_reg_476)))))) then 
                this_num_1_write_assign_reg_81 <= reg_243;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                this_num_1_write_assign_reg_81 <= p_1_1_reg_110;
            end if; 
        end if;
    end process;

    this_num_2_write_assign_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((icmp_ln27_reg_458 = ap_const_lv1_0) or ((((((((((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_2_reg_495)) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_reg_476)))))) then 
                this_num_2_write_assign_reg_90 <= reg_250;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                this_num_2_write_assign_reg_90 <= bitcast_ln272_reg_537;
            end if; 
        end if;
    end process;

    this_p_write_assign_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((icmp_ln27_reg_458 = ap_const_lv1_0) or ((((((((((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_2_reg_495)) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_reg_476)))))) then 
                this_p_write_assign_reg_99 <= p_reg_532;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                this_p_write_assign_reg_99 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add16_i_reg_554 <= grp_fu_932_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add1_reg_564 <= grp_fu_928_p_dout0;
                normalizer_2_reg_569 <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                and_ln27_1_reg_486 <= and_ln27_1_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln27_1_reg_486) and (ap_const_lv1_1 = and_ln27_reg_476))) then
                and_ln27_2_reg_495 <= and_ln27_2_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                and_ln27_3_reg_499 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                and_ln27_4_reg_509 <= and_ln27_4_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((((ap_const_lv1_0 = and_ln27_1_reg_486) and (ap_const_lv1_1 = and_ln27_4_reg_509) and (ap_const_lv1_1 = and_ln27_3_reg_499) and (icmp_ln27_reg_458 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln27_2_reg_495) and (ap_const_lv1_1 = and_ln27_4_reg_509) and (ap_const_lv1_1 = and_ln27_3_reg_499) and (icmp_ln27_reg_458 = ap_const_lv1_1))) or ((ap_const_lv1_0 = and_ln27_reg_476) and (ap_const_lv1_1 = and_ln27_4_reg_509) and (ap_const_lv1_1 = and_ln27_3_reg_499) and (icmp_ln27_reg_458 = ap_const_lv1_1))))) then
                and_ln27_5_reg_518 <= and_ln27_5_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln27_reg_476 <= grp_fu_160_p2;
                or_ln27_reg_471 <= or_ln27_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (((ap_const_lv1_1 = and_ln27_2_reg_495) and (ap_const_lv1_1 = and_ln27_1_reg_486) and (ap_const_lv1_1 = and_ln27_reg_476) and (icmp_ln27_reg_458 = ap_const_lv1_1)) or ((ap_const_lv1_1 = and_ln27_5_fu_388_p2) and (ap_const_lv1_1 = and_ln27_4_reg_509) and (ap_const_lv1_1 = and_ln27_3_reg_499) and (icmp_ln27_reg_458 = ap_const_lv1_1))))) then
                bitcast_ln272_reg_537 <= bitcast_ln272_fu_413_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_160_p2 = ap_const_lv1_1))) then
                bitcast_ln27_1_reg_480 <= bitcast_ln27_1_fu_326_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_fu_160_p2 = ap_const_lv1_1))) then
                bitcast_ln27_3_reg_503 <= bitcast_ln27_3_fu_360_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                conv_reg_559 <= grp_fu_940_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                eps_2_1_reg_548 <= grp_fu_976_p_dout0;
                eps_2_reg_542 <= grp_fu_971_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln27_reg_458 <= icmp_ln27_fu_268_p2;
                normalizer_reg_462 <= normalizer_fu_284_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln27_reg_458 = ap_const_lv1_0) or ((((((((((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_2_reg_495)) or ((ap_const_lv1_0 = and_ln27_5_fu_388_p2) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_5_fu_388_p2) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_5_fu_388_p2) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_reg_476)))))) then
                p_reg_532 <= p_read14(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_243 <= grp_fu_940_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_250 <= grp_fu_945_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_258 <= grp_fu_928_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln27_fu_268_p2, icmp_ln27_reg_458, ap_CS_fsm_state2, grp_fu_160_p2, and_ln27_reg_476, and_ln27_1_reg_486, and_ln27_2_fu_354_p2, and_ln27_2_reg_495, ap_CS_fsm_state4, and_ln27_3_reg_499, ap_CS_fsm_state5, and_ln27_4_reg_509, and_ln27_5_fu_388_p2, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln27_fu_268_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln27_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_160_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln27_2_fu_354_p2) and (ap_const_lv1_1 = and_ln27_1_reg_486) and (ap_const_lv1_1 = and_ln27_reg_476))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_fu_160_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (((ap_const_lv1_1 = and_ln27_2_reg_495) and (ap_const_lv1_1 = and_ln27_1_reg_486) and (ap_const_lv1_1 = and_ln27_reg_476) and (icmp_ln27_reg_458 = ap_const_lv1_1)) or ((ap_const_lv1_1 = and_ln27_5_fu_388_p2) and (ap_const_lv1_1 = and_ln27_4_reg_509) and (ap_const_lv1_1 = and_ln27_3_reg_499) and (icmp_ln27_reg_458 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln27_1_fu_337_p2 <= (or_ln27_1_fu_331_p2 and grp_fu_1001_p_dout0);
    and_ln27_2_fu_354_p2 <= (or_ln27_2_fu_348_p2 and grp_fu_1001_p_dout0);
    and_ln27_4_fu_371_p2 <= (or_ln27_3_fu_365_p2 and grp_fu_1001_p_dout0);
    and_ln27_5_fu_388_p2 <= (or_ln27_4_fu_382_p2 and grp_fu_1001_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4_assign_proc : process(icmp_ln27_reg_458, and_ln27_reg_476, and_ln27_1_reg_486, and_ln27_2_reg_495, and_ln27_3_reg_499, and_ln27_4_reg_509, and_ln27_5_reg_518, normalizer_2_reg_569, this_num_0_write_assign_reg_72, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((icmp_ln27_reg_458 = ap_const_lv1_0) or ((((((((((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_2_reg_495)) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_reg_476)))))) then 
            ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4 <= normalizer_2_reg_569;
        else 
            ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4 <= this_num_0_write_assign_reg_72;
        end if; 
    end process;


    ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4_assign_proc : process(reg_243, icmp_ln27_reg_458, and_ln27_reg_476, and_ln27_1_reg_486, and_ln27_2_reg_495, and_ln27_3_reg_499, and_ln27_4_reg_509, and_ln27_5_reg_518, ap_CS_fsm_state37, this_num_1_write_assign_reg_81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((icmp_ln27_reg_458 = ap_const_lv1_0) or ((((((((((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_2_reg_495)) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_reg_476)))))) then 
            ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4 <= reg_243;
        else 
            ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4 <= this_num_1_write_assign_reg_81;
        end if; 
    end process;


    ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4_assign_proc : process(reg_250, icmp_ln27_reg_458, and_ln27_reg_476, and_ln27_1_reg_486, and_ln27_2_reg_495, and_ln27_3_reg_499, and_ln27_4_reg_509, and_ln27_5_reg_518, ap_CS_fsm_state37, this_num_2_write_assign_reg_90)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((icmp_ln27_reg_458 = ap_const_lv1_0) or ((((((((((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_2_reg_495)) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_reg_476)))))) then 
            ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4 <= reg_250;
        else 
            ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4 <= this_num_2_write_assign_reg_90;
        end if; 
    end process;


    ap_phi_mux_this_p_write_assign_phi_fu_103_p4_assign_proc : process(icmp_ln27_reg_458, and_ln27_reg_476, and_ln27_1_reg_486, and_ln27_2_reg_495, and_ln27_3_reg_499, and_ln27_4_reg_509, and_ln27_5_reg_518, p_reg_532, ap_CS_fsm_state37, this_p_write_assign_reg_99)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((icmp_ln27_reg_458 = ap_const_lv1_0) or ((((((((((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_2_reg_495)) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_2_reg_495))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_1_reg_486))) or ((ap_const_lv1_0 = and_ln27_5_reg_518) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_4_reg_509) and (ap_const_lv1_0 = and_ln27_reg_476))) or ((ap_const_lv1_0 = and_ln27_3_reg_499) and (ap_const_lv1_0 = and_ln27_reg_476)))))) then 
            ap_phi_mux_this_p_write_assign_phi_fu_103_p4 <= p_reg_532;
        else 
            ap_phi_mux_this_p_write_assign_phi_fu_103_p4 <= this_p_write_assign_reg_99;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state37, sext_ln0_fu_417_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_return_0 <= sext_ln0_fu_417_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4, ap_CS_fsm_state37, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_return_1 <= ap_phi_mux_this_num_0_write_assign_phi_fu_75_p4;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state37, ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_return_2 <= ap_phi_mux_this_num_1_write_assign_phi_fu_84_p4;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state37, ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_return_3 <= ap_phi_mux_this_num_2_write_assign_phi_fu_93_p4;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    bitcast_ln272_fu_413_p1 <= grp_fu_204_p4;
    bitcast_ln279_fu_394_p1 <= grp_fu_165_p4;
    bitcast_ln27_1_fu_326_p1 <= grp_fu_165_p4;
    bitcast_ln27_2_fu_343_p1 <= grp_fu_204_p4;
    bitcast_ln27_3_fu_360_p1 <= grp_fu_165_p4;
    bitcast_ln27_4_fu_377_p1 <= grp_fu_204_p4;
    bitcast_ln280_fu_399_p1 <= grp_fu_204_p4;
    grp_fu_1001_p_ce <= ap_const_logic_1;
    grp_fu_1001_p_din0 <= grp_fu_149_p0;
    grp_fu_1001_p_din1 <= grp_fu_149_p1;
    grp_fu_1001_p_opcode <= ap_const_lv5_1;

    grp_fu_121_p0_assign_proc : process(reg_243, ap_CS_fsm_state26, add16_i_reg_554, conv_reg_559, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_121_p0 <= conv_reg_559;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_121_p0 <= add16_i_reg_554;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_121_p0 <= reg_243;
        else 
            grp_fu_121_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_121_p1_assign_proc : process(reg_243, reg_250, ap_CS_fsm_state26, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_121_p1 <= reg_250;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_121_p1 <= reg_243;
        else 
            grp_fu_121_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_129_p0_assign_proc : process(reg_258, eps_2_reg_542, eps_2_1_reg_548, ap_CS_fsm_state23, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_129_p0 <= reg_258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_129_p0 <= eps_2_1_reg_548;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_129_p0 <= eps_2_reg_542;
        else 
            grp_fu_129_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_129_p1_assign_proc : process(eps_2_reg_542, normalizer_2_reg_569, ap_CS_fsm_state23, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_129_p1 <= normalizer_2_reg_569;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_129_p1 <= ap_const_lv32_3F000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_129_p1 <= eps_2_reg_542;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_129_p1 <= ap_const_lv32_0;
        else 
            grp_fu_129_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_134_p0_assign_proc : process(reg_258, eps_2_1_reg_548, add1_reg_564, ap_CS_fsm_state23, ap_CS_fsm_state16, ap_CS_fsm_state27, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_134_p0 <= add1_reg_564;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_134_p0 <= reg_258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_134_p0 <= eps_2_1_reg_548;
        else 
            grp_fu_134_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_134_p1_assign_proc : process(normalizer_2_reg_569, ap_CS_fsm_state23, ap_CS_fsm_state16, ap_CS_fsm_state27, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_134_p1 <= normalizer_2_reg_569;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_134_p1 <= ap_const_lv32_BE000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_134_p1 <= ap_const_lv32_0;
        else 
            grp_fu_134_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_149_p0_assign_proc : process(ap_CS_fsm_state1, normalizer_fu_284_p1, normalizer_reg_462, ap_CS_fsm_state2, bitcast_ln27_1_fu_326_p1, ap_CS_fsm_state3, bitcast_ln27_2_fu_343_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, bitcast_ln27_3_fu_360_p1, ap_CS_fsm_state6, bitcast_ln27_4_fu_377_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_149_p0 <= bitcast_ln27_4_fu_377_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_149_p0 <= bitcast_ln27_3_fu_360_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_149_p0 <= normalizer_reg_462;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_149_p0 <= bitcast_ln27_2_fu_343_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_149_p0 <= bitcast_ln27_1_fu_326_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_149_p0 <= normalizer_fu_284_p1;
        else 
            grp_fu_149_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_149_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_149_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_149_p1 <= ap_const_lv32_0;
        else 
            grp_fu_149_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_160_p0_assign_proc : process(or_ln27_fu_319_p2, or_ln27_reg_471, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_160_p0 <= or_ln27_reg_471;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_160_p0 <= or_ln27_fu_319_p2;
        else 
            grp_fu_160_p0 <= "X";
        end if; 
    end process;

    grp_fu_160_p2 <= (grp_fu_160_p0 and grp_fu_1001_p_dout0);
    grp_fu_165_p4 <= p_read14(95 downto 64);
    grp_fu_174_p4 <= p_read14(94 downto 87);
    grp_fu_183_p4 <= p_read14(86 downto 64);
    grp_fu_192_p2 <= "0" when (grp_fu_174_p4 = ap_const_lv8_FF) else "1";
    grp_fu_198_p2 <= "1" when (grp_fu_183_p4 = ap_const_lv23_0) else "0";
    grp_fu_204_p4 <= p_read14(127 downto 96);
    grp_fu_213_p4 <= p_read14(126 downto 119);
    grp_fu_222_p4 <= p_read14(118 downto 96);
    grp_fu_231_p2 <= "0" when (grp_fu_213_p4 = ap_const_lv8_FF) else "1";
    grp_fu_237_p2 <= "1" when (grp_fu_222_p4 = ap_const_lv23_0) else "0";
    grp_fu_928_p_ce <= ap_const_logic_1;
    grp_fu_928_p_din0 <= grp_fu_121_p0;
    grp_fu_928_p_din1 <= grp_fu_121_p1;
    grp_fu_928_p_opcode <= ap_const_lv2_0;
    grp_fu_932_p_ce <= ap_const_logic_1;
    grp_fu_932_p_din0 <= reg_250;
    grp_fu_932_p_din1 <= reg_250;
    grp_fu_932_p_opcode <= ap_const_lv2_0;
    grp_fu_940_p_ce <= ap_const_logic_1;
    grp_fu_940_p_din0 <= grp_fu_129_p0;
    grp_fu_940_p_din1 <= grp_fu_129_p1;
    grp_fu_945_p_ce <= ap_const_logic_1;
    grp_fu_945_p_din0 <= grp_fu_134_p0;
    grp_fu_945_p_din1 <= grp_fu_134_p1;
    grp_fu_971_p_ce <= ap_const_logic_1;
    grp_fu_971_p_din0 <= bitcast_ln279_fu_394_p1;
    grp_fu_971_p_din1 <= normalizer_reg_462;
    grp_fu_976_p_ce <= ap_const_logic_1;
    grp_fu_976_p_din0 <= bitcast_ln280_fu_399_p1;
    grp_fu_976_p_din1 <= normalizer_reg_462;
    icmp_ln27_1_fu_307_p2 <= "0" when (tmp_fu_289_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_2_fu_313_p2 <= "1" when (trunc_ln27_8_fu_298_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_268_p2 <= "1" when (trunc_ln27_fu_264_p1 = ap_const_lv32_0) else "0";
    normalizer_fu_284_p1 <= trunc_ln27_1_fu_274_p4;
    or_ln27_1_fu_331_p2 <= (grp_fu_198_p2 or grp_fu_192_p2);
    or_ln27_2_fu_348_p2 <= (grp_fu_237_p2 or grp_fu_231_p2);
    or_ln27_3_fu_365_p2 <= (grp_fu_198_p2 or grp_fu_192_p2);
    or_ln27_4_fu_382_p2 <= (grp_fu_237_p2 or grp_fu_231_p2);
    or_ln27_fu_319_p2 <= (icmp_ln27_2_fu_313_p2 or icmp_ln27_1_fu_307_p2);
        sext_ln0_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_this_p_write_assign_phi_fu_103_p4),32));

    tmp_fu_289_p4 <= p_read14(62 downto 55);
    trunc_ln27_1_fu_274_p4 <= p_read14(63 downto 32);
    trunc_ln27_8_fu_298_p4 <= p_read14(54 downto 32);
    trunc_ln27_fu_264_p1 <= p_read14(32 - 1 downto 0);
end behav;
