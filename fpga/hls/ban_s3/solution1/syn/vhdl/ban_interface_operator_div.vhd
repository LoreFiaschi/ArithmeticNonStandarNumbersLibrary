-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_operator_div is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_928_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_ce : OUT STD_LOGIC;
    grp_fu_932_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_932_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_932_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_932_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_932_p_ce : OUT STD_LOGIC;
    grp_fu_936_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_936_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_936_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_936_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_936_p_ce : OUT STD_LOGIC;
    grp_fu_940_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_940_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_940_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_940_p_ce : OUT STD_LOGIC;
    grp_fu_945_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_945_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_945_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_945_p_ce : OUT STD_LOGIC;
    grp_fu_950_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_950_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_950_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_950_p_ce : OUT STD_LOGIC;
    grp_fu_958_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_958_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_958_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_958_p_ce : OUT STD_LOGIC;
    grp_fu_963_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_963_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_963_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_963_p_ce : OUT STD_LOGIC;
    grp_fu_967_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_967_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_967_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_967_p_ce : OUT STD_LOGIC;
    grp_fu_971_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_971_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_971_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_971_p_ce : OUT STD_LOGIC;
    grp_fu_976_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_976_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_976_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_976_p_ce : OUT STD_LOGIC );
end;


architecture behav of ban_interface_operator_div is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (59 downto 0) := "000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (59 downto 0) := "000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (59 downto 0) := "000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (59 downto 0) := "000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (59 downto 0) := "000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (59 downto 0) := "000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (59 downto 0) := "000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (59 downto 0) := "000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (59 downto 0) := "000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (59 downto 0) := "001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (59 downto 0) := "010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (59 downto 0) := "100000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln172_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln172_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal normalizer_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal normalizer_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln143_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln143_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln144_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln144_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln143_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bitcast_ln144_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul15_i3_i_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul12_i2_i_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul15_i4_i_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul19_i4_i_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_1_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal and_ln32_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal c_p_3_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_agg_result_0_0_phi_fu_60_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_0_0_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_1_0_0_reg_71 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_1_fu_512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_1_1_0_reg_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_1_2_0_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_2_fu_521_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_117_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_117_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_122_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_122_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_130_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_135_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_165_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_267_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_277_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_21_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_309_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_323_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_fu_339_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_372_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_382_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_413_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_fu_423_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_1_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln43_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln43_fu_470_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln43_1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln43_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_p_2_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U25 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_165_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_165_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                    ap_return_0_preg <= ap_phi_mux_agg_result_0_0_phi_fu_60_p8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                    ap_return_1_preg <= ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                    ap_return_2_preg <= ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                    ap_return_3_preg <= ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8;
                end if; 
            end if;
        end if;
    end process;


    agg_result_0_0_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln35_reg_644) and (ap_const_lv1_1 = and_ln32_reg_640) and (ap_const_lv1_0 = and_ln27_reg_564) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                agg_result_0_0_reg_56 <= select_ln43_fu_503_p3;
            elsif (((ap_const_lv1_0 = and_ln35_fu_445_p2) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                agg_result_0_0_reg_56 <= c_p_3_fu_451_p2;
            elsif (((ap_const_lv1_0 = and_ln32_fu_404_p2) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                agg_result_0_0_reg_56 <= c_p_fu_363_p2;
            elsif (((ap_const_lv1_1 = and_ln27_fu_299_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                agg_result_0_0_reg_56 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    agg_result_1_0_0_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln35_reg_644) and (ap_const_lv1_1 = and_ln32_reg_640) and (ap_const_lv1_0 = and_ln27_reg_564) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                agg_result_1_0_0_reg_71 <= select_ln43_1_fu_512_p3;
            elsif (((ap_const_lv1_0 = and_ln35_fu_445_p2) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                agg_result_1_0_0_reg_71 <= c_num_1_reg_626;
            elsif (((ap_const_lv1_0 = and_ln32_fu_404_p2) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                agg_result_1_0_0_reg_71 <= reg_171;
            elsif (((ap_const_lv1_1 = and_ln27_fu_299_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                agg_result_1_0_0_reg_71 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    agg_result_1_1_0_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln35_fu_445_p2) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                agg_result_1_1_0_reg_86 <= reg_182;
            elsif ((((ap_const_lv1_1 = and_ln35_reg_644) and (ap_const_lv1_1 = and_ln32_reg_640) and (ap_const_lv1_0 = and_ln27_reg_564) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_lv1_0 = and_ln32_fu_404_p2) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
                agg_result_1_1_0_reg_86 <= c_num_1_reg_626;
            elsif (((ap_const_lv1_1 = and_ln27_fu_299_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                agg_result_1_1_0_reg_86 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    agg_result_1_2_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln35_reg_644) and (ap_const_lv1_1 = and_ln32_reg_640) and (ap_const_lv1_0 = and_ln27_reg_564) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                agg_result_1_2_0_reg_101 <= select_ln43_2_fu_521_p3;
            elsif (((ap_const_lv1_0 = and_ln32_fu_404_p2) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                agg_result_1_2_0_reg_101 <= reg_182;
            elsif ((((ap_const_lv1_1 = and_ln27_fu_299_p2) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_0 = and_ln35_fu_445_p2) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
                agg_result_1_2_0_reg_101 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_i_reg_606 <= grp_fu_928_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln27_reg_564 <= and_ln27_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                and_ln32_reg_640 <= and_ln32_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                and_ln35_reg_644 <= and_ln35_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                c_num_1_reg_626 <= grp_fu_971_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                mul12_i2_i_reg_611 <= grp_fu_958_p_dout0;
                mul15_i4_i_reg_616 <= grp_fu_963_p_dout0;
                mul19_i4_i_reg_621 <= grp_fu_967_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                mul15_i3_i_reg_601 <= grp_fu_945_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln27_fu_299_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                normalizer_reg_575 <= normalizer_fu_319_p1;
                trunc_ln172_reg_568 <= trunc_ln172_fu_305_p1;
                xor_ln143_reg_581 <= xor_ln143_fu_333_p2;
                xor_ln144_reg_586 <= xor_ln144_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_171 <= grp_fu_971_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state57))) then
                reg_182 <= grp_fu_976_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_192 <= grp_fu_940_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_203 <= grp_fu_928_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_212 <= grp_fu_945_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_218 <= grp_fu_940_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_224 <= grp_fu_928_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state36))) then
                reg_232 <= grp_fu_928_p_dout0;
                reg_237 <= grp_fu_950_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_243 <= grp_fu_932_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_251 <= grp_fu_936_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state44))) then
                reg_258 <= grp_fu_932_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, and_ln27_fu_299_p2, ap_CS_fsm_state2, ap_CS_fsm_state58, and_ln32_fu_404_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_1 = and_ln27_fu_299_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((ap_const_lv1_0 = and_ln32_fu_404_p2) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln27_fu_299_p2 <= (or_ln27_fu_293_p2 and grp_fu_165_p2);
    and_ln32_fu_404_p2 <= (or_ln32_fu_398_p2 and grp_fu_165_p2);
    and_ln35_fu_445_p2 <= (or_ln35_fu_439_p2 and grp_fu_165_p2);
    and_ln43_fu_492_p2 <= (or_ln43_fu_486_p2 and grp_fu_165_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_agg_result_0_0_phi_fu_60_p8_assign_proc : process(and_ln27_reg_564, and_ln32_reg_640, and_ln35_reg_644, agg_result_0_0_reg_56, select_ln43_fu_503_p3, ap_CS_fsm_state60)
    begin
        if (((ap_const_lv1_1 = and_ln35_reg_644) and (ap_const_lv1_1 = and_ln32_reg_640) and (ap_const_lv1_0 = and_ln27_reg_564) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            ap_phi_mux_agg_result_0_0_phi_fu_60_p8 <= select_ln43_fu_503_p3;
        else 
            ap_phi_mux_agg_result_0_0_phi_fu_60_p8 <= agg_result_0_0_reg_56;
        end if; 
    end process;


    ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8_assign_proc : process(and_ln27_reg_564, and_ln32_reg_640, and_ln35_reg_644, ap_CS_fsm_state60, agg_result_1_0_0_reg_71, select_ln43_1_fu_512_p3)
    begin
        if (((ap_const_lv1_1 = and_ln35_reg_644) and (ap_const_lv1_1 = and_ln32_reg_640) and (ap_const_lv1_0 = and_ln27_reg_564) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8 <= select_ln43_1_fu_512_p3;
        else 
            ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8 <= agg_result_1_0_0_reg_71;
        end if; 
    end process;


    ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8_assign_proc : process(and_ln27_reg_564, c_num_1_reg_626, and_ln32_reg_640, and_ln35_reg_644, ap_CS_fsm_state60, agg_result_1_1_0_reg_86)
    begin
        if (((ap_const_lv1_1 = and_ln35_reg_644) and (ap_const_lv1_1 = and_ln32_reg_640) and (ap_const_lv1_0 = and_ln27_reg_564) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8 <= c_num_1_reg_626;
        else 
            ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8 <= agg_result_1_1_0_reg_86;
        end if; 
    end process;


    ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8_assign_proc : process(and_ln27_reg_564, and_ln32_reg_640, and_ln35_reg_644, ap_CS_fsm_state60, agg_result_1_2_0_reg_101, select_ln43_2_fu_521_p3)
    begin
        if (((ap_const_lv1_1 = and_ln35_reg_644) and (ap_const_lv1_1 = and_ln32_reg_640) and (ap_const_lv1_0 = and_ln27_reg_564) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8 <= select_ln43_2_fu_521_p3;
        else 
            ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8 <= agg_result_1_2_0_reg_101;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_phi_mux_agg_result_0_0_phi_fu_60_p8, ap_CS_fsm_state60, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ap_return_0 <= ap_phi_mux_agg_result_0_0_phi_fu_60_p8;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state60, ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ap_return_1 <= ap_phi_mux_agg_result_1_0_0_phi_fu_75_p8;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state60, ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ap_return_2 <= ap_phi_mux_agg_result_1_1_0_phi_fu_90_p8;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state60, ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ap_return_3 <= ap_phi_mux_agg_result_1_2_0_phi_fu_105_p8;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    bitcast_ln143_fu_355_p1 <= xor_ln143_reg_581;
    bitcast_ln144_fu_359_p1 <= xor_ln144_reg_586;
    bitcast_ln27_fu_264_p1 <= n;
    bitcast_ln32_fu_368_p1 <= reg_171;
    bitcast_ln35_fu_410_p1 <= c_num_1_reg_626;
    bitcast_ln43_fu_456_p1 <= reg_182;
    c_p_2_fu_498_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) - signed(trunc_ln172_reg_568));
    c_p_3_fu_451_p2 <= (trunc_ln172_reg_568 xor ap_const_lv32_FFFFFFFF);
    c_p_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_ln172_reg_568));

    grp_fu_117_p0_assign_proc : process(reg_192, reg_203, ap_CS_fsm_state33, ap_CS_fsm_state37, reg_212, ap_CS_fsm_state29, reg_218, reg_224, ap_CS_fsm_state26, reg_243, reg_258, add_i_reg_606, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state41, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_117_p0 <= reg_243;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_117_p0 <= reg_258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_117_p0 <= reg_224;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_117_p0 <= add_i_reg_606;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_117_p0 <= reg_218;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_117_p0 <= reg_212;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_117_p0 <= reg_203;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_117_p0 <= reg_192;
        else 
            grp_fu_117_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_117_p1_assign_proc : process(n, reg_192, reg_203, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state29, ap_CS_fsm_state26, reg_237, reg_243, mul15_i3_i_reg_601, mul19_i4_i_reg_621, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state41, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_117_p1 <= reg_203;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_117_p1 <= mul19_i4_i_reg_621;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_117_p1 <= reg_237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_117_p1 <= reg_243;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_117_p1 <= n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_117_p1 <= mul15_i3_i_reg_601;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_117_p1 <= reg_192;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_117_p1 <= ap_const_lv32_0;
        else 
            grp_fu_117_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_122_p0_assign_proc : process(reg_203, ap_CS_fsm_state37, reg_218, mul12_i2_i_reg_611, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_122_p0 <= mul12_i2_i_reg_611;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_122_p0 <= reg_203;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_122_p0 <= reg_218;
        else 
            grp_fu_122_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_122_p1_assign_proc : process(ap_CS_fsm_state37, reg_212, reg_224, reg_251, mul15_i4_i_reg_616, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_122_p1 <= reg_224;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_122_p1 <= mul15_i4_i_reg_616;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_122_p1 <= reg_251;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_122_p1 <= reg_212;
        else 
            grp_fu_122_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_126_p1_assign_proc : process(reg_192, ap_CS_fsm_state37, reg_237, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_126_p1 <= reg_192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_126_p1 <= reg_237;
        else 
            grp_fu_126_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_130_p0_assign_proc : process(n, reg_171, reg_182, reg_192, reg_203, reg_224, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_130_p0 <= reg_192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_130_p0 <= reg_224;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_130_p0 <= reg_203;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_130_p0 <= n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_130_p0 <= reg_171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_130_p0 <= reg_182;
        else 
            grp_fu_130_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_130_p1_assign_proc : process(n, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_130_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_130_p1 <= n;
        else 
            grp_fu_130_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_135_p0_assign_proc : process(reg_171, reg_192, reg_243, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state20, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_135_p0 <= reg_243;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_135_p0 <= reg_192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_135_p0 <= reg_171;
        else 
            grp_fu_135_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_135_p1_assign_proc : process(n, reg_171, reg_182, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state20, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_135_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_135_p1 <= reg_171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_135_p1 <= reg_182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_135_p1 <= n;
        else 
            grp_fu_135_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_139_p0_assign_proc : process(reg_192, reg_224, ap_CS_fsm_state34, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_139_p0 <= reg_192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_139_p0 <= reg_224;
        else 
            grp_fu_139_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_157_p0_assign_proc : process(ap_CS_fsm_state48, reg_251, reg_258, bitcast_ln143_fu_355_p1, ap_CS_fsm_state3, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_157_p0 <= reg_258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_157_p0 <= reg_251;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_157_p0 <= bitcast_ln143_fu_355_p1;
        else 
            grp_fu_157_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_161_p0_assign_proc : process(reg_203, ap_CS_fsm_state3, bitcast_ln144_fu_359_p1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_161_p0 <= reg_203;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_161_p0 <= bitcast_ln144_fu_359_p1;
        else 
            grp_fu_161_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_165_p0_assign_proc : process(ap_CS_fsm_state1, n, reg_171, reg_182, ap_CS_fsm_state57, c_num_1_reg_626, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_165_p0 <= reg_182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_165_p0 <= c_num_1_reg_626;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_165_p0 <= reg_171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_165_p0 <= n;
        else 
            grp_fu_165_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_928_p_ce <= ap_const_logic_1;
    grp_fu_928_p_din0 <= grp_fu_117_p0;
    grp_fu_928_p_din1 <= grp_fu_117_p1;
    grp_fu_928_p_opcode <= ap_const_lv2_0;
    grp_fu_932_p_ce <= ap_const_logic_1;
    grp_fu_932_p_din0 <= grp_fu_122_p0;
    grp_fu_932_p_din1 <= grp_fu_122_p1;
    grp_fu_932_p_opcode <= ap_const_lv2_0;
    grp_fu_936_p_ce <= ap_const_logic_1;
    grp_fu_936_p_din0 <= reg_232;
    grp_fu_936_p_din1 <= grp_fu_126_p1;
    grp_fu_936_p_opcode <= ap_const_lv2_0;
    grp_fu_940_p_ce <= ap_const_logic_1;
    grp_fu_940_p_din0 <= grp_fu_130_p0;
    grp_fu_940_p_din1 <= grp_fu_130_p1;
    grp_fu_945_p_ce <= ap_const_logic_1;
    grp_fu_945_p_din0 <= grp_fu_135_p0;
    grp_fu_945_p_din1 <= grp_fu_135_p1;
    grp_fu_950_p_ce <= ap_const_logic_1;
    grp_fu_950_p_din0 <= grp_fu_139_p0;
    grp_fu_950_p_din1 <= reg_171;
    grp_fu_958_p_ce <= ap_const_logic_1;
    grp_fu_958_p_din0 <= reg_251;
    grp_fu_958_p_din1 <= ap_const_lv32_0;
    grp_fu_963_p_ce <= ap_const_logic_1;
    grp_fu_963_p_din0 <= reg_192;
    grp_fu_963_p_din1 <= reg_182;
    grp_fu_967_p_ce <= ap_const_logic_1;
    grp_fu_967_p_din0 <= reg_243;
    grp_fu_967_p_din1 <= reg_171;
    grp_fu_971_p_ce <= ap_const_logic_1;
    grp_fu_971_p_din0 <= grp_fu_157_p0;
    grp_fu_971_p_din1 <= normalizer_reg_575;
    grp_fu_976_p_ce <= ap_const_logic_1;
    grp_fu_976_p_din0 <= grp_fu_161_p0;
    grp_fu_976_p_din1 <= normalizer_reg_575;
    icmp_ln27_21_fu_287_p2 <= "1" when (trunc_ln27_fu_277_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_281_p2 <= "0" when (tmp_fu_267_p4 = ap_const_lv8_FF) else "1";
    icmp_ln32_1_fu_392_p2 <= "1" when (trunc_ln32_fu_382_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_386_p2 <= "0" when (tmp_24_fu_372_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_1_fu_433_p2 <= "1" when (trunc_ln35_fu_423_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_fu_427_p2 <= "0" when (tmp_26_fu_413_p4 = ap_const_lv8_FF) else "1";
    icmp_ln43_1_fu_480_p2 <= "1" when (trunc_ln43_fu_470_p1 = ap_const_lv23_0) else "0";
    icmp_ln43_fu_474_p2 <= "0" when (tmp_28_fu_460_p4 = ap_const_lv8_FF) else "1";
    normalizer_fu_319_p1 <= trunc_ln_fu_309_p4;
    or_ln27_fu_293_p2 <= (icmp_ln27_fu_281_p2 or icmp_ln27_21_fu_287_p2);
    or_ln32_fu_398_p2 <= (icmp_ln32_fu_386_p2 or icmp_ln32_1_fu_392_p2);
    or_ln35_fu_439_p2 <= (icmp_ln35_fu_427_p2 or icmp_ln35_1_fu_433_p2);
    or_ln43_fu_486_p2 <= (icmp_ln43_fu_474_p2 or icmp_ln43_1_fu_480_p2);
    select_ln43_1_fu_512_p3 <= 
        reg_171 when (and_ln43_fu_492_p2(0) = '1') else 
        reg_182;
    select_ln43_2_fu_521_p3 <= 
        reg_182 when (and_ln43_fu_492_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln43_fu_503_p3 <= 
        ap_const_lv32_0 when (and_ln43_fu_492_p2(0) = '1') else 
        c_p_2_fu_498_p2;
    tmp_24_fu_372_p4 <= bitcast_ln32_fu_368_p1(30 downto 23);
    tmp_26_fu_413_p4 <= bitcast_ln35_fu_410_p1(30 downto 23);
    tmp_28_fu_460_p4 <= bitcast_ln43_fu_456_p1(30 downto 23);
    tmp_fu_267_p4 <= bitcast_ln27_fu_264_p1(30 downto 23);
    trunc_ln172_fu_305_p1 <= p_read14(32 - 1 downto 0);
    trunc_ln1_fu_323_p4 <= p_read14(95 downto 64);
    trunc_ln27_fu_277_p1 <= bitcast_ln27_fu_264_p1(23 - 1 downto 0);
    trunc_ln2_fu_339_p4 <= p_read14(127 downto 96);
    trunc_ln32_fu_382_p1 <= bitcast_ln32_fu_368_p1(23 - 1 downto 0);
    trunc_ln35_fu_423_p1 <= bitcast_ln35_fu_410_p1(23 - 1 downto 0);
    trunc_ln43_fu_470_p1 <= bitcast_ln43_fu_456_p1(23 - 1 downto 0);
    trunc_ln_fu_309_p4 <= p_read14(63 downto 32);
    xor_ln143_fu_333_p2 <= (trunc_ln1_fu_323_p4 xor ap_const_lv32_80000000);
    xor_ln144_fu_349_p2 <= (trunc_ln2_fu_339_p4 xor ap_const_lv32_80000000);
end behav;
