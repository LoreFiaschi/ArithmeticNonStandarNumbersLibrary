-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_operator_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read14 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ban_interface_operator_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln27_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln27_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_47_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_47_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_48_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_48_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln27_18_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_49_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_49_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_50_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_50_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln27_19_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_51_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_51_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_52_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_52_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_9_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_9_reg_963 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln27_20_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_53_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_53_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_54_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_54_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln27_21_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_55_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_55_reg_994 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_56_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_56_reg_999 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln27_22_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_57_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_57_reg_1010 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_58_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_58_reg_1015 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_35_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_35_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_ln27_27_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_27_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_88_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_i_i_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_92_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_i_i_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul12_i_i_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul15_i_i_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul19_i_i_reg_1069 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_5_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add16_i_i_reg_1083 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_6_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_76_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_96_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_113_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_118_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln27_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln27_s_fu_148_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_166_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_24_fu_176_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln27_25_fu_198_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_215_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_26_fu_225_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln27_27_fu_247_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_263_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_28_fu_273_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln27_5_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln27_29_fu_305_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_fu_323_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_30_fu_333_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln27_31_fu_355_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_fu_372_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_32_fu_382_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln27_33_fu_404_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_420_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_34_fu_430_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln27_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_21_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_22_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_23_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_24_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_28_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_29_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_30_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_25_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_26_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_27_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_33_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_32_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_34_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_31_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_5_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_5_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_26_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_4_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_6_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_40_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_41_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal bitcast_ln32_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_fu_602_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_612_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_4_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_649_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_fu_659_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_4_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln43_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_701_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln43_fu_711_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln43_4_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln43_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_36_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_37_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_4_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_38_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln43_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_39_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_res_7_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_8_fu_784_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_10_fu_798_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_11_fu_804_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln27_28_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_29_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_p_8_fu_745_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_7_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_42_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_1_fu_841_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_2_fu_848_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln27_30_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_31_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_3_fu_861_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_fu_875_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_9_fu_791_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_12_fu_811_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_4_full_dsp_1_U64 : component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_76_p0,
        din1 => grp_fu_76_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_76_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U65 : component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul12_i_i_reg_1059,
        din1 => mul15_i_i_reg_1064,
        ce => ap_const_logic_1,
        dout => grp_fu_80_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U66 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln27_fu_158_p1,
        din1 => bitcast_ln27_20_fu_315_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_84_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U67 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln27_18_fu_208_p1,
        din1 => bitcast_ln27_20_fu_315_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_88_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U68 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln27_fu_158_p1,
        din1 => bitcast_ln27_21_fu_365_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_92_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U69 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_96_p0,
        din1 => bitcast_ln27_20_fu_315_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_96_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U70 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln27_fu_158_p1,
        din1 => bitcast_ln27_22_fu_414_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_100_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U71 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln27_18_fu_208_p1,
        din1 => bitcast_ln27_21_fu_365_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_104_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U72 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_108_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_108_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U73 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_113_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_113_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U74 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_118_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_118_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U75 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln27_20_fu_315_p1,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_123_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U76 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln27_21_fu_365_p1,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_128_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U77 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln27_22_fu_414_p1,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_133_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_return_0_preg <= c_p_fu_875_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_return_1_preg <= num_res_9_fu_791_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_return_2_preg <= num_res_12_fu_811_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_return_3_preg <= select_ln27_fu_829_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add16_i_i_reg_1083 <= grp_fu_80_p2;
                num_res_5_reg_1074 <= grp_fu_76_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln27_35_reg_1027 <= and_ln27_35_fu_570_p2;
                or_ln27_27_reg_1034 <= or_ln27_27_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln27_47_reg_920 <= icmp_ln27_47_fu_186_p2;
                icmp_ln27_48_reg_925 <= icmp_ln27_48_fu_192_p2;
                icmp_ln27_49_reg_937 <= icmp_ln27_49_fu_235_p2;
                icmp_ln27_50_reg_942 <= icmp_ln27_50_fu_241_p2;
                icmp_ln27_51_reg_953 <= icmp_ln27_51_fu_283_p2;
                icmp_ln27_52_reg_958 <= icmp_ln27_52_fu_289_p2;
                icmp_ln27_53_reg_977 <= icmp_ln27_53_fu_343_p2;
                icmp_ln27_54_reg_982 <= icmp_ln27_54_fu_349_p2;
                icmp_ln27_55_reg_994 <= icmp_ln27_55_fu_392_p2;
                icmp_ln27_56_reg_999 <= icmp_ln27_56_fu_398_p2;
                icmp_ln27_57_reg_1010 <= icmp_ln27_57_fu_440_p2;
                icmp_ln27_58_reg_1015 <= icmp_ln27_58_fu_446_p2;
                icmp_ln27_9_reg_963 <= icmp_ln27_9_fu_299_p2;
                icmp_ln27_reg_907 <= icmp_ln27_fu_142_p2;
                p_reg_1020 <= p_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul12_i_i_reg_1059 <= grp_fu_96_p2;
                mul15_i_i_reg_1064 <= grp_fu_100_p2;
                mul19_i_i_reg_1069 <= grp_fu_104_p2;
                mul5_i_i_reg_1049 <= grp_fu_88_p2;
                mul8_i_i_reg_1054 <= grp_fu_92_p2;
                num_res_reg_1042 <= grp_fu_84_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                num_res_6_reg_1088 <= grp_fu_76_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    and_ln27_26_fu_472_p2 <= (or_ln27_21_fu_468_p2 and grp_fu_113_p2);
    and_ln27_27_fu_482_p2 <= (or_ln27_22_fu_478_p2 and grp_fu_118_p2);
    and_ln27_28_fu_492_p2 <= (or_ln27_23_fu_488_p2 and grp_fu_123_p2);
    and_ln27_29_fu_502_p2 <= (or_ln27_24_fu_498_p2 and grp_fu_128_p2);
    and_ln27_30_fu_508_p2 <= (and_ln27_29_fu_502_p2 and and_ln27_28_fu_492_p2);
    and_ln27_31_fu_529_p2 <= (or_ln27_25_fu_525_p2 and grp_fu_133_p2);
    and_ln27_32_fu_535_p2 <= (icmp_ln27_reg_907 and and_ln27_fu_462_p2);
    and_ln27_33_fu_540_p2 <= (and_ln27_27_fu_482_p2 and and_ln27_26_fu_472_p2);
    and_ln27_34_fu_546_p2 <= (and_ln27_33_fu_540_p2 and and_ln27_32_fu_535_p2);
    and_ln27_35_fu_570_p2 <= (xor_ln27_4_fu_552_p2 and or_ln27_26_fu_564_p2);
    and_ln27_36_fu_750_p2 <= (and_ln32_fu_634_p2 and and_ln27_35_reg_1027);
    and_ln27_37_fu_755_p2 <= (xor_ln35_fu_687_p2 and and_ln27_36_fu_750_p2);
    and_ln27_38_fu_773_p2 <= (and_ln35_4_fu_767_p2 and and_ln27_35_reg_1027);
    and_ln27_39_fu_778_p2 <= (xor_ln43_fu_739_p2 and and_ln27_38_fu_773_p2);
    and_ln27_40_fu_581_p2 <= (xor_ln27_6_fu_576_p2 and and_ln27_30_fu_508_p2);
    and_ln27_41_fu_587_p2 <= (and_ln27_40_fu_581_p2 and and_ln27_31_fu_529_p2);
    and_ln27_42_fu_836_p2 <= (xor_ln32_fu_640_p2 and and_ln27_35_reg_1027);
    and_ln27_fu_462_p2 <= (or_ln27_fu_458_p2 and grp_fu_108_p2);
    and_ln32_fu_634_p2 <= (or_ln32_fu_628_p2 and grp_fu_108_p2);
    and_ln35_4_fu_767_p2 <= (and_ln35_fu_681_p2 and and_ln32_fu_634_p2);
    and_ln35_fu_681_p2 <= (or_ln35_fu_675_p2 and grp_fu_113_p2);
    and_ln43_fu_733_p2 <= (or_ln43_fu_727_p2 and grp_fu_118_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state13, c_p_fu_875_p3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_return_0 <= c_p_fu_875_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state13, num_res_9_fu_791_p3, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_return_1 <= num_res_9_fu_791_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state13, num_res_12_fu_811_p3, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_return_2 <= num_res_12_fu_811_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state13, select_ln27_fu_829_p3, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_return_3 <= select_ln27_fu_829_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    bitcast_ln27_18_fu_208_p1 <= trunc_ln27_25_fu_198_p4;
    bitcast_ln27_19_fu_257_p1 <= trunc_ln27_27_fu_247_p4;
    bitcast_ln27_20_fu_315_p1 <= trunc_ln27_29_fu_305_p4;
    bitcast_ln27_21_fu_365_p1 <= trunc_ln27_31_fu_355_p4;
    bitcast_ln27_22_fu_414_p1 <= trunc_ln27_33_fu_404_p4;
    bitcast_ln27_fu_158_p1 <= trunc_ln27_s_fu_148_p4;
    bitcast_ln32_fu_599_p1 <= num_res_reg_1042;
    bitcast_ln35_fu_646_p1 <= num_res_5_reg_1074;
    bitcast_ln43_fu_698_p1 <= num_res_6_reg_1088;
    c_p_7_fu_693_p2 <= std_logic_vector(unsigned(p_reg_1020) + unsigned(ap_const_lv32_FFFFFFFF));
    c_p_8_fu_745_p2 <= std_logic_vector(unsigned(p_reg_1020) + unsigned(ap_const_lv32_FFFFFFFE));
    c_p_fu_875_p3 <= 
        select_ln27_3_fu_861_p3 when (or_ln27_31_fu_869_p2(0) = '1') else 
        ap_const_lv32_0;

    grp_fu_108_p0_assign_proc : process(ap_CS_fsm_state1, bitcast_ln27_fu_158_p1, num_res_reg_1042, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_108_p0 <= num_res_reg_1042;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_108_p0 <= bitcast_ln27_fu_158_p1;
        else 
            grp_fu_108_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_113_p0_assign_proc : process(ap_CS_fsm_state1, bitcast_ln27_18_fu_208_p1, num_res_5_reg_1074, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_113_p0 <= num_res_5_reg_1074;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_113_p0 <= bitcast_ln27_18_fu_208_p1;
        else 
            grp_fu_113_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_118_p0_assign_proc : process(ap_CS_fsm_state1, bitcast_ln27_19_fu_257_p1, num_res_6_reg_1088, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_118_p0 <= num_res_6_reg_1088;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_118_p0 <= bitcast_ln27_19_fu_257_p1;
        else 
            grp_fu_118_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_76_p0_assign_proc : process(mul5_i_i_reg_1049, add16_i_i_reg_1083, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_76_p0 <= add16_i_i_reg_1083;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_76_p0 <= mul5_i_i_reg_1049;
        else 
            grp_fu_76_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_76_p1_assign_proc : process(mul8_i_i_reg_1054, mul19_i_i_reg_1069, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_76_p1 <= mul19_i_i_reg_1069;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_76_p1 <= mul8_i_i_reg_1054;
        else 
            grp_fu_76_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_96_p0 <= trunc_ln27_27_fu_247_p4;
    icmp_ln27_47_fu_186_p2 <= "0" when (tmp_s_fu_166_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_48_fu_192_p2 <= "1" when (trunc_ln27_24_fu_176_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_49_fu_235_p2 <= "0" when (tmp_65_fu_215_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_50_fu_241_p2 <= "1" when (trunc_ln27_26_fu_225_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_51_fu_283_p2 <= "0" when (tmp_67_fu_263_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_52_fu_289_p2 <= "1" when (trunc_ln27_28_fu_273_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_53_fu_343_p2 <= "0" when (tmp_69_fu_323_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_54_fu_349_p2 <= "1" when (trunc_ln27_30_fu_333_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_55_fu_392_p2 <= "0" when (tmp_71_fu_372_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_56_fu_398_p2 <= "1" when (trunc_ln27_32_fu_382_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_57_fu_440_p2 <= "0" when (tmp_fu_420_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_58_fu_446_p2 <= "1" when (trunc_ln27_34_fu_430_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_9_fu_299_p2 <= "0" when (trunc_ln27_5_fu_295_p1 = ap_const_lv32_0) else "1";
    icmp_ln27_fu_142_p2 <= "1" when (trunc_ln27_fu_138_p1 = ap_const_lv32_0) else "0";
    icmp_ln32_4_fu_622_p2 <= "1" when (trunc_ln32_fu_612_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_616_p2 <= "0" when (tmp_74_fu_602_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_4_fu_669_p2 <= "1" when (trunc_ln35_fu_659_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_fu_663_p2 <= "0" when (tmp_76_fu_649_p4 = ap_const_lv8_FF) else "1";
    icmp_ln43_4_fu_721_p2 <= "1" when (trunc_ln43_fu_711_p1 = ap_const_lv23_0) else "0";
    icmp_ln43_fu_715_p2 <= "0" when (tmp_78_fu_701_p4 = ap_const_lv8_FF) else "1";
    num_res_10_fu_798_p3 <= 
        num_res_6_reg_1088 when (and_ln27_37_fu_755_p2(0) = '1') else 
        num_res_5_reg_1074;
    num_res_11_fu_804_p3 <= 
        num_res_5_reg_1074 when (and_ln27_39_fu_778_p2(0) = '1') else 
        num_res_10_fu_798_p3;
    num_res_12_fu_811_p3 <= 
        ap_const_lv32_0 when (or_ln27_27_reg_1034(0) = '1') else 
        num_res_11_fu_804_p3;
    num_res_7_fu_761_p3 <= 
        num_res_5_reg_1074 when (and_ln27_37_fu_755_p2(0) = '1') else 
        num_res_reg_1042;
    num_res_8_fu_784_p3 <= 
        num_res_6_reg_1088 when (and_ln27_39_fu_778_p2(0) = '1') else 
        num_res_7_fu_761_p3;
    num_res_9_fu_791_p3 <= 
        ap_const_lv32_0 when (or_ln27_27_reg_1034(0) = '1') else 
        num_res_8_fu_784_p3;
    or_ln27_21_fu_468_p2 <= (icmp_ln27_50_reg_942 or icmp_ln27_49_reg_937);
    or_ln27_22_fu_478_p2 <= (icmp_ln27_52_reg_958 or icmp_ln27_51_reg_953);
    or_ln27_23_fu_488_p2 <= (icmp_ln27_54_reg_982 or icmp_ln27_53_reg_977);
    or_ln27_24_fu_498_p2 <= (icmp_ln27_56_reg_999 or icmp_ln27_55_reg_994);
    or_ln27_25_fu_525_p2 <= (icmp_ln27_58_reg_1015 or icmp_ln27_57_reg_1010);
    or_ln27_26_fu_564_p2 <= (xor_ln27_5_fu_558_p2 or or_ln27_5_fu_520_p2);
    or_ln27_27_fu_593_p2 <= (and_ln27_41_fu_587_p2 or and_ln27_34_fu_546_p2);
    or_ln27_28_fu_818_p2 <= (or_ln27_27_reg_1034 or and_ln27_39_fu_778_p2);
    or_ln27_29_fu_823_p2 <= (or_ln27_28_fu_818_p2 or and_ln27_37_fu_755_p2);
    or_ln27_30_fu_855_p2 <= (and_ln27_42_fu_836_p2 or and_ln27_37_fu_755_p2);
    or_ln27_31_fu_869_p2 <= (or_ln27_30_fu_855_p2 or or_ln27_28_fu_818_p2);
    or_ln27_5_fu_520_p2 <= (xor_ln27_fu_514_p2 or icmp_ln27_9_reg_963);
    or_ln27_fu_458_p2 <= (icmp_ln27_48_reg_925 or icmp_ln27_47_reg_920);
    or_ln32_fu_628_p2 <= (icmp_ln32_fu_616_p2 or icmp_ln32_4_fu_622_p2);
    or_ln35_fu_675_p2 <= (icmp_ln35_fu_663_p2 or icmp_ln35_4_fu_669_p2);
    or_ln43_fu_727_p2 <= (icmp_ln43_fu_715_p2 or icmp_ln43_4_fu_721_p2);
    p_fu_452_p2 <= std_logic_vector(unsigned(trunc_ln27_5_fu_295_p1) + unsigned(trunc_ln27_fu_138_p1));
    select_ln27_1_fu_841_p3 <= 
        ap_const_lv32_0 when (or_ln27_27_reg_1034(0) = '1') else 
        c_p_8_fu_745_p2;
    select_ln27_2_fu_848_p3 <= 
        c_p_7_fu_693_p2 when (and_ln27_37_fu_755_p2(0) = '1') else 
        p_reg_1020;
    select_ln27_3_fu_861_p3 <= 
        select_ln27_1_fu_841_p3 when (or_ln27_28_fu_818_p2(0) = '1') else 
        select_ln27_2_fu_848_p3;
    select_ln27_fu_829_p3 <= 
        ap_const_lv32_0 when (or_ln27_29_fu_823_p2(0) = '1') else 
        num_res_6_reg_1088;
    tmp_65_fu_215_p4 <= p_read14(94 downto 87);
    tmp_67_fu_263_p4 <= p_read14(126 downto 119);
    tmp_69_fu_323_p4 <= p_read25(62 downto 55);
    tmp_71_fu_372_p4 <= p_read25(94 downto 87);
    tmp_74_fu_602_p4 <= bitcast_ln32_fu_599_p1(30 downto 23);
    tmp_76_fu_649_p4 <= bitcast_ln35_fu_646_p1(30 downto 23);
    tmp_78_fu_701_p4 <= bitcast_ln43_fu_698_p1(30 downto 23);
    tmp_fu_420_p4 <= p_read25(126 downto 119);
    tmp_s_fu_166_p4 <= p_read14(62 downto 55);
    trunc_ln27_24_fu_176_p4 <= p_read14(54 downto 32);
    trunc_ln27_25_fu_198_p4 <= p_read14(95 downto 64);
    trunc_ln27_26_fu_225_p4 <= p_read14(86 downto 64);
    trunc_ln27_27_fu_247_p4 <= p_read14(127 downto 96);
    trunc_ln27_28_fu_273_p4 <= p_read14(118 downto 96);
    trunc_ln27_29_fu_305_p4 <= p_read25(63 downto 32);
    trunc_ln27_30_fu_333_p4 <= p_read25(54 downto 32);
    trunc_ln27_31_fu_355_p4 <= p_read25(95 downto 64);
    trunc_ln27_32_fu_382_p4 <= p_read25(86 downto 64);
    trunc_ln27_33_fu_404_p4 <= p_read25(127 downto 96);
    trunc_ln27_34_fu_430_p4 <= p_read25(118 downto 96);
    trunc_ln27_5_fu_295_p1 <= p_read25(32 - 1 downto 0);
    trunc_ln27_fu_138_p1 <= p_read14(32 - 1 downto 0);
    trunc_ln27_s_fu_148_p4 <= p_read14(63 downto 32);
    trunc_ln32_fu_612_p1 <= bitcast_ln32_fu_599_p1(23 - 1 downto 0);
    trunc_ln35_fu_659_p1 <= bitcast_ln35_fu_646_p1(23 - 1 downto 0);
    trunc_ln43_fu_711_p1 <= bitcast_ln43_fu_698_p1(23 - 1 downto 0);
    xor_ln27_4_fu_552_p2 <= (ap_const_lv1_1 xor and_ln27_34_fu_546_p2);
    xor_ln27_5_fu_558_p2 <= (ap_const_lv1_1 xor and_ln27_31_fu_529_p2);
    xor_ln27_6_fu_576_p2 <= (icmp_ln27_9_reg_963 xor ap_const_lv1_1);
    xor_ln27_fu_514_p2 <= (ap_const_lv1_1 xor and_ln27_30_fu_508_p2);
    xor_ln32_fu_640_p2 <= (ap_const_lv1_1 xor and_ln32_fu_634_p2);
    xor_ln35_fu_687_p2 <= (ap_const_lv1_1 xor and_ln35_fu_681_p2);
    xor_ln43_fu_739_p2 <= (ap_const_lv1_1 xor and_ln43_fu_733_p2);
end behav;
