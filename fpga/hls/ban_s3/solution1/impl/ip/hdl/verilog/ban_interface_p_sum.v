// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_p_sum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read14,
        p_read25,
        diff_p,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] p_read14;
input  [127:0] p_read25;
input  [1:0] diff_p;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_68_p2;
reg   [31:0] reg_95;
wire    ap_CS_fsm_state5;
reg   [0:0] icmp_ln53_3_reg_595;
reg   [0:0] icmp_ln53_2_reg_587;
wire   [31:0] c_p_fu_99_p1;
reg   [31:0] c_p_reg_538;
wire   [31:0] bitcast_ln51_fu_113_p1;
reg   [31:0] bitcast_ln51_reg_545;
wire   [31:0] bitcast_ln51_2_fu_128_p1;
reg   [31:0] bitcast_ln51_2_reg_552;
wire   [31:0] bitcast_ln51_3_fu_143_p1;
reg   [31:0] bitcast_ln51_3_reg_559;
wire   [31:0] bitcast_ln55_fu_158_p1;
reg   [31:0] bitcast_ln55_reg_566;
wire   [31:0] bitcast_ln65_fu_173_p1;
reg   [31:0] bitcast_ln65_reg_571;
wire   [0:0] and_ln53_fu_205_p2;
reg   [0:0] and_ln53_reg_581;
wire   [0:0] icmp_ln53_2_fu_211_p2;
wire   [0:0] icmp_ln53_3_fu_217_p2;
reg   [31:0] add1_reg_603;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_72_p2;
reg   [31:0] add2_reg_610;
wire   [31:0] grp_fu_76_p2;
reg   [31:0] add3_reg_619;
reg   [31:0] add7_reg_628;
reg   [31:0] grp_fu_68_p0;
reg   [31:0] grp_fu_68_p1;
wire    ap_CS_fsm_state2;
reg   [31:0] grp_fu_72_p0;
reg   [31:0] grp_fu_72_p1;
wire   [31:0] grp_fu_76_p0;
wire   [31:0] grp_fu_76_p1;
wire   [31:0] trunc_ln51_2_fu_103_p4;
wire   [31:0] trunc_ln51_3_fu_118_p4;
wire   [31:0] trunc_ln51_4_fu_133_p4;
wire   [31:0] trunc_ln_fu_148_p4;
wire   [31:0] trunc_ln18_fu_163_p4;
wire   [31:0] trunc_ln19_fu_178_p4;
wire   [0:0] icmp_ln53_fu_193_p2;
wire   [0:0] icmp_ln53_1_fu_199_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] bitcast_ln27_fu_223_p1;
wire   [7:0] tmp_s_fu_226_p4;
wire   [22:0] trunc_ln27_fu_236_p1;
wire   [0:0] icmp_ln27_8_fu_246_p2;
wire   [0:0] icmp_ln27_fu_240_p2;
wire   [0:0] or_ln27_fu_252_p2;
wire   [0:0] grp_fu_80_p2;
wire   [0:0] and_ln27_fu_258_p2;
wire   [31:0] bitcast_ln30_fu_270_p1;
wire   [7:0] tmp_179_fu_273_p4;
wire   [22:0] trunc_ln30_fu_283_p1;
wire   [0:0] icmp_ln30_8_fu_293_p2;
wire   [0:0] icmp_ln30_fu_287_p2;
wire   [0:0] or_ln30_fu_299_p2;
wire   [0:0] grp_fu_85_p2;
wire   [0:0] and_ln30_fu_305_p2;
wire   [31:0] bitcast_ln38_fu_317_p1;
wire   [7:0] tmp_181_fu_320_p4;
wire   [22:0] trunc_ln38_fu_330_p1;
wire   [0:0] icmp_ln38_8_fu_340_p2;
wire   [0:0] icmp_ln38_fu_334_p2;
wire   [0:0] or_ln38_fu_346_p2;
wire   [0:0] grp_fu_90_p2;
wire   [0:0] and_ln38_fu_352_p2;
wire   [0:0] and_ln27_4_fu_364_p2;
wire   [0:0] xor_ln30_fu_311_p2;
wire   [0:0] and_ln30_4_fu_369_p2;
wire   [0:0] xor_ln38_fu_358_p2;
wire   [0:0] and_ln38_4_fu_381_p2;
wire   [0:0] and_ln38_5_fu_387_p2;
wire   [31:0] select_ln30_fu_375_p3;
wire   [31:0] select_ln38_fu_393_p3;
wire   [31:0] select_ln53_fu_400_p3;
wire   [31:0] select_ln30_3_fu_412_p3;
wire   [31:0] select_ln38_12_fu_418_p3;
wire   [31:0] select_ln53_2_fu_425_p3;
wire   [0:0] or_ln38_4_fu_438_p2;
wire   [31:0] select_ln38_13_fu_444_p3;
wire   [31:0] select_ln53_4_fu_451_p3;
wire   [0:0] xor_ln27_fu_264_p2;
wire   [31:0] select_ln53_6_fu_473_p3;
wire   [0:0] and_ln27_5_fu_464_p2;
wire   [0:0] or_ln53_fu_469_p2;
wire   [31:0] add_ln53_fu_481_p2;
wire   [0:0] or_ln53_1_fu_500_p2;
wire   [31:0] select_ln53_8_fu_493_p3;
wire   [31:0] select_ln53_7_fu_486_p3;
wire   [31:0] c_p_8_fu_506_p3;
wire   [31:0] select_ln53_1_fu_406_p3;
wire   [31:0] select_ln53_3_fu_431_p3;
wire   [31:0] select_ln53_5_fu_458_p3;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_68_p0),
    .din1(grp_fu_68_p1),
    .ce(1'b1),
    .dout(grp_fu_68_p2)
);

ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_72_p0),
    .din1(grp_fu_72_p1),
    .ce(1'b1),
    .dout(grp_fu_72_p2)
);

ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_76_p0),
    .din1(grp_fu_76_p1),
    .ce(1'b1),
    .dout(grp_fu_76_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add1_reg_603),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_80_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add2_reg_610),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_85_p2)
);

ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add3_reg_619),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_90_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_0_preg <= c_p_8_fu_506_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_1_preg <= select_ln53_1_fu_406_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_2_preg <= select_ln53_3_fu_431_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_3_preg <= select_ln53_5_fu_458_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add1_reg_603 <= grp_fu_68_p2;
        add2_reg_610 <= grp_fu_72_p2;
        add3_reg_619 <= grp_fu_76_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_3_reg_595 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        add7_reg_628 <= grp_fu_72_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        and_ln53_reg_581 <= and_ln53_fu_205_p2;
        bitcast_ln51_2_reg_552 <= bitcast_ln51_2_fu_128_p1;
        bitcast_ln51_3_reg_559 <= bitcast_ln51_3_fu_143_p1;
        bitcast_ln51_reg_545 <= bitcast_ln51_fu_113_p1;
        bitcast_ln55_reg_566 <= bitcast_ln55_fu_158_p1;
        bitcast_ln65_reg_571 <= bitcast_ln65_fu_173_p1;
        c_p_reg_538 <= c_p_fu_99_p1;
        icmp_ln53_2_reg_587 <= icmp_ln53_2_fu_211_p2;
        icmp_ln53_3_reg_595 <= icmp_ln53_3_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln53_2_reg_587 == 1'd1) & (icmp_ln53_3_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln53_3_reg_595 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_95 <= grp_fu_68_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_0 = c_p_8_fu_506_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_1 = select_ln53_1_fu_406_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_2 = select_ln53_3_fu_431_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_3 = select_ln53_5_fu_458_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((icmp_ln53_2_reg_587 == 1'd1) & (icmp_ln53_3_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_68_p0 = bitcast_ln51_3_reg_559;
    end else if (((icmp_ln53_3_reg_595 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_68_p0 = bitcast_ln51_2_reg_552;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_68_p0 = bitcast_ln51_fu_113_p1;
    end else begin
        grp_fu_68_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln53_2_reg_587 == 1'd1) & (icmp_ln53_3_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln53_3_reg_595 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_68_p1 = bitcast_ln55_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_68_p1 = bitcast_ln55_fu_158_p1;
    end else begin
        grp_fu_68_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_72_p0 = bitcast_ln51_3_reg_559;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_72_p0 = bitcast_ln51_2_fu_128_p1;
    end else begin
        grp_fu_72_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_72_p1 = bitcast_ln65_reg_571;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_72_p1 = bitcast_ln65_fu_173_p1;
    end else begin
        grp_fu_72_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln53_fu_481_p2 = (c_p_reg_538 + select_ln53_6_fu_473_p3);

assign and_ln27_4_fu_364_p2 = (and_ln53_reg_581 & and_ln27_fu_258_p2);

assign and_ln27_5_fu_464_p2 = (xor_ln27_fu_264_p2 & and_ln53_reg_581);

assign and_ln27_fu_258_p2 = (or_ln27_fu_252_p2 & grp_fu_80_p2);

assign and_ln30_4_fu_369_p2 = (xor_ln30_fu_311_p2 & and_ln27_4_fu_364_p2);

assign and_ln30_fu_305_p2 = (or_ln30_fu_299_p2 & grp_fu_85_p2);

assign and_ln38_4_fu_381_p2 = (xor_ln38_fu_358_p2 & and_ln30_fu_305_p2);

assign and_ln38_5_fu_387_p2 = (and_ln38_4_fu_381_p2 & and_ln27_4_fu_364_p2);

assign and_ln38_fu_352_p2 = (or_ln38_fu_346_p2 & grp_fu_90_p2);

assign and_ln53_fu_205_p2 = (icmp_ln53_fu_193_p2 & icmp_ln53_1_fu_199_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln27_fu_223_p1 = add1_reg_603;

assign bitcast_ln30_fu_270_p1 = add2_reg_610;

assign bitcast_ln38_fu_317_p1 = add3_reg_619;

assign bitcast_ln51_2_fu_128_p1 = trunc_ln51_3_fu_118_p4;

assign bitcast_ln51_3_fu_143_p1 = trunc_ln51_4_fu_133_p4;

assign bitcast_ln51_fu_113_p1 = trunc_ln51_2_fu_103_p4;

assign bitcast_ln55_fu_158_p1 = trunc_ln_fu_148_p4;

assign bitcast_ln65_fu_173_p1 = trunc_ln18_fu_163_p4;

assign c_p_8_fu_506_p3 = ((or_ln53_1_fu_500_p2[0:0] == 1'b1) ? select_ln53_8_fu_493_p3 : select_ln53_7_fu_486_p3);

assign c_p_fu_99_p1 = p_read14[31:0];

assign grp_fu_76_p0 = trunc_ln51_4_fu_133_p4;

assign grp_fu_76_p1 = trunc_ln19_fu_178_p4;

assign icmp_ln27_8_fu_246_p2 = ((trunc_ln27_fu_236_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_240_p2 = ((tmp_s_fu_226_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln30_8_fu_293_p2 = ((trunc_ln30_fu_283_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_287_p2 = ((tmp_179_fu_273_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln38_8_fu_340_p2 = ((trunc_ln38_fu_330_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_334_p2 = ((tmp_181_fu_320_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln53_1_fu_199_p2 = ((diff_p != 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln53_2_fu_211_p2 = ((diff_p == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln53_3_fu_217_p2 = ((diff_p == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_193_p2 = ((diff_p != 2'd1) ? 1'b1 : 1'b0);

assign or_ln27_fu_252_p2 = (icmp_ln27_fu_240_p2 | icmp_ln27_8_fu_246_p2);

assign or_ln30_fu_299_p2 = (icmp_ln30_fu_287_p2 | icmp_ln30_8_fu_293_p2);

assign or_ln38_4_fu_438_p2 = (and_ln38_5_fu_387_p2 | and_ln30_4_fu_369_p2);

assign or_ln38_fu_346_p2 = (icmp_ln38_fu_334_p2 | icmp_ln38_8_fu_340_p2);

assign or_ln53_1_fu_500_p2 = (or_ln53_fu_469_p2 | or_ln38_4_fu_438_p2);

assign or_ln53_fu_469_p2 = (icmp_ln53_3_reg_595 | icmp_ln53_2_reg_587);

assign select_ln30_3_fu_412_p3 = ((and_ln30_4_fu_369_p2[0:0] == 1'b1) ? add3_reg_619 : add2_reg_610);

assign select_ln30_fu_375_p3 = ((and_ln30_4_fu_369_p2[0:0] == 1'b1) ? add2_reg_610 : add1_reg_603);

assign select_ln38_12_fu_418_p3 = ((and_ln38_5_fu_387_p2[0:0] == 1'b1) ? add2_reg_610 : select_ln30_3_fu_412_p3);

assign select_ln38_13_fu_444_p3 = ((or_ln38_4_fu_438_p2[0:0] == 1'b1) ? 32'd0 : add3_reg_619);

assign select_ln38_fu_393_p3 = ((and_ln38_5_fu_387_p2[0:0] == 1'b1) ? add3_reg_619 : select_ln30_fu_375_p3);

assign select_ln53_1_fu_406_p3 = ((icmp_ln53_3_reg_595[0:0] == 1'b1) ? bitcast_ln51_reg_545 : select_ln53_fu_400_p3);

assign select_ln53_2_fu_425_p3 = ((icmp_ln53_2_reg_587[0:0] == 1'b1) ? bitcast_ln51_2_reg_552 : select_ln38_12_fu_418_p3);

assign select_ln53_3_fu_431_p3 = ((icmp_ln53_3_reg_595[0:0] == 1'b1) ? reg_95 : select_ln53_2_fu_425_p3);

assign select_ln53_4_fu_451_p3 = ((icmp_ln53_2_reg_587[0:0] == 1'b1) ? reg_95 : select_ln38_13_fu_444_p3);

assign select_ln53_5_fu_458_p3 = ((icmp_ln53_3_reg_595[0:0] == 1'b1) ? add7_reg_628 : select_ln53_4_fu_451_p3);

assign select_ln53_6_fu_473_p3 = ((and_ln38_5_fu_387_p2[0:0] == 1'b1) ? 32'd4294967294 : 32'd4294967295);

assign select_ln53_7_fu_486_p3 = ((and_ln27_5_fu_464_p2[0:0] == 1'b1) ? c_p_reg_538 : 32'd0);

assign select_ln53_8_fu_493_p3 = ((or_ln53_fu_469_p2[0:0] == 1'b1) ? c_p_reg_538 : add_ln53_fu_481_p2);

assign select_ln53_fu_400_p3 = ((icmp_ln53_2_reg_587[0:0] == 1'b1) ? bitcast_ln51_reg_545 : select_ln38_fu_393_p3);

assign tmp_179_fu_273_p4 = {{bitcast_ln30_fu_270_p1[30:23]}};

assign tmp_181_fu_320_p4 = {{bitcast_ln38_fu_317_p1[30:23]}};

assign tmp_s_fu_226_p4 = {{bitcast_ln27_fu_223_p1[30:23]}};

assign trunc_ln18_fu_163_p4 = {{p_read25[95:64]}};

assign trunc_ln19_fu_178_p4 = {{p_read25[127:96]}};

assign trunc_ln27_fu_236_p1 = bitcast_ln27_fu_223_p1[22:0];

assign trunc_ln30_fu_283_p1 = bitcast_ln30_fu_270_p1[22:0];

assign trunc_ln38_fu_330_p1 = bitcast_ln38_fu_317_p1[22:0];

assign trunc_ln51_2_fu_103_p4 = {{p_read14[63:32]}};

assign trunc_ln51_3_fu_118_p4 = {{p_read14[95:64]}};

assign trunc_ln51_4_fu_133_p4 = {{p_read14[127:96]}};

assign trunc_ln_fu_148_p4 = {{p_read25[63:32]}};

assign xor_ln27_fu_264_p2 = (1'd1 ^ and_ln27_fu_258_p2);

assign xor_ln30_fu_311_p2 = (1'd1 ^ and_ln30_fu_305_p2);

assign xor_ln38_fu_358_p2 = (1'd1 ^ and_ln38_fu_352_p2);

endmodule //ban_interface_p_sum
