-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_p_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read14 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (127 downto 0);
    diff_p : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ban_interface_p_sum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_68_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_95 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln53_3_reg_595 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_2_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_p_fu_99_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln51_fu_113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln51_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln51_2_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln51_2_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln51_3_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln51_3_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln55_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln55_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln65_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln65_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln53_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_2_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_3_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add1_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_72_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal add7_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_68_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_68_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_72_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_72_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_2_fu_103_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_3_fu_118_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_4_fu_133_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_148_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_fu_163_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln19_fu_178_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bitcast_ln27_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_226_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_236_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_8_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln30_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_179_fu_273_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln30_fu_283_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln30_8_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln38_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_181_fu_320_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_330_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln38_8_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_4_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_4_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln38_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_4_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_5_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_375_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_fu_393_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_fu_400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln30_3_fu_412_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_12_fu_418_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_2_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln38_4_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_13_fu_444_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_4_fu_451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln27_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_6_fu_473_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_5_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln53_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_8_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_7_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_8_fu_506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_1_fu_406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_3_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_5_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_4_full_dsp_1_U20 : component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_68_p0,
        din1 => grp_fu_68_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_68_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U21 : component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_72_p0,
        din1 => grp_fu_72_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_72_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U22 : component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_76_p0,
        din1 => grp_fu_76_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_76_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U23 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add1_reg_603,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_80_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U24 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add2_reg_610,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_85_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U25 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add3_reg_619,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_90_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_0_preg <= c_p_8_fu_506_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_1_preg <= select_ln53_1_fu_406_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_2_preg <= select_ln53_3_fu_431_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_3_preg <= select_ln53_5_fu_458_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add1_reg_603 <= grp_fu_68_p2;
                add2_reg_610 <= grp_fu_72_p2;
                add3_reg_619 <= grp_fu_76_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_3_reg_595 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add7_reg_628 <= grp_fu_72_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                and_ln53_reg_581 <= and_ln53_fu_205_p2;
                bitcast_ln51_2_reg_552 <= bitcast_ln51_2_fu_128_p1;
                bitcast_ln51_3_reg_559 <= bitcast_ln51_3_fu_143_p1;
                bitcast_ln51_reg_545 <= bitcast_ln51_fu_113_p1;
                bitcast_ln55_reg_566 <= bitcast_ln55_fu_158_p1;
                bitcast_ln65_reg_571 <= bitcast_ln65_fu_173_p1;
                c_p_reg_538 <= c_p_fu_99_p1;
                icmp_ln53_2_reg_587 <= icmp_ln53_2_fu_211_p2;
                icmp_ln53_3_reg_595 <= icmp_ln53_3_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln53_2_reg_587 = ap_const_lv1_1) and (icmp_ln53_3_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln53_3_reg_595 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_95 <= grp_fu_68_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln53_fu_481_p2 <= std_logic_vector(unsigned(c_p_reg_538) + unsigned(select_ln53_6_fu_473_p3));
    and_ln27_4_fu_364_p2 <= (and_ln53_reg_581 and and_ln27_fu_258_p2);
    and_ln27_5_fu_464_p2 <= (xor_ln27_fu_264_p2 and and_ln53_reg_581);
    and_ln27_fu_258_p2 <= (or_ln27_fu_252_p2 and grp_fu_80_p2);
    and_ln30_4_fu_369_p2 <= (xor_ln30_fu_311_p2 and and_ln27_4_fu_364_p2);
    and_ln30_fu_305_p2 <= (or_ln30_fu_299_p2 and grp_fu_85_p2);
    and_ln38_4_fu_381_p2 <= (xor_ln38_fu_358_p2 and and_ln30_fu_305_p2);
    and_ln38_5_fu_387_p2 <= (and_ln38_4_fu_381_p2 and and_ln27_4_fu_364_p2);
    and_ln38_fu_352_p2 <= (or_ln38_fu_346_p2 and grp_fu_90_p2);
    and_ln53_fu_205_p2 <= (icmp_ln53_fu_193_p2 and icmp_ln53_1_fu_199_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state6, c_p_8_fu_506_p3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_0 <= c_p_8_fu_506_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state6, select_ln53_1_fu_406_p3, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_1 <= select_ln53_1_fu_406_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state6, select_ln53_3_fu_431_p3, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_2 <= select_ln53_3_fu_431_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state6, select_ln53_5_fu_458_p3, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_3 <= select_ln53_5_fu_458_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    bitcast_ln27_fu_223_p1 <= add1_reg_603;
    bitcast_ln30_fu_270_p1 <= add2_reg_610;
    bitcast_ln38_fu_317_p1 <= add3_reg_619;
    bitcast_ln51_2_fu_128_p1 <= trunc_ln51_3_fu_118_p4;
    bitcast_ln51_3_fu_143_p1 <= trunc_ln51_4_fu_133_p4;
    bitcast_ln51_fu_113_p1 <= trunc_ln51_2_fu_103_p4;
    bitcast_ln55_fu_158_p1 <= trunc_ln_fu_148_p4;
    bitcast_ln65_fu_173_p1 <= trunc_ln18_fu_163_p4;
    c_p_8_fu_506_p3 <= 
        select_ln53_8_fu_493_p3 when (or_ln53_1_fu_500_p2(0) = '1') else 
        select_ln53_7_fu_486_p3;
    c_p_fu_99_p1 <= p_read14(32 - 1 downto 0);

    grp_fu_68_p0_assign_proc : process(ap_CS_fsm_state1, icmp_ln53_3_reg_595, icmp_ln53_2_reg_587, bitcast_ln51_fu_113_p1, bitcast_ln51_2_reg_552, bitcast_ln51_3_reg_559, ap_CS_fsm_state2)
    begin
        if (((icmp_ln53_2_reg_587 = ap_const_lv1_1) and (icmp_ln53_3_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_68_p0 <= bitcast_ln51_3_reg_559;
        elsif (((icmp_ln53_3_reg_595 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_68_p0 <= bitcast_ln51_2_reg_552;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_68_p0 <= bitcast_ln51_fu_113_p1;
        else 
            grp_fu_68_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_68_p1_assign_proc : process(ap_CS_fsm_state1, icmp_ln53_3_reg_595, icmp_ln53_2_reg_587, bitcast_ln55_fu_158_p1, bitcast_ln55_reg_566, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln53_2_reg_587 = ap_const_lv1_1) and (icmp_ln53_3_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln53_3_reg_595 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_68_p1 <= bitcast_ln55_reg_566;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_68_p1 <= bitcast_ln55_fu_158_p1;
        else 
            grp_fu_68_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_72_p0_assign_proc : process(ap_CS_fsm_state1, bitcast_ln51_2_fu_128_p1, bitcast_ln51_3_reg_559, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_72_p0 <= bitcast_ln51_3_reg_559;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_72_p0 <= bitcast_ln51_2_fu_128_p1;
        else 
            grp_fu_72_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_72_p1_assign_proc : process(ap_CS_fsm_state1, bitcast_ln65_fu_173_p1, bitcast_ln65_reg_571, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_72_p1 <= bitcast_ln65_reg_571;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_72_p1 <= bitcast_ln65_fu_173_p1;
        else 
            grp_fu_72_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_76_p0 <= trunc_ln51_4_fu_133_p4;
    grp_fu_76_p1 <= trunc_ln19_fu_178_p4;
    icmp_ln27_8_fu_246_p2 <= "1" when (trunc_ln27_fu_236_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_240_p2 <= "0" when (tmp_s_fu_226_p4 = ap_const_lv8_FF) else "1";
    icmp_ln30_8_fu_293_p2 <= "1" when (trunc_ln30_fu_283_p1 = ap_const_lv23_0) else "0";
    icmp_ln30_fu_287_p2 <= "0" when (tmp_179_fu_273_p4 = ap_const_lv8_FF) else "1";
    icmp_ln38_8_fu_340_p2 <= "1" when (trunc_ln38_fu_330_p1 = ap_const_lv23_0) else "0";
    icmp_ln38_fu_334_p2 <= "0" when (tmp_181_fu_320_p4 = ap_const_lv8_FF) else "1";
    icmp_ln53_1_fu_199_p2 <= "0" when (diff_p = ap_const_lv2_2) else "1";
    icmp_ln53_2_fu_211_p2 <= "1" when (diff_p = ap_const_lv2_2) else "0";
    icmp_ln53_3_fu_217_p2 <= "1" when (diff_p = ap_const_lv2_1) else "0";
    icmp_ln53_fu_193_p2 <= "0" when (diff_p = ap_const_lv2_1) else "1";
    or_ln27_fu_252_p2 <= (icmp_ln27_fu_240_p2 or icmp_ln27_8_fu_246_p2);
    or_ln30_fu_299_p2 <= (icmp_ln30_fu_287_p2 or icmp_ln30_8_fu_293_p2);
    or_ln38_4_fu_438_p2 <= (and_ln38_5_fu_387_p2 or and_ln30_4_fu_369_p2);
    or_ln38_fu_346_p2 <= (icmp_ln38_fu_334_p2 or icmp_ln38_8_fu_340_p2);
    or_ln53_1_fu_500_p2 <= (or_ln53_fu_469_p2 or or_ln38_4_fu_438_p2);
    or_ln53_fu_469_p2 <= (icmp_ln53_3_reg_595 or icmp_ln53_2_reg_587);
    select_ln30_3_fu_412_p3 <= 
        add3_reg_619 when (and_ln30_4_fu_369_p2(0) = '1') else 
        add2_reg_610;
    select_ln30_fu_375_p3 <= 
        add2_reg_610 when (and_ln30_4_fu_369_p2(0) = '1') else 
        add1_reg_603;
    select_ln38_12_fu_418_p3 <= 
        add2_reg_610 when (and_ln38_5_fu_387_p2(0) = '1') else 
        select_ln30_3_fu_412_p3;
    select_ln38_13_fu_444_p3 <= 
        ap_const_lv32_0 when (or_ln38_4_fu_438_p2(0) = '1') else 
        add3_reg_619;
    select_ln38_fu_393_p3 <= 
        add3_reg_619 when (and_ln38_5_fu_387_p2(0) = '1') else 
        select_ln30_fu_375_p3;
    select_ln53_1_fu_406_p3 <= 
        bitcast_ln51_reg_545 when (icmp_ln53_3_reg_595(0) = '1') else 
        select_ln53_fu_400_p3;
    select_ln53_2_fu_425_p3 <= 
        bitcast_ln51_2_reg_552 when (icmp_ln53_2_reg_587(0) = '1') else 
        select_ln38_12_fu_418_p3;
    select_ln53_3_fu_431_p3 <= 
        reg_95 when (icmp_ln53_3_reg_595(0) = '1') else 
        select_ln53_2_fu_425_p3;
    select_ln53_4_fu_451_p3 <= 
        reg_95 when (icmp_ln53_2_reg_587(0) = '1') else 
        select_ln38_13_fu_444_p3;
    select_ln53_5_fu_458_p3 <= 
        add7_reg_628 when (icmp_ln53_3_reg_595(0) = '1') else 
        select_ln53_4_fu_451_p3;
    select_ln53_6_fu_473_p3 <= 
        ap_const_lv32_FFFFFFFE when (and_ln38_5_fu_387_p2(0) = '1') else 
        ap_const_lv32_FFFFFFFF;
    select_ln53_7_fu_486_p3 <= 
        c_p_reg_538 when (and_ln27_5_fu_464_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln53_8_fu_493_p3 <= 
        c_p_reg_538 when (or_ln53_fu_469_p2(0) = '1') else 
        add_ln53_fu_481_p2;
    select_ln53_fu_400_p3 <= 
        bitcast_ln51_reg_545 when (icmp_ln53_2_reg_587(0) = '1') else 
        select_ln38_fu_393_p3;
    tmp_179_fu_273_p4 <= bitcast_ln30_fu_270_p1(30 downto 23);
    tmp_181_fu_320_p4 <= bitcast_ln38_fu_317_p1(30 downto 23);
    tmp_s_fu_226_p4 <= bitcast_ln27_fu_223_p1(30 downto 23);
    trunc_ln18_fu_163_p4 <= p_read25(95 downto 64);
    trunc_ln19_fu_178_p4 <= p_read25(127 downto 96);
    trunc_ln27_fu_236_p1 <= bitcast_ln27_fu_223_p1(23 - 1 downto 0);
    trunc_ln30_fu_283_p1 <= bitcast_ln30_fu_270_p1(23 - 1 downto 0);
    trunc_ln38_fu_330_p1 <= bitcast_ln38_fu_317_p1(23 - 1 downto 0);
    trunc_ln51_2_fu_103_p4 <= p_read14(63 downto 32);
    trunc_ln51_3_fu_118_p4 <= p_read14(95 downto 64);
    trunc_ln51_4_fu_133_p4 <= p_read14(127 downto 96);
    trunc_ln_fu_148_p4 <= p_read25(63 downto 32);
    xor_ln27_fu_264_p2 <= (ap_const_lv1_1 xor and_ln27_fu_258_p2);
    xor_ln30_fu_311_p2 <= (ap_const_lv1_1 xor and_ln30_fu_305_p2);
    xor_ln38_fu_358_p2 <= (ap_const_lv1_1 xor and_ln38_fu_352_p2);
end behav;
