-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_operator_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read13 : IN STD_LOGIC_VECTOR (127 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ban_interface_operator_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal res_p_fu_92_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_p_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln287_fu_96_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln287_reg_724 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_res_1_fu_118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_1_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln285_2_fu_146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln285_2_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln293_fu_150_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln293_reg_762 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_154_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_72_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_77_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln293_fu_171_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln293_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln293_2_fu_189_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln293_2_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln293_4_fu_203_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln293_4_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_77_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_82_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_87_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln285_1_fu_108_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln285_2_fu_122_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln285_3_fu_136_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_154_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_154_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln293_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_1_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln293_1_fu_183_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln293_3_fu_197_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal bitcast_ln284_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_214_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln284_fu_224_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln284_1_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln284_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln290_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln302_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln302_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_res_2_fu_286_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_315_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_325_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln30_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_362_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln30_fu_372_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln30_1_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln38_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_414_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_424_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln38_1_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln287_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln287_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln290_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln290_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln290_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_1_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln290_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_2_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln38_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_1_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_2_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln287_1_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_fu_531_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_fu_543_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln290_1_fu_557_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_1_fu_563_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln30_1_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln302_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_1_fu_577_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_1_fu_584_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln290_2_fu_599_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln38_1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_2_fu_605_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_3_fu_298_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_2_fu_618_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_2_fu_626_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_p_3_fu_641_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal res_p_4_fu_648_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal res_p_1_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_p_2_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_p_5_fu_659_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_p_6_fu_667_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_p_7_fu_675_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_p_8_fu_683_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln284_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln284_1_fu_592_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln284_2_fu_634_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ban_interface_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_4_full_dsp_1_U1 : component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_768,
        din1 => n,
        ce => ap_const_logic_1,
        dout => grp_fu_72_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U2 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_77_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_77_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U3 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_82_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_82_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U4 : component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_87_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_87_p2);

    mux_32_32_1_1_U5 : component ban_interface_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_2_fu_154_p1,
        din1 => tmp_2_fu_154_p2,
        din2 => tmp_2_fu_154_p3,
        din3 => tmp_2_fu_154_p4,
        dout => tmp_2_fu_154_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_0_preg <= res_p_8_fu_683_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_1_preg <= select_ln284_fu_550_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_2_preg <= select_ln284_1_fu_592_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_3_preg <= select_ln284_2_fu_634_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_reg_781 <= grp_fu_72_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                bitcast_ln285_2_reg_754 <= bitcast_ln285_2_fu_146_p1;
                num_res_1_reg_736 <= num_res_1_fu_118_p1;
                num_res_reg_745 <= num_res_fu_132_p1;
                res_p_reg_714 <= res_p_fu_92_p1;
                tmp_2_reg_768 <= tmp_2_fu_154_p5;
                tmp_reg_730 <= p_read13(31 downto 31);
                trunc_ln287_reg_724 <= trunc_ln287_fu_96_p1;
                trunc_ln293_reg_762 <= trunc_ln293_fu_150_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                select_ln293_2_reg_801 <= select_ln293_2_fu_189_p3;
                select_ln293_4_reg_811 <= select_ln293_4_fu_203_p3;
                select_ln293_reg_793 <= select_ln293_fu_171_p3;
                tmp_1_reg_788 <= grp_fu_77_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln290_fu_262_p2 <= std_logic_vector(unsigned(res_p_reg_714) + unsigned(ap_const_lv32_FFFFFFFD));
    and_ln27_1_fu_487_p2 <= (xor_ln27_fu_353_p2 and and_ln290_1_fu_481_p2);
    and_ln27_2_fu_500_p2 <= (and_ln290_1_fu_481_p2 and and_ln27_fu_347_p2);
    and_ln27_fu_347_p2 <= (or_ln27_fu_341_p2 and grp_fu_77_p2);
    and_ln284_fu_246_p2 <= (tmp_1_reg_788 and or_ln284_fu_240_p2);
    and_ln287_1_fu_538_p2 <= (xor_ln284_fu_251_p2 and tmp_reg_730);
    and_ln287_fu_463_p2 <= (xor_ln287_fu_257_p2 and xor_ln284_fu_251_p2);
    and_ln290_1_fu_481_p2 <= (tmp_9_fu_267_p3 and and_ln287_fu_463_p2);
    and_ln290_fu_469_p2 <= (xor_ln290_fu_275_p2 and and_ln287_fu_463_p2);
    and_ln30_1_fu_506_p2 <= (xor_ln30_fu_400_p2 and and_ln27_2_fu_500_p2);
    and_ln30_fu_394_p2 <= (or_ln30_fu_388_p2 and grp_fu_82_p2);
    and_ln38_1_fu_519_p2 <= (xor_ln38_fu_452_p2 and and_ln30_fu_394_p2);
    and_ln38_2_fu_525_p2 <= (and_ln38_1_fu_519_p2 and and_ln27_2_fu_500_p2);
    and_ln38_fu_446_p2 <= (or_ln38_fu_440_p2 and grp_fu_87_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state7, res_p_8_fu_683_p3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_0 <= res_p_8_fu_683_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state7, select_ln284_fu_550_p3, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_1 <= select_ln284_fu_550_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state7, select_ln284_1_fu_592_p3, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_2 <= select_ln284_1_fu_592_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state7, select_ln284_2_fu_634_p3, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_3 <= select_ln284_2_fu_634_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    bitcast_ln27_fu_312_p1 <= select_ln293_reg_793;
    bitcast_ln284_fu_211_p1 <= n;
    bitcast_ln285_2_fu_146_p1 <= trunc_ln285_3_fu_136_p4;
    bitcast_ln30_fu_359_p1 <= select_ln293_2_reg_801;
    bitcast_ln38_fu_411_p1 <= select_ln293_4_reg_811;

    grp_fu_77_p0_assign_proc : process(n, ap_CS_fsm_state5, ap_CS_fsm_state6, select_ln293_fu_171_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_77_p0 <= select_ln293_fu_171_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_77_p0 <= n;
        else 
            grp_fu_77_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_82_p0 <= 
        num_res_reg_745 when (icmp_ln293_fu_166_p2(0) = '1') else 
        select_ln293_1_fu_183_p3;
    grp_fu_87_p0 <= 
        bitcast_ln285_2_reg_754 when (icmp_ln293_fu_166_p2(0) = '1') else 
        select_ln293_3_fu_197_p3;
    icmp_ln27_1_fu_335_p2 <= "1" when (trunc_ln27_fu_325_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_329_p2 <= "0" when (tmp_3_fu_315_p4 = ap_const_lv8_FF) else "1";
    icmp_ln284_1_fu_234_p2 <= "1" when (trunc_ln284_fu_224_p1 = ap_const_lv23_0) else "0";
    icmp_ln284_fu_228_p2 <= "0" when (tmp_s_fu_214_p4 = ap_const_lv8_FF) else "1";
    icmp_ln293_1_fu_178_p2 <= "1" when (trunc_ln293_reg_762 = ap_const_lv2_1) else "0";
    icmp_ln293_fu_166_p2 <= "1" when (trunc_ln293_reg_762 = ap_const_lv2_0) else "0";
    icmp_ln302_1_fu_293_p2 <= "1" when (res_p_reg_714 = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln302_fu_281_p2 <= "1" when (res_p_reg_714 = ap_const_lv32_FFFFFFFE) else "0";
    icmp_ln30_1_fu_382_p2 <= "1" when (trunc_ln30_fu_372_p1 = ap_const_lv23_0) else "0";
    icmp_ln30_fu_376_p2 <= "0" when (tmp_5_fu_362_p4 = ap_const_lv8_FF) else "1";
    icmp_ln38_1_fu_434_p2 <= "1" when (trunc_ln38_fu_424_p1 = ap_const_lv23_0) else "0";
    icmp_ln38_fu_428_p2 <= "0" when (tmp_7_fu_414_p4 = ap_const_lv8_FF) else "1";
    num_res_1_fu_118_p1 <= trunc_ln285_1_fu_108_p4;
    num_res_2_fu_286_p3 <= 
        num_res_1_reg_736 when (icmp_ln302_fu_281_p2(0) = '1') else 
        ap_const_lv32_0;
    num_res_3_fu_298_p3 <= 
        num_res_reg_745 when (icmp_ln302_1_fu_293_p2(0) = '1') else 
        num_res_2_fu_286_p3;
    num_res_fu_132_p1 <= trunc_ln285_2_fu_122_p4;
    or_ln27_fu_341_p2 <= (icmp_ln27_fu_329_p2 or icmp_ln27_1_fu_335_p2);
    or_ln284_fu_240_p2 <= (icmp_ln284_fu_228_p2 or icmp_ln284_1_fu_234_p2);
    or_ln30_fu_388_p2 <= (icmp_ln30_fu_376_p2 or icmp_ln30_1_fu_382_p2);
    or_ln38_1_fu_612_p2 <= (and_ln38_2_fu_525_p2 or and_ln30_1_fu_506_p2);
    or_ln38_fu_440_p2 <= (icmp_ln38_fu_428_p2 or icmp_ln38_1_fu_434_p2);
    res_p_1_fu_406_p2 <= std_logic_vector(unsigned(res_p_reg_714) + unsigned(ap_const_lv32_FFFFFFFF));
    res_p_2_fu_458_p2 <= std_logic_vector(unsigned(res_p_reg_714) + unsigned(ap_const_lv32_FFFFFFFE));
    res_p_3_fu_641_p3 <= 
        trunc_ln287_reg_724 when (and_ln290_fu_469_p2(0) = '1') else 
        ap_const_lv31_0;
    res_p_4_fu_648_p3 <= 
        trunc_ln287_reg_724 when (and_ln27_1_fu_487_p2(0) = '1') else 
        res_p_3_fu_641_p3;
    res_p_5_fu_659_p3 <= 
        res_p_1_fu_406_p2 when (and_ln30_1_fu_506_p2(0) = '1') else 
        zext_ln34_fu_655_p1;
    res_p_6_fu_667_p3 <= 
        res_p_2_fu_458_p2 when (and_ln38_2_fu_525_p2(0) = '1') else 
        res_p_5_fu_659_p3;
    res_p_7_fu_675_p3 <= 
        ap_const_lv32_0 when (and_ln287_1_fu_538_p2(0) = '1') else 
        res_p_6_fu_667_p3;
    res_p_8_fu_683_p3 <= 
        res_p_reg_714 when (and_ln284_fu_246_p2(0) = '1') else 
        res_p_7_fu_675_p3;
    res_p_fu_92_p1 <= p_read13(32 - 1 downto 0);
    select_ln27_1_fu_563_p3 <= 
        select_ln293_2_reg_801 when (and_ln27_1_fu_487_p2(0) = '1') else 
        select_ln290_1_fu_557_p3;
    select_ln27_2_fu_605_p3 <= 
        select_ln293_4_reg_811 when (and_ln27_1_fu_487_p2(0) = '1') else 
        select_ln290_2_fu_599_p3;
    select_ln27_fu_493_p3 <= 
        select_ln293_reg_793 when (and_ln27_1_fu_487_p2(0) = '1') else 
        select_ln290_fu_475_p3;
    select_ln284_1_fu_592_p3 <= 
        num_res_reg_745 when (and_ln284_fu_246_p2(0) = '1') else 
        select_ln287_1_fu_584_p3;
    select_ln284_2_fu_634_p3 <= 
        bitcast_ln285_2_reg_754 when (and_ln284_fu_246_p2(0) = '1') else 
        select_ln287_2_fu_626_p3;
    select_ln284_fu_550_p3 <= 
        num_res_1_reg_736 when (and_ln284_fu_246_p2(0) = '1') else 
        select_ln287_fu_543_p3;
    select_ln287_1_fu_584_p3 <= 
        select_ln302_fu_305_p3 when (and_ln287_1_fu_538_p2(0) = '1') else 
        select_ln38_1_fu_577_p3;
    select_ln287_2_fu_626_p3 <= 
        num_res_3_fu_298_p3 when (and_ln287_1_fu_538_p2(0) = '1') else 
        select_ln38_2_fu_618_p3;
    select_ln287_fu_543_p3 <= 
        n when (and_ln287_1_fu_538_p2(0) = '1') else 
        select_ln38_fu_531_p3;
    select_ln290_1_fu_557_p3 <= 
        num_res_reg_745 when (and_ln290_fu_469_p2(0) = '1') else 
        select_ln293_2_reg_801;
    select_ln290_2_fu_599_p3 <= 
        bitcast_ln285_2_reg_754 when (and_ln290_fu_469_p2(0) = '1') else 
        select_ln293_4_reg_811;
    select_ln290_fu_475_p3 <= 
        num_res_1_reg_736 when (and_ln290_fu_469_p2(0) = '1') else 
        select_ln293_reg_793;
    select_ln293_1_fu_183_p3 <= 
        add_reg_781 when (icmp_ln293_1_fu_178_p2(0) = '1') else 
        num_res_reg_745;
    select_ln293_2_fu_189_p3 <= 
        num_res_reg_745 when (icmp_ln293_fu_166_p2(0) = '1') else 
        select_ln293_1_fu_183_p3;
    select_ln293_3_fu_197_p3 <= 
        bitcast_ln285_2_reg_754 when (icmp_ln293_1_fu_178_p2(0) = '1') else 
        add_reg_781;
    select_ln293_4_fu_203_p3 <= 
        bitcast_ln285_2_reg_754 when (icmp_ln293_fu_166_p2(0) = '1') else 
        select_ln293_3_fu_197_p3;
    select_ln293_fu_171_p3 <= 
        add_reg_781 when (icmp_ln293_fu_166_p2(0) = '1') else 
        num_res_1_reg_736;
    select_ln302_fu_305_p3 <= 
        num_res_1_reg_736 when (icmp_ln302_1_fu_293_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln30_1_fu_570_p3 <= 
        select_ln293_4_reg_811 when (and_ln30_1_fu_506_p2(0) = '1') else 
        select_ln27_1_fu_563_p3;
    select_ln30_fu_512_p3 <= 
        select_ln293_2_reg_801 when (and_ln30_1_fu_506_p2(0) = '1') else 
        select_ln27_fu_493_p3;
    select_ln38_1_fu_577_p3 <= 
        select_ln293_2_reg_801 when (and_ln38_2_fu_525_p2(0) = '1') else 
        select_ln30_1_fu_570_p3;
    select_ln38_2_fu_618_p3 <= 
        ap_const_lv32_0 when (or_ln38_1_fu_612_p2(0) = '1') else 
        select_ln27_2_fu_605_p3;
    select_ln38_fu_531_p3 <= 
        select_ln293_4_reg_811 when (and_ln38_2_fu_525_p2(0) = '1') else 
        select_ln30_fu_512_p3;
    tmp_2_fu_154_p1 <= trunc_ln285_1_fu_108_p4;
    tmp_2_fu_154_p2 <= trunc_ln285_2_fu_122_p4;
    tmp_2_fu_154_p3 <= trunc_ln285_3_fu_136_p4;
    tmp_2_fu_154_p4 <= p_read13(2 - 1 downto 0);
    tmp_3_fu_315_p4 <= bitcast_ln27_fu_312_p1(30 downto 23);
    tmp_5_fu_362_p4 <= bitcast_ln30_fu_359_p1(30 downto 23);
    tmp_7_fu_414_p4 <= bitcast_ln38_fu_411_p1(30 downto 23);
    tmp_9_fu_267_p3 <= add_ln290_fu_262_p2(31 downto 31);
    tmp_s_fu_214_p4 <= bitcast_ln284_fu_211_p1(30 downto 23);
    trunc_ln27_fu_325_p1 <= bitcast_ln27_fu_312_p1(23 - 1 downto 0);
    trunc_ln284_fu_224_p1 <= bitcast_ln284_fu_211_p1(23 - 1 downto 0);
    trunc_ln285_1_fu_108_p4 <= p_read13(63 downto 32);
    trunc_ln285_2_fu_122_p4 <= p_read13(95 downto 64);
    trunc_ln285_3_fu_136_p4 <= p_read13(127 downto 96);
    trunc_ln287_fu_96_p1 <= p_read13(31 - 1 downto 0);
    trunc_ln293_fu_150_p1 <= p_read13(2 - 1 downto 0);
    trunc_ln30_fu_372_p1 <= bitcast_ln30_fu_359_p1(23 - 1 downto 0);
    trunc_ln38_fu_424_p1 <= bitcast_ln38_fu_411_p1(23 - 1 downto 0);
    xor_ln27_fu_353_p2 <= (ap_const_lv1_1 xor and_ln27_fu_347_p2);
    xor_ln284_fu_251_p2 <= (ap_const_lv1_1 xor and_ln284_fu_246_p2);
    xor_ln287_fu_257_p2 <= (tmp_reg_730 xor ap_const_lv1_1);
    xor_ln290_fu_275_p2 <= (tmp_9_fu_267_p3 xor ap_const_lv1_1);
    xor_ln30_fu_400_p2 <= (ap_const_lv1_1 xor and_ln30_fu_394_p2);
    xor_ln38_fu_452_p2 <= (ap_const_lv1_1 xor and_ln38_fu_446_p2);
    zext_ln34_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_p_4_fu_648_p3),32));
end behav;
