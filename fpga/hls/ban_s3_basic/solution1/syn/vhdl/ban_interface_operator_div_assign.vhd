-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_operator_div_assign is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_op1_read : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0);
    grp_fu_928_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_928_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_928_p_ce : OUT STD_LOGIC;
    grp_fu_932_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_932_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_932_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_932_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_932_p_ce : OUT STD_LOGIC;
    grp_fu_936_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_936_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_936_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_936_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_936_p_ce : OUT STD_LOGIC;
    grp_fu_958_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_958_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_958_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_958_p_ce : OUT STD_LOGIC;
    grp_fu_963_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_963_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_963_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_963_p_ce : OUT STD_LOGIC;
    grp_fu_967_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_967_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_967_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_967_p_ce : OUT STD_LOGIC;
    grp_fu_1001_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1001_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1001_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1001_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1001_p_ce : OUT STD_LOGIC;
    grp_fu_1005_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1005_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1005_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1005_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1005_p_ce : OUT STD_LOGIC;
    grp_fu_1009_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1009_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1009_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1009_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1009_p_ce : OUT STD_LOGIC );
end;


architecture behav of ban_interface_operator_div_assign is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (59 downto 0) := "000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (59 downto 0) := "000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (59 downto 0) := "000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (59 downto 0) := "000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (59 downto 0) := "000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (59 downto 0) := "000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (59 downto 0) := "000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (59 downto 0) := "000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (59 downto 0) := "000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (59 downto 0) := "001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (59 downto 0) := "010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (59 downto 0) := "100000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln27_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln27_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_0_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_0_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_19_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_19_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_20_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_20_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_num_1_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_1_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_21_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_21_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_22_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_22_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln27_16_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_16_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln27_8_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_15_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_15_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal c_num_2_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_2_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal normalizer_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal normalizer_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln143_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln143_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln144_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln144_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln143_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bitcast_ln144_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul15_i1_i_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul12_i1_i_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul15_i2_i_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul19_i2_i_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_i_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_2_2_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln178_fu_754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_phi_fu_82_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal bitcast_ln178_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_8_phi_fu_93_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_8_reg_89 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_0_7_fu_706_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_1_0_phi_fu_104_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_0_reg_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_1_fu_740_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ref_tmp_01_0_phi_fu_115_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ref_tmp_01_0_reg_111 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_122_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_122_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_126_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_134_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_138_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_179_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_fu_287_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_302_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_s_fu_312_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln27_4_fu_334_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_349_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_5_fu_359_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln27_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_10_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_13_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_14_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_189_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_423_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_7_fu_432_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_24_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_23_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_11_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln172_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln6_fu_477_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_490_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln8_fu_505_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_532_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_542_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_fu_584_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_1_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln43_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_621_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln43_fu_631_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln43_1_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln43_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_2_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln43_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_1_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_1_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_num_0_4_fu_683_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_0_6_fu_698_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_fu_714_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln43_1_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_1_fu_733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_num_0_5_fu_690_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln76_2_fu_767_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fmul_32ns_32ns_32_3_max_dsp_1_U53 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_275,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U54 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_216,
        din1 => reg_208,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U55 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_260,
        din1 => reg_198,
        ce => ap_const_logic_1,
        dout => grp_fu_158_p2);

    fdiv_32ns_32ns_32_9_no_dsp_1_U56 : component ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_162_p0,
        din1 => normalizer_reg_862,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    fdiv_32ns_32ns_32_9_no_dsp_1_U57 : component ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_166_p0,
        din1 => normalizer_reg_862,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    fdiv_32ns_32ns_32_9_no_dsp_1_U58 : component ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_233,
        din1 => normalizer_reg_862,
        ce => ap_const_logic_1,
        dout => grp_fu_170_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv128_lc_1;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                    ap_return_preg <= or_ln76_2_fu_767_p5;
                end if; 
            end if;
        end if;
    end process;


    empty_8_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln27_15_fu_459_p2) and (ap_const_lv1_1 = and_ln27_16_reg_837) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_8_reg_89 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and ((ap_const_lv1_0 = and_ln27_15_reg_846) or (ap_const_lv1_0 = and_ln27_16_reg_837)))) then 
                empty_8_reg_89 <= bitcast_ln178_fu_749_p1;
            end if; 
        end if;
    end process;

    empty_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln27_15_fu_459_p2) and (ap_const_lv1_1 = and_ln27_16_reg_837) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_reg_78 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and ((ap_const_lv1_0 = and_ln27_15_reg_846) or (ap_const_lv1_0 = and_ln27_16_reg_837)))) then 
                empty_reg_78 <= select_ln178_fu_754_p3;
            end if; 
        end if;
    end process;

    p_1_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln27_15_fu_459_p2) and (ap_const_lv1_1 = and_ln27_16_reg_837) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_1_0_reg_100 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and ((ap_const_lv1_0 = and_ln27_15_reg_846) or (ap_const_lv1_0 = and_ln27_16_reg_837)))) then 
                p_1_0_reg_100 <= c_num_0_7_fu_706_p3;
            end if; 
        end if;
    end process;

    ref_tmp_01_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln27_15_fu_459_p2) and (ap_const_lv1_1 = and_ln27_16_reg_837) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ref_tmp_01_0_reg_111 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and ((ap_const_lv1_0 = and_ln27_15_reg_846) or (ap_const_lv1_0 = and_ln27_16_reg_837)))) then 
                ref_tmp_01_0_reg_111 <= c_p_1_fu_740_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add2_i_reg_909 <= grp_fu_936_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln27_16_reg_837) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln27_15_reg_846 <= and_ln27_15_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln27_16_reg_837 <= and_ln27_16_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                c_num_0_reg_792 <= c_num_0_fu_297_p1;
                c_num_1_reg_811 <= c_num_1_fu_344_p1;
                icmp_ln27_19_reg_801 <= icmp_ln27_19_fu_322_p2;
                icmp_ln27_20_reg_806 <= icmp_ln27_20_fu_328_p2;
                icmp_ln27_21_reg_819 <= icmp_ln27_21_fu_369_p2;
                icmp_ln27_22_reg_824 <= icmp_ln27_22_fu_375_p2;
                trunc_ln27_reg_786 <= trunc_ln27_fu_283_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                c_num_2_2_reg_914 <= grp_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((ap_const_lv1_0 = and_ln27_15_fu_459_p2) or (ap_const_lv1_0 = and_ln27_16_reg_837)))) then
                c_num_2_reg_850 <= c_num_2_fu_465_p1;
                c_p_reg_856 <= c_p_fu_472_p2;
                normalizer_reg_862 <= normalizer_fu_486_p1;
                xor_ln143_reg_869 <= xor_ln143_fu_499_p2;
                xor_ln144_reg_874 <= xor_ln144_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                mul12_i1_i_reg_894 <= grp_fu_149_p2;
                mul15_i2_i_reg_899 <= grp_fu_154_p2;
                mul19_i2_i_reg_904 <= grp_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                mul15_i1_i_reg_889 <= grp_fu_963_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_198 <= grp_fu_162_p2;
                reg_208 <= grp_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_216 <= grp_fu_958_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_227 <= grp_fu_963_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_233 <= grp_fu_928_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_243 <= grp_fu_967_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_249 <= grp_fu_958_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_254 <= grp_fu_932_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_260 <= grp_fu_928_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_269 <= grp_fu_928_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state45))) then
                reg_275 <= grp_fu_932_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, and_ln27_16_reg_837, and_ln27_15_fu_459_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_lv1_1 = and_ln27_15_fu_459_p2) and (ap_const_lv1_1 = and_ln27_16_reg_837) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln43_fu_722_p2 <= std_logic_vector(unsigned(c_p_reg_856) + unsigned(select_ln43_fu_714_p3));
    and_ln27_13_fu_400_p2 <= (or_ln27_10_fu_396_p2 and grp_fu_1005_p_dout0);
    and_ln27_14_fu_406_p2 <= (and_ln27_fu_390_p2 and and_ln27_13_fu_400_p2);
    and_ln27_15_fu_459_p2 <= (or_ln27_11_fu_453_p2 and grp_fu_1001_p_dout0);
    and_ln27_16_fu_412_p2 <= (icmp_ln27_fu_381_p2 and and_ln27_14_fu_406_p2);
    and_ln27_fu_390_p2 <= (or_ln27_fu_386_p2 and grp_fu_1001_p_dout0);
    and_ln32_fu_564_p2 <= (or_ln32_fu_558_p2 and grp_fu_1001_p_dout0);
    and_ln35_1_fu_665_p2 <= (xor_ln35_fu_612_p2 and and_ln32_fu_564_p2);
    and_ln35_2_fu_671_p2 <= (and_ln35_fu_606_p2 and and_ln32_fu_564_p2);
    and_ln35_fu_606_p2 <= (or_ln35_fu_600_p2 and grp_fu_1005_p_dout0);
    and_ln43_1_fu_677_p2 <= (xor_ln43_fu_659_p2 and and_ln35_2_fu_671_p2);
    and_ln43_fu_653_p2 <= (or_ln43_fu_647_p2 and grp_fu_1009_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_8_phi_fu_93_p4_assign_proc : process(and_ln27_16_reg_837, and_ln27_15_reg_846, ap_CS_fsm_state60, bitcast_ln178_fu_749_p1, empty_8_reg_89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) and ((ap_const_lv1_0 = and_ln27_15_reg_846) or (ap_const_lv1_0 = and_ln27_16_reg_837)))) then 
            ap_phi_mux_empty_8_phi_fu_93_p4 <= bitcast_ln178_fu_749_p1;
        else 
            ap_phi_mux_empty_8_phi_fu_93_p4 <= empty_8_reg_89;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_82_p4_assign_proc : process(and_ln27_16_reg_837, and_ln27_15_reg_846, select_ln178_fu_754_p3, empty_reg_78, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) and ((ap_const_lv1_0 = and_ln27_15_reg_846) or (ap_const_lv1_0 = and_ln27_16_reg_837)))) then 
            ap_phi_mux_empty_phi_fu_82_p4 <= select_ln178_fu_754_p3;
        else 
            ap_phi_mux_empty_phi_fu_82_p4 <= empty_reg_78;
        end if; 
    end process;


    ap_phi_mux_p_1_0_phi_fu_104_p4_assign_proc : process(and_ln27_16_reg_837, and_ln27_15_reg_846, ap_CS_fsm_state60, c_num_0_7_fu_706_p3, p_1_0_reg_100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) and ((ap_const_lv1_0 = and_ln27_15_reg_846) or (ap_const_lv1_0 = and_ln27_16_reg_837)))) then 
            ap_phi_mux_p_1_0_phi_fu_104_p4 <= c_num_0_7_fu_706_p3;
        else 
            ap_phi_mux_p_1_0_phi_fu_104_p4 <= p_1_0_reg_100;
        end if; 
    end process;


    ap_phi_mux_ref_tmp_01_0_phi_fu_115_p4_assign_proc : process(and_ln27_16_reg_837, and_ln27_15_reg_846, ap_CS_fsm_state60, c_p_1_fu_740_p3, ref_tmp_01_0_reg_111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) and ((ap_const_lv1_0 = and_ln27_15_reg_846) or (ap_const_lv1_0 = and_ln27_16_reg_837)))) then 
            ap_phi_mux_ref_tmp_01_0_phi_fu_115_p4 <= c_p_1_fu_740_p3;
        else 
            ap_phi_mux_ref_tmp_01_0_phi_fu_115_p4 <= ref_tmp_01_0_reg_111;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state60, or_ln76_2_fu_767_p5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ap_return <= or_ln76_2_fu_767_p5;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln143_fu_520_p1 <= xor_ln143_reg_869;
    bitcast_ln144_fu_524_p1 <= xor_ln144_reg_874;
    bitcast_ln178_fu_749_p1 <= c_num_0_5_fu_690_p3;
    bitcast_ln27_8_fu_418_p1 <= grp_fu_189_p4;
    bitcast_ln32_fu_528_p1 <= reg_198;
    bitcast_ln35_fu_570_p1 <= reg_208;
    bitcast_ln43_fu_618_p1 <= c_num_2_2_reg_914;
    bitcast_ln76_fu_763_p1 <= ap_phi_mux_p_1_0_phi_fu_104_p4;
    c_num_0_4_fu_683_p3 <= 
        c_num_2_2_reg_914 when (and_ln35_1_fu_665_p2(0) = '1') else 
        reg_208;
    c_num_0_5_fu_690_p3 <= 
        reg_208 when (and_ln43_1_fu_677_p2(0) = '1') else 
        c_num_0_4_fu_683_p3;
    c_num_0_6_fu_698_p3 <= 
        reg_208 when (and_ln35_1_fu_665_p2(0) = '1') else 
        reg_198;
    c_num_0_7_fu_706_p3 <= 
        c_num_2_2_reg_914 when (and_ln43_1_fu_677_p2(0) = '1') else 
        c_num_0_6_fu_698_p3;
    c_num_0_fu_297_p1 <= trunc_ln4_fu_287_p4;
    c_num_1_fu_344_p1 <= trunc_ln27_4_fu_334_p4;
    c_num_2_fu_465_p1 <= grp_fu_189_p4;
    c_p_1_fu_740_p3 <= 
        add_ln43_fu_722_p2 when (or_ln43_1_fu_727_p2(0) = '1') else 
        select_ln43_1_fu_733_p3;
    c_p_fu_472_p2 <= std_logic_vector(unsigned(trunc_ln27_reg_786) - unsigned(trunc_ln172_fu_469_p1));
    grp_fu_1001_p_ce <= ap_const_logic_1;
    grp_fu_1001_p_din0 <= grp_fu_174_p0;
    grp_fu_1001_p_din1 <= ap_const_lv32_0;
    grp_fu_1001_p_opcode <= ap_const_lv5_1;
    grp_fu_1005_p_ce <= ap_const_logic_1;
    grp_fu_1005_p_din0 <= grp_fu_179_p0;
    grp_fu_1005_p_din1 <= ap_const_lv32_0;
    grp_fu_1005_p_opcode <= ap_const_lv5_1;
    grp_fu_1009_p_ce <= ap_const_logic_1;
    grp_fu_1009_p_din0 <= c_num_2_2_reg_914;
    grp_fu_1009_p_din1 <= ap_const_lv32_0;
    grp_fu_1009_p_opcode <= ap_const_lv5_1;

    grp_fu_122_p0_assign_proc : process(reg_216, reg_227, ap_CS_fsm_state30, reg_233, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state38, reg_249, reg_254, ap_CS_fsm_state34, reg_269, reg_275, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_122_p0 <= reg_254;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_122_p0 <= reg_275;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_122_p0 <= reg_269;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_122_p0 <= reg_249;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_122_p0 <= reg_227;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_122_p0 <= reg_233;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_122_p0 <= reg_216;
        else 
            grp_fu_122_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_122_p1_assign_proc : process(reg_216, reg_227, ap_CS_fsm_state30, reg_233, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state38, reg_243, reg_260, ap_CS_fsm_state34, c_num_0_reg_792, c_num_1_reg_811, mul15_i1_i_reg_889, mul19_i2_i_reg_904, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_122_p1 <= reg_233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_122_p1 <= mul19_i2_i_reg_904;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_122_p1 <= reg_260;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_122_p1 <= c_num_0_reg_792;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_122_p1 <= c_num_1_reg_811;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_122_p1 <= mul15_i1_i_reg_889;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_122_p1 <= reg_243;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_122_p1 <= reg_216;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_122_p1 <= reg_227;
        else 
            grp_fu_122_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_126_p0_assign_proc : process(reg_233, ap_CS_fsm_state31, ap_CS_fsm_state38, reg_254, reg_260, mul12_i1_i_reg_894, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_126_p0 <= mul12_i1_i_reg_894;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_126_p0 <= reg_254;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_126_p0 <= reg_260;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_126_p0 <= reg_233;
        else 
            grp_fu_126_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_126_p1_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state38, reg_243, reg_260, reg_275, c_num_2_reg_850, mul15_i2_i_reg_899, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_126_p1 <= reg_260;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_126_p1 <= mul15_i2_i_reg_899;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_126_p1 <= reg_275;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_126_p1 <= reg_243;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_126_p1 <= c_num_2_reg_850;
        else 
            grp_fu_126_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_134_p0_assign_proc : process(reg_198, reg_208, reg_216, reg_233, ap_CS_fsm_state31, c_num_0_reg_792, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_134_p0 <= reg_216;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_134_p0 <= reg_233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_134_p0 <= c_num_0_reg_792;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_134_p0 <= reg_198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_134_p0 <= reg_208;
        else 
            grp_fu_134_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_134_p1_assign_proc : process(ap_CS_fsm_state31, c_num_0_reg_792, c_num_1_reg_811, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_134_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_134_p1 <= c_num_1_reg_811;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_134_p1 <= c_num_0_reg_792;
        else 
            grp_fu_134_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_138_p0_assign_proc : process(reg_198, reg_216, reg_260, c_num_2_reg_850, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state13, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_138_p0 <= reg_260;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_138_p0 <= reg_216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_138_p0 <= reg_198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_138_p0 <= c_num_2_reg_850;
        else 
            grp_fu_138_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_138_p1_assign_proc : process(reg_198, reg_208, c_num_0_reg_792, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state13, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_138_p1 <= reg_198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_138_p1 <= reg_208;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_138_p1 <= c_num_0_reg_792;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_138_p1 <= ap_const_lv32_0;
        else 
            grp_fu_138_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_144_p0_assign_proc : process(reg_216, reg_233, c_num_1_reg_811, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_144_p0 <= reg_216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_144_p0 <= reg_233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_144_p0 <= c_num_1_reg_811;
        else 
            grp_fu_144_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_144_p1_assign_proc : process(reg_198, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_144_p1 <= reg_198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_144_p1 <= ap_const_lv32_0;
        else 
            grp_fu_144_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_162_p0_assign_proc : process(bitcast_ln143_fu_520_p1, ap_CS_fsm_state4, add2_i_reg_909, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_162_p0 <= add2_i_reg_909;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_162_p0 <= bitcast_ln143_fu_520_p1;
        else 
            grp_fu_162_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_166_p0_assign_proc : process(reg_275, ap_CS_fsm_state4, bitcast_ln144_fu_524_p1, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_166_p0 <= reg_275;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_166_p0 <= bitcast_ln144_fu_524_p1;
        else 
            grp_fu_166_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_174_p0_assign_proc : process(ap_CS_fsm_state1, reg_198, c_num_0_fu_297_p1, ap_CS_fsm_state2, bitcast_ln27_8_fu_418_p1, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_174_p0 <= reg_198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_174_p0 <= bitcast_ln27_8_fu_418_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_174_p0 <= c_num_0_fu_297_p1;
        else 
            grp_fu_174_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_179_p0_assign_proc : process(ap_CS_fsm_state1, reg_208, c_num_1_fu_344_p1, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_179_p0 <= reg_208;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_179_p0 <= c_num_1_fu_344_p1;
        else 
            grp_fu_179_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_189_p4 <= b_op1_read(127 downto 96);
    grp_fu_928_p_ce <= ap_const_logic_1;
    grp_fu_928_p_din0 <= grp_fu_122_p0;
    grp_fu_928_p_din1 <= grp_fu_122_p1;
    grp_fu_928_p_opcode <= ap_const_lv2_0;
    grp_fu_932_p_ce <= ap_const_logic_1;
    grp_fu_932_p_din0 <= grp_fu_126_p0;
    grp_fu_932_p_din1 <= grp_fu_126_p1;
    grp_fu_932_p_opcode <= ap_const_lv2_0;
    grp_fu_936_p_ce <= ap_const_logic_1;
    grp_fu_936_p_din0 <= reg_269;
    grp_fu_936_p_din1 <= reg_216;
    grp_fu_936_p_opcode <= ap_const_lv2_0;
    grp_fu_958_p_ce <= ap_const_logic_1;
    grp_fu_958_p_din0 <= grp_fu_134_p0;
    grp_fu_958_p_din1 <= grp_fu_134_p1;
    grp_fu_963_p_ce <= ap_const_logic_1;
    grp_fu_963_p_din0 <= grp_fu_138_p0;
    grp_fu_963_p_din1 <= grp_fu_138_p1;
    grp_fu_967_p_ce <= ap_const_logic_1;
    grp_fu_967_p_din0 <= grp_fu_144_p0;
    grp_fu_967_p_din1 <= grp_fu_144_p1;
    icmp_ln27_19_fu_322_p2 <= "0" when (tmp_fu_302_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_20_fu_328_p2 <= "1" when (trunc_ln27_s_fu_312_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_21_fu_369_p2 <= "0" when (tmp_14_fu_349_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_22_fu_375_p2 <= "1" when (trunc_ln27_5_fu_359_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_23_fu_441_p2 <= "0" when (tmp_16_fu_423_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_24_fu_447_p2 <= "1" when (trunc_ln27_7_fu_432_p4 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_381_p2 <= "1" when (trunc_ln27_reg_786 = ap_const_lv32_0) else "0";
    icmp_ln32_1_fu_552_p2 <= "1" when (trunc_ln32_fu_542_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_546_p2 <= "0" when (tmp_18_fu_532_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_1_fu_594_p2 <= "1" when (trunc_ln35_fu_584_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_fu_588_p2 <= "0" when (tmp_20_fu_574_p4 = ap_const_lv8_FF) else "1";
    icmp_ln43_1_fu_641_p2 <= "1" when (trunc_ln43_fu_631_p1 = ap_const_lv23_0) else "0";
    icmp_ln43_fu_635_p2 <= "0" when (tmp_22_fu_621_p4 = ap_const_lv8_FF) else "1";
    normalizer_fu_486_p1 <= trunc_ln6_fu_477_p4;
    or_ln27_10_fu_396_p2 <= (icmp_ln27_22_reg_824 or icmp_ln27_21_reg_819);
    or_ln27_11_fu_453_p2 <= (icmp_ln27_24_fu_447_p2 or icmp_ln27_23_fu_441_p2);
    or_ln27_fu_386_p2 <= (icmp_ln27_20_reg_806 or icmp_ln27_19_reg_801);
    or_ln32_fu_558_p2 <= (icmp_ln32_fu_546_p2 or icmp_ln32_1_fu_552_p2);
    or_ln35_fu_600_p2 <= (icmp_ln35_fu_588_p2 or icmp_ln35_1_fu_594_p2);
    or_ln43_1_fu_727_p2 <= (and_ln43_1_fu_677_p2 or and_ln35_1_fu_665_p2);
    or_ln43_fu_647_p2 <= (icmp_ln43_fu_635_p2 or icmp_ln43_1_fu_641_p2);
    or_ln76_2_fu_767_p5 <= (((ap_phi_mux_empty_phi_fu_82_p4 & ap_phi_mux_empty_8_phi_fu_93_p4) & bitcast_ln76_fu_763_p1) & ap_phi_mux_ref_tmp_01_0_phi_fu_115_p4);
    select_ln178_fu_754_p3 <= 
        ap_const_lv32_0 when (or_ln43_1_fu_727_p2(0) = '1') else 
        bitcast_ln43_fu_618_p1;
    select_ln43_1_fu_733_p3 <= 
        ap_const_lv32_0 when (and_ln32_fu_564_p2(0) = '1') else 
        c_p_reg_856;
    select_ln43_fu_714_p3 <= 
        ap_const_lv32_FFFFFFFE when (and_ln43_1_fu_677_p2(0) = '1') else 
        ap_const_lv32_FFFFFFFF;
    tmp_14_fu_349_p4 <= b_op1_read(94 downto 87);
    tmp_16_fu_423_p4 <= b_op1_read(126 downto 119);
    tmp_18_fu_532_p4 <= bitcast_ln32_fu_528_p1(30 downto 23);
    tmp_20_fu_574_p4 <= bitcast_ln35_fu_570_p1(30 downto 23);
    tmp_22_fu_621_p4 <= bitcast_ln43_fu_618_p1(30 downto 23);
    tmp_fu_302_p4 <= b_op1_read(62 downto 55);
    trunc_ln172_fu_469_p1 <= p_read(32 - 1 downto 0);
    trunc_ln27_4_fu_334_p4 <= b_op1_read(95 downto 64);
    trunc_ln27_5_fu_359_p4 <= b_op1_read(86 downto 64);
    trunc_ln27_7_fu_432_p4 <= b_op1_read(118 downto 96);
    trunc_ln27_fu_283_p1 <= b_op1_read(32 - 1 downto 0);
    trunc_ln27_s_fu_312_p4 <= b_op1_read(54 downto 32);
    trunc_ln32_fu_542_p1 <= bitcast_ln32_fu_528_p1(23 - 1 downto 0);
    trunc_ln35_fu_584_p1 <= bitcast_ln35_fu_570_p1(23 - 1 downto 0);
    trunc_ln43_fu_631_p1 <= bitcast_ln43_fu_618_p1(23 - 1 downto 0);
    trunc_ln4_fu_287_p4 <= b_op1_read(63 downto 32);
    trunc_ln6_fu_477_p4 <= p_read(63 downto 32);
    trunc_ln7_fu_490_p4 <= p_read(95 downto 64);
    trunc_ln8_fu_505_p4 <= p_read(127 downto 96);
    xor_ln143_fu_499_p2 <= (trunc_ln7_fu_490_p4 xor ap_const_lv32_80000000);
    xor_ln144_fu_514_p2 <= (trunc_ln8_fu_505_p4 xor ap_const_lv32_80000000);
    xor_ln35_fu_612_p2 <= (ap_const_lv1_1 xor and_ln35_fu_606_p2);
    xor_ln43_fu_659_p2 <= (ap_const_lv1_1 xor and_ln43_fu_653_p2);
end behav;
