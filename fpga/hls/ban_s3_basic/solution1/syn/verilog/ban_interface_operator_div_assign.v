// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_operator_div_assign (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_op1_read,
        p_read,
        ap_return,
        grp_fu_928_p_din0,
        grp_fu_928_p_din1,
        grp_fu_928_p_opcode,
        grp_fu_928_p_dout0,
        grp_fu_928_p_ce,
        grp_fu_932_p_din0,
        grp_fu_932_p_din1,
        grp_fu_932_p_opcode,
        grp_fu_932_p_dout0,
        grp_fu_932_p_ce,
        grp_fu_936_p_din0,
        grp_fu_936_p_din1,
        grp_fu_936_p_opcode,
        grp_fu_936_p_dout0,
        grp_fu_936_p_ce,
        grp_fu_958_p_din0,
        grp_fu_958_p_din1,
        grp_fu_958_p_dout0,
        grp_fu_958_p_ce,
        grp_fu_963_p_din0,
        grp_fu_963_p_din1,
        grp_fu_963_p_dout0,
        grp_fu_963_p_ce,
        grp_fu_967_p_din0,
        grp_fu_967_p_din1,
        grp_fu_967_p_dout0,
        grp_fu_967_p_ce,
        grp_fu_1001_p_din0,
        grp_fu_1001_p_din1,
        grp_fu_1001_p_opcode,
        grp_fu_1001_p_dout0,
        grp_fu_1001_p_ce,
        grp_fu_1005_p_din0,
        grp_fu_1005_p_din1,
        grp_fu_1005_p_opcode,
        grp_fu_1005_p_dout0,
        grp_fu_1005_p_ce,
        grp_fu_1009_p_din0,
        grp_fu_1009_p_din1,
        grp_fu_1009_p_opcode,
        grp_fu_1009_p_dout0,
        grp_fu_1009_p_ce
);

parameter    ap_ST_fsm_state1 = 60'd1;
parameter    ap_ST_fsm_state2 = 60'd2;
parameter    ap_ST_fsm_state3 = 60'd4;
parameter    ap_ST_fsm_state4 = 60'd8;
parameter    ap_ST_fsm_state5 = 60'd16;
parameter    ap_ST_fsm_state6 = 60'd32;
parameter    ap_ST_fsm_state7 = 60'd64;
parameter    ap_ST_fsm_state8 = 60'd128;
parameter    ap_ST_fsm_state9 = 60'd256;
parameter    ap_ST_fsm_state10 = 60'd512;
parameter    ap_ST_fsm_state11 = 60'd1024;
parameter    ap_ST_fsm_state12 = 60'd2048;
parameter    ap_ST_fsm_state13 = 60'd4096;
parameter    ap_ST_fsm_state14 = 60'd8192;
parameter    ap_ST_fsm_state15 = 60'd16384;
parameter    ap_ST_fsm_state16 = 60'd32768;
parameter    ap_ST_fsm_state17 = 60'd65536;
parameter    ap_ST_fsm_state18 = 60'd131072;
parameter    ap_ST_fsm_state19 = 60'd262144;
parameter    ap_ST_fsm_state20 = 60'd524288;
parameter    ap_ST_fsm_state21 = 60'd1048576;
parameter    ap_ST_fsm_state22 = 60'd2097152;
parameter    ap_ST_fsm_state23 = 60'd4194304;
parameter    ap_ST_fsm_state24 = 60'd8388608;
parameter    ap_ST_fsm_state25 = 60'd16777216;
parameter    ap_ST_fsm_state26 = 60'd33554432;
parameter    ap_ST_fsm_state27 = 60'd67108864;
parameter    ap_ST_fsm_state28 = 60'd134217728;
parameter    ap_ST_fsm_state29 = 60'd268435456;
parameter    ap_ST_fsm_state30 = 60'd536870912;
parameter    ap_ST_fsm_state31 = 60'd1073741824;
parameter    ap_ST_fsm_state32 = 60'd2147483648;
parameter    ap_ST_fsm_state33 = 60'd4294967296;
parameter    ap_ST_fsm_state34 = 60'd8589934592;
parameter    ap_ST_fsm_state35 = 60'd17179869184;
parameter    ap_ST_fsm_state36 = 60'd34359738368;
parameter    ap_ST_fsm_state37 = 60'd68719476736;
parameter    ap_ST_fsm_state38 = 60'd137438953472;
parameter    ap_ST_fsm_state39 = 60'd274877906944;
parameter    ap_ST_fsm_state40 = 60'd549755813888;
parameter    ap_ST_fsm_state41 = 60'd1099511627776;
parameter    ap_ST_fsm_state42 = 60'd2199023255552;
parameter    ap_ST_fsm_state43 = 60'd4398046511104;
parameter    ap_ST_fsm_state44 = 60'd8796093022208;
parameter    ap_ST_fsm_state45 = 60'd17592186044416;
parameter    ap_ST_fsm_state46 = 60'd35184372088832;
parameter    ap_ST_fsm_state47 = 60'd70368744177664;
parameter    ap_ST_fsm_state48 = 60'd140737488355328;
parameter    ap_ST_fsm_state49 = 60'd281474976710656;
parameter    ap_ST_fsm_state50 = 60'd562949953421312;
parameter    ap_ST_fsm_state51 = 60'd1125899906842624;
parameter    ap_ST_fsm_state52 = 60'd2251799813685248;
parameter    ap_ST_fsm_state53 = 60'd4503599627370496;
parameter    ap_ST_fsm_state54 = 60'd9007199254740992;
parameter    ap_ST_fsm_state55 = 60'd18014398509481984;
parameter    ap_ST_fsm_state56 = 60'd36028797018963968;
parameter    ap_ST_fsm_state57 = 60'd72057594037927936;
parameter    ap_ST_fsm_state58 = 60'd144115188075855872;
parameter    ap_ST_fsm_state59 = 60'd288230376151711744;
parameter    ap_ST_fsm_state60 = 60'd576460752303423488;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] b_op1_read;
input  [127:0] p_read;
output  [127:0] ap_return;
output  [31:0] grp_fu_928_p_din0;
output  [31:0] grp_fu_928_p_din1;
output  [1:0] grp_fu_928_p_opcode;
input  [31:0] grp_fu_928_p_dout0;
output   grp_fu_928_p_ce;
output  [31:0] grp_fu_932_p_din0;
output  [31:0] grp_fu_932_p_din1;
output  [1:0] grp_fu_932_p_opcode;
input  [31:0] grp_fu_932_p_dout0;
output   grp_fu_932_p_ce;
output  [31:0] grp_fu_936_p_din0;
output  [31:0] grp_fu_936_p_din1;
output  [1:0] grp_fu_936_p_opcode;
input  [31:0] grp_fu_936_p_dout0;
output   grp_fu_936_p_ce;
output  [31:0] grp_fu_958_p_din0;
output  [31:0] grp_fu_958_p_din1;
input  [31:0] grp_fu_958_p_dout0;
output   grp_fu_958_p_ce;
output  [31:0] grp_fu_963_p_din0;
output  [31:0] grp_fu_963_p_din1;
input  [31:0] grp_fu_963_p_dout0;
output   grp_fu_963_p_ce;
output  [31:0] grp_fu_967_p_din0;
output  [31:0] grp_fu_967_p_din1;
input  [31:0] grp_fu_967_p_dout0;
output   grp_fu_967_p_ce;
output  [31:0] grp_fu_1001_p_din0;
output  [31:0] grp_fu_1001_p_din1;
output  [4:0] grp_fu_1001_p_opcode;
input  [0:0] grp_fu_1001_p_dout0;
output   grp_fu_1001_p_ce;
output  [31:0] grp_fu_1005_p_din0;
output  [31:0] grp_fu_1005_p_din1;
output  [4:0] grp_fu_1005_p_opcode;
input  [0:0] grp_fu_1005_p_dout0;
output   grp_fu_1005_p_ce;
output  [31:0] grp_fu_1009_p_din0;
output  [31:0] grp_fu_1009_p_din1;
output  [4:0] grp_fu_1009_p_opcode;
input  [0:0] grp_fu_1009_p_dout0;
output   grp_fu_1009_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[127:0] ap_return;

(* fsm_encoding = "none" *) reg   [59:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_162_p2;
reg   [31:0] reg_198;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state58;
wire   [31:0] grp_fu_166_p2;
reg   [31:0] reg_208;
reg   [31:0] reg_216;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state37;
reg   [31:0] reg_227;
wire    ap_CS_fsm_state30;
reg   [31:0] reg_233;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state49;
reg   [31:0] reg_243;
reg   [31:0] reg_249;
wire    ap_CS_fsm_state26;
reg   [31:0] reg_254;
reg   [31:0] reg_260;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
reg   [31:0] reg_269;
reg   [31:0] reg_275;
wire   [31:0] trunc_ln27_fu_283_p1;
reg   [31:0] trunc_ln27_reg_786;
wire   [31:0] c_num_0_fu_297_p1;
reg   [31:0] c_num_0_reg_792;
wire   [0:0] icmp_ln27_19_fu_322_p2;
reg   [0:0] icmp_ln27_19_reg_801;
wire   [0:0] icmp_ln27_20_fu_328_p2;
reg   [0:0] icmp_ln27_20_reg_806;
wire   [31:0] c_num_1_fu_344_p1;
reg   [31:0] c_num_1_reg_811;
wire   [0:0] icmp_ln27_21_fu_369_p2;
reg   [0:0] icmp_ln27_21_reg_819;
wire   [0:0] icmp_ln27_22_fu_375_p2;
reg   [0:0] icmp_ln27_22_reg_824;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln27_16_fu_412_p2;
reg   [0:0] and_ln27_16_reg_837;
wire   [31:0] bitcast_ln27_8_fu_418_p1;
wire   [0:0] and_ln27_15_fu_459_p2;
reg   [0:0] and_ln27_15_reg_846;
wire    ap_CS_fsm_state3;
wire   [31:0] c_num_2_fu_465_p1;
reg   [31:0] c_num_2_reg_850;
wire   [31:0] c_p_fu_472_p2;
reg   [31:0] c_p_reg_856;
wire   [31:0] normalizer_fu_486_p1;
reg   [31:0] normalizer_reg_862;
wire   [31:0] xor_ln143_fu_499_p2;
reg   [31:0] xor_ln143_reg_869;
wire   [31:0] xor_ln144_fu_514_p2;
reg   [31:0] xor_ln144_reg_874;
wire   [31:0] bitcast_ln143_fu_520_p1;
wire    ap_CS_fsm_state4;
wire   [31:0] bitcast_ln144_fu_524_p1;
reg   [31:0] mul15_i1_i_reg_889;
wire   [31:0] grp_fu_149_p2;
reg   [31:0] mul12_i1_i_reg_894;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] mul15_i2_i_reg_899;
wire   [31:0] grp_fu_158_p2;
reg   [31:0] mul19_i2_i_reg_904;
reg   [31:0] add2_i_reg_909;
wire   [31:0] grp_fu_170_p2;
reg   [31:0] c_num_2_2_reg_914;
wire   [31:0] select_ln178_fu_754_p3;
reg   [31:0] ap_phi_mux_empty_phi_fu_82_p4;
reg   [31:0] empty_reg_78;
wire    ap_CS_fsm_state60;
wire   [31:0] bitcast_ln178_fu_749_p1;
reg   [31:0] ap_phi_mux_empty_8_phi_fu_93_p4;
reg   [31:0] empty_8_reg_89;
wire   [31:0] c_num_0_7_fu_706_p3;
reg   [31:0] ap_phi_mux_p_1_0_phi_fu_104_p4;
reg   [31:0] p_1_0_reg_100;
wire   [31:0] c_p_1_fu_740_p3;
reg   [31:0] ap_phi_mux_ref_tmp_01_0_phi_fu_115_p4;
reg   [31:0] ref_tmp_01_0_reg_111;
reg   [31:0] grp_fu_122_p0;
reg   [31:0] grp_fu_122_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state46;
reg   [31:0] grp_fu_126_p0;
reg   [31:0] grp_fu_126_p1;
reg   [31:0] grp_fu_134_p0;
reg   [31:0] grp_fu_134_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state21;
reg   [31:0] grp_fu_138_p0;
reg   [31:0] grp_fu_138_p1;
reg   [31:0] grp_fu_144_p0;
reg   [31:0] grp_fu_144_p1;
reg   [31:0] grp_fu_162_p0;
wire    ap_CS_fsm_state50;
reg   [31:0] grp_fu_166_p0;
reg   [31:0] grp_fu_174_p0;
wire    ap_CS_fsm_state59;
reg   [31:0] grp_fu_179_p0;
wire   [31:0] trunc_ln4_fu_287_p4;
wire   [7:0] tmp_fu_302_p4;
wire   [22:0] trunc_ln27_s_fu_312_p4;
wire   [31:0] trunc_ln27_4_fu_334_p4;
wire   [7:0] tmp_14_fu_349_p4;
wire   [22:0] trunc_ln27_5_fu_359_p4;
wire   [0:0] or_ln27_fu_386_p2;
wire   [0:0] or_ln27_10_fu_396_p2;
wire   [0:0] and_ln27_fu_390_p2;
wire   [0:0] and_ln27_13_fu_400_p2;
wire   [0:0] and_ln27_14_fu_406_p2;
wire   [0:0] icmp_ln27_fu_381_p2;
wire   [31:0] grp_fu_189_p4;
wire   [7:0] tmp_16_fu_423_p4;
wire   [22:0] trunc_ln27_7_fu_432_p4;
wire   [0:0] icmp_ln27_24_fu_447_p2;
wire   [0:0] icmp_ln27_23_fu_441_p2;
wire   [0:0] or_ln27_11_fu_453_p2;
wire   [31:0] trunc_ln172_fu_469_p1;
wire   [31:0] trunc_ln6_fu_477_p4;
wire   [31:0] trunc_ln7_fu_490_p4;
wire   [31:0] trunc_ln8_fu_505_p4;
wire   [31:0] bitcast_ln32_fu_528_p1;
wire   [7:0] tmp_18_fu_532_p4;
wire   [22:0] trunc_ln32_fu_542_p1;
wire   [0:0] icmp_ln32_1_fu_552_p2;
wire   [0:0] icmp_ln32_fu_546_p2;
wire   [0:0] or_ln32_fu_558_p2;
wire   [31:0] bitcast_ln35_fu_570_p1;
wire   [7:0] tmp_20_fu_574_p4;
wire   [22:0] trunc_ln35_fu_584_p1;
wire   [0:0] icmp_ln35_1_fu_594_p2;
wire   [0:0] icmp_ln35_fu_588_p2;
wire   [0:0] or_ln35_fu_600_p2;
wire   [0:0] and_ln35_fu_606_p2;
wire   [31:0] bitcast_ln43_fu_618_p1;
wire   [7:0] tmp_22_fu_621_p4;
wire   [22:0] trunc_ln43_fu_631_p1;
wire   [0:0] icmp_ln43_1_fu_641_p2;
wire   [0:0] icmp_ln43_fu_635_p2;
wire   [0:0] or_ln43_fu_647_p2;
wire   [0:0] and_ln43_fu_653_p2;
wire   [0:0] and_ln32_fu_564_p2;
wire   [0:0] xor_ln35_fu_612_p2;
wire   [0:0] and_ln35_2_fu_671_p2;
wire   [0:0] xor_ln43_fu_659_p2;
wire   [0:0] and_ln35_1_fu_665_p2;
wire   [0:0] and_ln43_1_fu_677_p2;
wire   [31:0] c_num_0_4_fu_683_p3;
wire   [31:0] c_num_0_6_fu_698_p3;
wire   [31:0] select_ln43_fu_714_p3;
wire   [0:0] or_ln43_1_fu_727_p2;
wire   [31:0] add_ln43_fu_722_p2;
wire   [31:0] select_ln43_1_fu_733_p3;
wire   [31:0] c_num_0_5_fu_690_p3;
wire   [31:0] bitcast_ln76_fu_763_p1;
wire   [127:0] or_ln76_2_fu_767_p5;
reg   [127:0] ap_return_preg;
reg   [59:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 60'd1;
#0 ap_return_preg = 128'd0;
end

ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_275),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_216),
    .din1(reg_208),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_260),
    .din1(reg_198),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_9_no_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_162_p0),
    .din1(normalizer_reg_862),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_9_no_dsp_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_166_p0),
    .din1(normalizer_reg_862),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_9_no_dsp_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_233),
    .din1(normalizer_reg_862),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 128'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_return_preg <= or_ln76_2_fu_767_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln27_15_fu_459_p2) & (1'd1 == and_ln27_16_reg_837) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_8_reg_89 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state60) & ((1'd0 == and_ln27_15_reg_846) | (1'd0 == and_ln27_16_reg_837)))) begin
        empty_8_reg_89 <= bitcast_ln178_fu_749_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln27_15_fu_459_p2) & (1'd1 == and_ln27_16_reg_837) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_reg_78 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state60) & ((1'd0 == and_ln27_15_reg_846) | (1'd0 == and_ln27_16_reg_837)))) begin
        empty_reg_78 <= select_ln178_fu_754_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln27_15_fu_459_p2) & (1'd1 == and_ln27_16_reg_837) & (1'b1 == ap_CS_fsm_state3))) begin
        p_1_0_reg_100 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state60) & ((1'd0 == and_ln27_15_reg_846) | (1'd0 == and_ln27_16_reg_837)))) begin
        p_1_0_reg_100 <= c_num_0_7_fu_706_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln27_15_fu_459_p2) & (1'd1 == and_ln27_16_reg_837) & (1'b1 == ap_CS_fsm_state3))) begin
        ref_tmp_01_0_reg_111 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state60) & ((1'd0 == and_ln27_15_reg_846) | (1'd0 == and_ln27_16_reg_837)))) begin
        ref_tmp_01_0_reg_111 <= c_p_1_fu_740_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add2_i_reg_909 <= grp_fu_936_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln27_16_reg_837) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln27_15_reg_846 <= and_ln27_15_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln27_16_reg_837 <= and_ln27_16_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        c_num_0_reg_792 <= c_num_0_fu_297_p1;
        c_num_1_reg_811 <= c_num_1_fu_344_p1;
        icmp_ln27_19_reg_801 <= icmp_ln27_19_fu_322_p2;
        icmp_ln27_20_reg_806 <= icmp_ln27_20_fu_328_p2;
        icmp_ln27_21_reg_819 <= icmp_ln27_21_fu_369_p2;
        icmp_ln27_22_reg_824 <= icmp_ln27_22_fu_375_p2;
        trunc_ln27_reg_786 <= trunc_ln27_fu_283_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        c_num_2_2_reg_914 <= grp_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln27_15_fu_459_p2) | (1'd0 == and_ln27_16_reg_837)))) begin
        c_num_2_reg_850 <= c_num_2_fu_465_p1;
        c_p_reg_856 <= c_p_fu_472_p2;
        normalizer_reg_862 <= normalizer_fu_486_p1;
        xor_ln143_reg_869 <= xor_ln143_fu_499_p2;
        xor_ln144_reg_874 <= xor_ln144_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        mul12_i1_i_reg_894 <= grp_fu_149_p2;
        mul15_i2_i_reg_899 <= grp_fu_154_p2;
        mul19_i2_i_reg_904 <= grp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mul15_i1_i_reg_889 <= grp_fu_963_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_198 <= grp_fu_162_p2;
        reg_208 <= grp_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_216 <= grp_fu_958_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_227 <= grp_fu_963_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_233 <= grp_fu_928_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_243 <= grp_fu_967_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_249 <= grp_fu_958_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_254 <= grp_fu_932_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_260 <= grp_fu_928_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_269 <= grp_fu_928_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state45))) begin
        reg_275 <= grp_fu_932_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) & ((1'd0 == and_ln27_15_reg_846) | (1'd0 == and_ln27_16_reg_837)))) begin
        ap_phi_mux_empty_8_phi_fu_93_p4 = bitcast_ln178_fu_749_p1;
    end else begin
        ap_phi_mux_empty_8_phi_fu_93_p4 = empty_8_reg_89;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) & ((1'd0 == and_ln27_15_reg_846) | (1'd0 == and_ln27_16_reg_837)))) begin
        ap_phi_mux_empty_phi_fu_82_p4 = select_ln178_fu_754_p3;
    end else begin
        ap_phi_mux_empty_phi_fu_82_p4 = empty_reg_78;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) & ((1'd0 == and_ln27_15_reg_846) | (1'd0 == and_ln27_16_reg_837)))) begin
        ap_phi_mux_p_1_0_phi_fu_104_p4 = c_num_0_7_fu_706_p3;
    end else begin
        ap_phi_mux_p_1_0_phi_fu_104_p4 = p_1_0_reg_100;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) & ((1'd0 == and_ln27_15_reg_846) | (1'd0 == and_ln27_16_reg_837)))) begin
        ap_phi_mux_ref_tmp_01_0_phi_fu_115_p4 = c_p_1_fu_740_p3;
    end else begin
        ap_phi_mux_ref_tmp_01_0_phi_fu_115_p4 = ref_tmp_01_0_reg_111;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_return = or_ln76_2_fu_767_p5;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_122_p0 = reg_254;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_122_p0 = reg_275;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_122_p0 = reg_269;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_fu_122_p0 = reg_249;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state38))) begin
        grp_fu_122_p0 = reg_227;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_122_p0 = reg_233;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_fu_122_p0 = reg_216;
    end else begin
        grp_fu_122_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_122_p1 = reg_233;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_122_p1 = mul19_i2_i_reg_904;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_122_p1 = reg_260;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_122_p1 = c_num_0_reg_792;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_122_p1 = c_num_1_reg_811;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_122_p1 = mul15_i1_i_reg_889;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state38))) begin
        grp_fu_122_p1 = reg_243;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_122_p1 = reg_216;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_fu_122_p1 = reg_227;
    end else begin
        grp_fu_122_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_126_p0 = mul12_i1_i_reg_894;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_126_p0 = reg_254;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_126_p0 = reg_260;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_126_p0 = reg_233;
    end else begin
        grp_fu_126_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_126_p1 = reg_260;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_126_p1 = mul15_i2_i_reg_899;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_126_p1 = reg_275;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_126_p1 = reg_243;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_126_p1 = c_num_2_reg_850;
    end else begin
        grp_fu_126_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_fu_134_p0 = reg_216;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_134_p0 = reg_233;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_134_p0 = c_num_0_reg_792;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_134_p0 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_134_p0 = reg_208;
    end else begin
        grp_fu_134_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_fu_134_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_134_p1 = c_num_1_reg_811;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_134_p1 = c_num_0_reg_792;
    end else begin
        grp_fu_134_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_138_p0 = reg_260;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_138_p0 = reg_216;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_138_p0 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_138_p0 = c_num_2_reg_850;
    end else begin
        grp_fu_138_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_138_p1 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_138_p1 = reg_208;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_138_p1 = c_num_0_reg_792;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state35))) begin
        grp_fu_138_p1 = 32'd0;
    end else begin
        grp_fu_138_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_144_p0 = reg_216;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_144_p0 = reg_233;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_144_p0 = c_num_1_reg_811;
    end else begin
        grp_fu_144_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_144_p1 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_144_p1 = 32'd0;
    end else begin
        grp_fu_144_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_162_p0 = add2_i_reg_909;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_162_p0 = bitcast_ln143_fu_520_p1;
    end else begin
        grp_fu_162_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_166_p0 = reg_275;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_166_p0 = bitcast_ln144_fu_524_p1;
    end else begin
        grp_fu_166_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_174_p0 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_174_p0 = bitcast_ln27_8_fu_418_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_174_p0 = c_num_0_fu_297_p1;
    end else begin
        grp_fu_174_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_179_p0 = reg_208;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_179_p0 = c_num_1_fu_344_p1;
    end else begin
        grp_fu_179_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'd1 == and_ln27_15_fu_459_p2) & (1'd1 == and_ln27_16_reg_837) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_722_p2 = (c_p_reg_856 + select_ln43_fu_714_p3);

assign and_ln27_13_fu_400_p2 = (or_ln27_10_fu_396_p2 & grp_fu_1005_p_dout0);

assign and_ln27_14_fu_406_p2 = (and_ln27_fu_390_p2 & and_ln27_13_fu_400_p2);

assign and_ln27_15_fu_459_p2 = (or_ln27_11_fu_453_p2 & grp_fu_1001_p_dout0);

assign and_ln27_16_fu_412_p2 = (icmp_ln27_fu_381_p2 & and_ln27_14_fu_406_p2);

assign and_ln27_fu_390_p2 = (or_ln27_fu_386_p2 & grp_fu_1001_p_dout0);

assign and_ln32_fu_564_p2 = (or_ln32_fu_558_p2 & grp_fu_1001_p_dout0);

assign and_ln35_1_fu_665_p2 = (xor_ln35_fu_612_p2 & and_ln32_fu_564_p2);

assign and_ln35_2_fu_671_p2 = (and_ln35_fu_606_p2 & and_ln32_fu_564_p2);

assign and_ln35_fu_606_p2 = (or_ln35_fu_600_p2 & grp_fu_1005_p_dout0);

assign and_ln43_1_fu_677_p2 = (xor_ln43_fu_659_p2 & and_ln35_2_fu_671_p2);

assign and_ln43_fu_653_p2 = (or_ln43_fu_647_p2 & grp_fu_1009_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign bitcast_ln143_fu_520_p1 = xor_ln143_reg_869;

assign bitcast_ln144_fu_524_p1 = xor_ln144_reg_874;

assign bitcast_ln178_fu_749_p1 = c_num_0_5_fu_690_p3;

assign bitcast_ln27_8_fu_418_p1 = grp_fu_189_p4;

assign bitcast_ln32_fu_528_p1 = reg_198;

assign bitcast_ln35_fu_570_p1 = reg_208;

assign bitcast_ln43_fu_618_p1 = c_num_2_2_reg_914;

assign bitcast_ln76_fu_763_p1 = ap_phi_mux_p_1_0_phi_fu_104_p4;

assign c_num_0_4_fu_683_p3 = ((and_ln35_1_fu_665_p2[0:0] == 1'b1) ? c_num_2_2_reg_914 : reg_208);

assign c_num_0_5_fu_690_p3 = ((and_ln43_1_fu_677_p2[0:0] == 1'b1) ? reg_208 : c_num_0_4_fu_683_p3);

assign c_num_0_6_fu_698_p3 = ((and_ln35_1_fu_665_p2[0:0] == 1'b1) ? reg_208 : reg_198);

assign c_num_0_7_fu_706_p3 = ((and_ln43_1_fu_677_p2[0:0] == 1'b1) ? c_num_2_2_reg_914 : c_num_0_6_fu_698_p3);

assign c_num_0_fu_297_p1 = trunc_ln4_fu_287_p4;

assign c_num_1_fu_344_p1 = trunc_ln27_4_fu_334_p4;

assign c_num_2_fu_465_p1 = grp_fu_189_p4;

assign c_p_1_fu_740_p3 = ((or_ln43_1_fu_727_p2[0:0] == 1'b1) ? add_ln43_fu_722_p2 : select_ln43_1_fu_733_p3);

assign c_p_fu_472_p2 = (trunc_ln27_reg_786 - trunc_ln172_fu_469_p1);

assign grp_fu_1001_p_ce = 1'b1;

assign grp_fu_1001_p_din0 = grp_fu_174_p0;

assign grp_fu_1001_p_din1 = 32'd0;

assign grp_fu_1001_p_opcode = 5'd1;

assign grp_fu_1005_p_ce = 1'b1;

assign grp_fu_1005_p_din0 = grp_fu_179_p0;

assign grp_fu_1005_p_din1 = 32'd0;

assign grp_fu_1005_p_opcode = 5'd1;

assign grp_fu_1009_p_ce = 1'b1;

assign grp_fu_1009_p_din0 = c_num_2_2_reg_914;

assign grp_fu_1009_p_din1 = 32'd0;

assign grp_fu_1009_p_opcode = 5'd1;

assign grp_fu_189_p4 = {{b_op1_read[127:96]}};

assign grp_fu_928_p_ce = 1'b1;

assign grp_fu_928_p_din0 = grp_fu_122_p0;

assign grp_fu_928_p_din1 = grp_fu_122_p1;

assign grp_fu_928_p_opcode = 2'd0;

assign grp_fu_932_p_ce = 1'b1;

assign grp_fu_932_p_din0 = grp_fu_126_p0;

assign grp_fu_932_p_din1 = grp_fu_126_p1;

assign grp_fu_932_p_opcode = 2'd0;

assign grp_fu_936_p_ce = 1'b1;

assign grp_fu_936_p_din0 = reg_269;

assign grp_fu_936_p_din1 = reg_216;

assign grp_fu_936_p_opcode = 2'd0;

assign grp_fu_958_p_ce = 1'b1;

assign grp_fu_958_p_din0 = grp_fu_134_p0;

assign grp_fu_958_p_din1 = grp_fu_134_p1;

assign grp_fu_963_p_ce = 1'b1;

assign grp_fu_963_p_din0 = grp_fu_138_p0;

assign grp_fu_963_p_din1 = grp_fu_138_p1;

assign grp_fu_967_p_ce = 1'b1;

assign grp_fu_967_p_din0 = grp_fu_144_p0;

assign grp_fu_967_p_din1 = grp_fu_144_p1;

assign icmp_ln27_19_fu_322_p2 = ((tmp_fu_302_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_20_fu_328_p2 = ((trunc_ln27_s_fu_312_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_21_fu_369_p2 = ((tmp_14_fu_349_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_22_fu_375_p2 = ((trunc_ln27_5_fu_359_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_23_fu_441_p2 = ((tmp_16_fu_423_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_24_fu_447_p2 = ((trunc_ln27_7_fu_432_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_381_p2 = ((trunc_ln27_reg_786 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_552_p2 = ((trunc_ln32_fu_542_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_546_p2 = ((tmp_18_fu_532_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_594_p2 = ((trunc_ln35_fu_584_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_588_p2 = ((tmp_20_fu_574_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_641_p2 = ((trunc_ln43_fu_631_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_635_p2 = ((tmp_22_fu_621_p4 != 8'd255) ? 1'b1 : 1'b0);

assign normalizer_fu_486_p1 = trunc_ln6_fu_477_p4;

assign or_ln27_10_fu_396_p2 = (icmp_ln27_22_reg_824 | icmp_ln27_21_reg_819);

assign or_ln27_11_fu_453_p2 = (icmp_ln27_24_fu_447_p2 | icmp_ln27_23_fu_441_p2);

assign or_ln27_fu_386_p2 = (icmp_ln27_20_reg_806 | icmp_ln27_19_reg_801);

assign or_ln32_fu_558_p2 = (icmp_ln32_fu_546_p2 | icmp_ln32_1_fu_552_p2);

assign or_ln35_fu_600_p2 = (icmp_ln35_fu_588_p2 | icmp_ln35_1_fu_594_p2);

assign or_ln43_1_fu_727_p2 = (and_ln43_1_fu_677_p2 | and_ln35_1_fu_665_p2);

assign or_ln43_fu_647_p2 = (icmp_ln43_fu_635_p2 | icmp_ln43_1_fu_641_p2);

assign or_ln76_2_fu_767_p5 = {{{{ap_phi_mux_empty_phi_fu_82_p4}, {ap_phi_mux_empty_8_phi_fu_93_p4}}, {bitcast_ln76_fu_763_p1}}, {ap_phi_mux_ref_tmp_01_0_phi_fu_115_p4}};

assign select_ln178_fu_754_p3 = ((or_ln43_1_fu_727_p2[0:0] == 1'b1) ? 32'd0 : bitcast_ln43_fu_618_p1);

assign select_ln43_1_fu_733_p3 = ((and_ln32_fu_564_p2[0:0] == 1'b1) ? 32'd0 : c_p_reg_856);

assign select_ln43_fu_714_p3 = ((and_ln43_1_fu_677_p2[0:0] == 1'b1) ? 32'd4294967294 : 32'd4294967295);

assign tmp_14_fu_349_p4 = {{b_op1_read[94:87]}};

assign tmp_16_fu_423_p4 = {{b_op1_read[126:119]}};

assign tmp_18_fu_532_p4 = {{bitcast_ln32_fu_528_p1[30:23]}};

assign tmp_20_fu_574_p4 = {{bitcast_ln35_fu_570_p1[30:23]}};

assign tmp_22_fu_621_p4 = {{bitcast_ln43_fu_618_p1[30:23]}};

assign tmp_fu_302_p4 = {{b_op1_read[62:55]}};

assign trunc_ln172_fu_469_p1 = p_read[31:0];

assign trunc_ln27_4_fu_334_p4 = {{b_op1_read[95:64]}};

assign trunc_ln27_5_fu_359_p4 = {{b_op1_read[86:64]}};

assign trunc_ln27_7_fu_432_p4 = {{b_op1_read[118:96]}};

assign trunc_ln27_fu_283_p1 = b_op1_read[31:0];

assign trunc_ln27_s_fu_312_p4 = {{b_op1_read[54:32]}};

assign trunc_ln32_fu_542_p1 = bitcast_ln32_fu_528_p1[22:0];

assign trunc_ln35_fu_584_p1 = bitcast_ln35_fu_570_p1[22:0];

assign trunc_ln43_fu_631_p1 = bitcast_ln43_fu_618_p1[22:0];

assign trunc_ln4_fu_287_p4 = {{b_op1_read[63:32]}};

assign trunc_ln6_fu_477_p4 = {{p_read[63:32]}};

assign trunc_ln7_fu_490_p4 = {{p_read[95:64]}};

assign trunc_ln8_fu_505_p4 = {{p_read[127:96]}};

assign xor_ln143_fu_499_p2 = (trunc_ln7_fu_490_p4 ^ 32'd2147483648);

assign xor_ln144_fu_514_p2 = (trunc_ln8_fu_505_p4 ^ 32'd2147483648);

assign xor_ln35_fu_612_p2 = (1'd1 ^ and_ln35_fu_606_p2);

assign xor_ln43_fu_659_p2 = (1'd1 ^ and_ln43_fu_653_p2);

endmodule //ban_interface_operator_div_assign
