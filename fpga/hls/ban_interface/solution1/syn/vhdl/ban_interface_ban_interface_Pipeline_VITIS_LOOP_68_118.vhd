-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_ban_interface_Pipeline_VITIS_LOOP_68_118 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_op1_load : IN STD_LOGIC_VECTOR (127 downto 0);
    res_12_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    res_12_out_ap_vld : OUT STD_LOGIC;
    grp_fu_7441_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_7441_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_7441_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_7441_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_7441_p_ce : OUT STD_LOGIC );
end;


architecture behav of ban_interface_ban_interface_Pipeline_VITIS_LOOP_68_118 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv97_1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln68_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal res_reg_81 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln68_reg_273_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln69_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs747_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs747_reg_282 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs747_reg_282_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs748_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs748_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs748_reg_287_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln69_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_2_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_64 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln68_fu_235_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_10 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln69_s_fu_113_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln69_fu_121_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln69_3_fu_127_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln69_6_fu_141_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln69_4_fu_145_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln69_7_fu_151_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_fu_161_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln69_fu_155_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln69_5_fu_137_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal shl_ln69_2_fu_177_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal select_ln69_fu_169_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln69_8_fu_183_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln69_fu_187_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln69_fu_193_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln69_fu_133_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln69_fu_199_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_s_fu_209_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_47_fu_219_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_48_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_49_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ban_interface_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component ban_interface_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln68_fu_107_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_64 <= add_ln68_fu_235_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv2_1;
                end if;
            end if; 
        end if;
    end process;

    res_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                res_reg_81 <= ap_const_lv1_1;
            elsif (((icmp_ln68_reg_273_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                res_reg_81 <= res_2_fu_260_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln68_reg_273 <= icmp_ln68_fu_107_p2;
                icmp_ln68_reg_273_pp0_iter1_reg <= icmp_ln68_reg_273;
                notlhs747_reg_282_pp0_iter1_reg <= notlhs747_reg_282;
                notrhs748_reg_287_pp0_iter1_reg <= notrhs748_reg_287;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_107_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                notlhs747_reg_282 <= notlhs747_fu_223_p2;
                notrhs748_reg_287 <= notrhs748_fu_229_p2;
                trunc_ln69_reg_277 <= trunc_ln69_fu_205_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln68_fu_235_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_10) + unsigned(ap_const_lv2_1));
    add_ln69_3_fu_127_p2 <= std_logic_vector(unsigned(shl_ln69_s_fu_113_p3) + unsigned(ap_const_lv7_3F));
    add_ln69_4_fu_145_p2 <= std_logic_vector(unsigned(zext_ln69_6_fu_141_p1) + unsigned(ap_const_lv8_1));
    add_ln69_fu_121_p2 <= std_logic_vector(unsigned(shl_ln69_s_fu_113_p3) + unsigned(ap_const_lv7_20));
    and_ln69_fu_193_p2 <= (sub_ln69_fu_187_p2 and b_op1_load);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln68_fu_107_p2)
    begin
        if (((icmp_ln68_fu_107_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln68_reg_273)
    begin
        if (((icmp_ln68_reg_273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_10_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_64)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_10 <= ap_const_lv2_1;
        else 
            ap_sig_allocacmp_i_10 <= i_fu_64;
        end if; 
    end process;

    bitcast_ln69_fu_246_p1 <= trunc_ln69_reg_277;
    empty_47_fu_219_p1 <= lshr_ln69_fu_199_p2(23 - 1 downto 0);
    empty_48_fu_250_p2 <= (notrhs748_reg_287_pp0_iter1_reg or notlhs747_reg_282_pp0_iter1_reg);
    empty_49_fu_254_p2 <= (grp_fu_7441_p_dout0 and empty_48_fu_250_p2);
    grp_fu_7441_p_ce <= ap_const_logic_1;
    grp_fu_7441_p_din0 <= bitcast_ln69_fu_246_p1;
    grp_fu_7441_p_din1 <= ap_const_lv32_0;
    grp_fu_7441_p_opcode <= ap_const_lv5_1;
    icmp_ln68_fu_107_p2 <= "1" when (ap_sig_allocacmp_i_10 = ap_const_lv2_3) else "0";
    lshr_ln69_fu_199_p2 <= std_logic_vector(shift_right(unsigned(and_ln69_fu_193_p2),to_integer(unsigned('0' & zext_ln69_fu_133_p1(31-1 downto 0)))));
    notlhs747_fu_223_p2 <= "0" when (tmp_s_fu_209_p4 = ap_const_lv8_FF) else "1";
    notrhs748_fu_229_p2 <= "1" when (empty_47_fu_219_p1 = ap_const_lv23_0) else "0";
    res_12_out <= res_reg_81;

    res_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_reg_273, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_12_out_ap_vld <= ap_const_logic_1;
        else 
            res_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_fu_260_p2 <= (res_reg_81 and empty_49_fu_254_p2);
    select_ln69_fu_169_p3 <= 
        ap_const_lv128_lc_2 when (tmp_fu_161_p3(0) = '1') else 
        shl_ln69_fu_155_p2;
    shl_ln69_2_fu_177_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv97_1),to_integer(unsigned('0' & zext_ln69_5_fu_137_p1(31-1 downto 0)))));
    shl_ln69_fu_155_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln69_7_fu_151_p1(31-1 downto 0)))));
    shl_ln69_s_fu_113_p3 <= (ap_sig_allocacmp_i_10 & ap_const_lv5_0);
    sub_ln69_fu_187_p2 <= std_logic_vector(unsigned(select_ln69_fu_169_p3) - unsigned(zext_ln69_8_fu_183_p1));
    tmp_fu_161_p3 <= add_ln69_4_fu_145_p2(7 downto 7);
    tmp_s_fu_209_p4 <= lshr_ln69_fu_199_p2(30 downto 23);
    trunc_ln69_fu_205_p1 <= lshr_ln69_fu_199_p2(32 - 1 downto 0);
    zext_ln69_5_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_fu_121_p2),97));
    zext_ln69_6_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_3_fu_127_p2),8));
    zext_ln69_7_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_4_fu_145_p2),128));
    zext_ln69_8_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln69_2_fu_177_p2),128));
    zext_ln69_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_fu_121_p2),128));
end behav;
