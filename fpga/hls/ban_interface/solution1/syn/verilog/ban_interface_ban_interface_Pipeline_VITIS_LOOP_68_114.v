// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_ban_interface_Pipeline_VITIS_LOOP_68_114 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_op1_load,
        res_10_out,
        res_10_out_ap_vld,
        grp_fu_7441_p_din0,
        grp_fu_7441_p_din1,
        grp_fu_7441_p_opcode,
        grp_fu_7441_p_dout0,
        grp_fu_7441_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] b_op1_load;
output  [0:0] res_10_out;
output   res_10_out_ap_vld;
output  [31:0] grp_fu_7441_p_din0;
output  [31:0] grp_fu_7441_p_din1;
output  [4:0] grp_fu_7441_p_opcode;
input  [0:0] grp_fu_7441_p_dout0;
output   grp_fu_7441_p_ce;

reg ap_idle;
reg res_10_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln68_fu_107_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] res_reg_81;
reg   [0:0] icmp_ln68_reg_273;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln68_reg_273_pp0_iter1_reg;
wire   [31:0] trunc_ln69_fu_205_p1;
reg   [31:0] trunc_ln69_reg_277;
wire   [0:0] notlhs843_fu_223_p2;
reg   [0:0] notlhs843_reg_282;
reg   [0:0] notlhs843_reg_282_pp0_iter1_reg;
wire   [0:0] notrhs844_fu_229_p2;
reg   [0:0] notrhs844_reg_287;
reg   [0:0] notrhs844_reg_287_pp0_iter1_reg;
wire   [31:0] bitcast_ln69_fu_246_p1;
wire   [0:0] res_4_fu_260_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [1:0] i_11_fu_64;
wire   [1:0] add_ln68_fu_235_p2;
reg   [1:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire   [6:0] shl_ln69_5_fu_113_p3;
wire   [6:0] add_ln69_5_fu_121_p2;
wire   [6:0] add_ln69_6_fu_127_p2;
wire   [7:0] zext_ln69_12_fu_141_p1;
wire   [7:0] add_ln69_fu_145_p2;
wire   [127:0] zext_ln69_13_fu_151_p1;
wire   [0:0] tmp_fu_161_p3;
wire   [127:0] shl_ln69_3_fu_155_p2;
wire   [96:0] zext_ln69_fu_137_p1;
wire   [96:0] shl_ln69_fu_177_p2;
wire   [127:0] select_ln69_fu_169_p3;
wire   [127:0] zext_ln69_14_fu_183_p1;
wire   [127:0] sub_ln69_fu_187_p2;
wire   [127:0] and_ln69_fu_193_p2;
wire   [127:0] zext_ln69_3_fu_133_p1;
wire   [127:0] lshr_ln69_fu_199_p2;
wire   [7:0] tmp_s_fu_209_p4;
wire   [22:0] empty_53_fu_219_p1;
wire   [0:0] empty_54_fu_250_p2;
wire   [0:0] empty_55_fu_254_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ban_interface_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln68_fu_107_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_11_fu_64 <= add_ln68_fu_235_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_11_fu_64 <= 2'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_reg_81 <= 1'd1;
    end else if (((icmp_ln68_reg_273_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_reg_81 <= res_4_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln68_reg_273 <= icmp_ln68_fu_107_p2;
        icmp_ln68_reg_273_pp0_iter1_reg <= icmp_ln68_reg_273;
        notlhs843_reg_282_pp0_iter1_reg <= notlhs843_reg_282;
        notrhs844_reg_287_pp0_iter1_reg <= notrhs844_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_107_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        notlhs843_reg_282 <= notlhs843_fu_223_p2;
        notrhs844_reg_287 <= notrhs844_fu_229_p2;
        trunc_ln69_reg_277 <= trunc_ln69_fu_205_p1;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_107_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_273 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 2'd1;
    end else begin
        ap_sig_allocacmp_i = i_11_fu_64;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_273 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_10_out_ap_vld = 1'b1;
    end else begin
        res_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_fu_235_p2 = (ap_sig_allocacmp_i + 2'd1);

assign add_ln69_5_fu_121_p2 = (shl_ln69_5_fu_113_p3 + 7'd32);

assign add_ln69_6_fu_127_p2 = (shl_ln69_5_fu_113_p3 + 7'd63);

assign add_ln69_fu_145_p2 = (zext_ln69_12_fu_141_p1 + 8'd1);

assign and_ln69_fu_193_p2 = (sub_ln69_fu_187_p2 & b_op1_load);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln69_fu_246_p1 = trunc_ln69_reg_277;

assign empty_53_fu_219_p1 = lshr_ln69_fu_199_p2[22:0];

assign empty_54_fu_250_p2 = (notrhs844_reg_287_pp0_iter1_reg | notlhs843_reg_282_pp0_iter1_reg);

assign empty_55_fu_254_p2 = (grp_fu_7441_p_dout0 & empty_54_fu_250_p2);

assign grp_fu_7441_p_ce = 1'b1;

assign grp_fu_7441_p_din0 = bitcast_ln69_fu_246_p1;

assign grp_fu_7441_p_din1 = 32'd0;

assign grp_fu_7441_p_opcode = 5'd1;

assign icmp_ln68_fu_107_p2 = ((ap_sig_allocacmp_i == 2'd3) ? 1'b1 : 1'b0);

assign lshr_ln69_fu_199_p2 = and_ln69_fu_193_p2 >> zext_ln69_3_fu_133_p1;

assign notlhs843_fu_223_p2 = ((tmp_s_fu_209_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs844_fu_229_p2 = ((empty_53_fu_219_p1 == 23'd0) ? 1'b1 : 1'b0);

assign res_10_out = res_reg_81;

assign res_4_fu_260_p2 = (res_reg_81 & empty_55_fu_254_p2);

assign select_ln69_fu_169_p3 = ((tmp_fu_161_p3[0:0] == 1'b1) ? 128'd0 : shl_ln69_3_fu_155_p2);

assign shl_ln69_3_fu_155_p2 = 128'd1 << zext_ln69_13_fu_151_p1;

assign shl_ln69_5_fu_113_p3 = {{ap_sig_allocacmp_i}, {5'd0}};

assign shl_ln69_fu_177_p2 = 97'd1 << zext_ln69_fu_137_p1;

assign sub_ln69_fu_187_p2 = (select_ln69_fu_169_p3 - zext_ln69_14_fu_183_p1);

assign tmp_fu_161_p3 = add_ln69_fu_145_p2[32'd7];

assign tmp_s_fu_209_p4 = {{lshr_ln69_fu_199_p2[30:23]}};

assign trunc_ln69_fu_205_p1 = lshr_ln69_fu_199_p2[31:0];

assign zext_ln69_12_fu_141_p1 = add_ln69_6_fu_127_p2;

assign zext_ln69_13_fu_151_p1 = add_ln69_fu_145_p2;

assign zext_ln69_14_fu_183_p1 = shl_ln69_fu_177_p2;

assign zext_ln69_3_fu_133_p1 = add_ln69_5_fu_121_p2;

assign zext_ln69_fu_137_p1 = add_ln69_5_fu_121_p2;

endmodule //ban_interface_ban_interface_Pipeline_VITIS_LOOP_68_114
