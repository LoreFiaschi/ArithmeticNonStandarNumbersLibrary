// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_ban_interface_Pipeline_VITIS_LOOP_92_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_300,
        tmp_299,
        tmp_298,
        zext_ln92,
        xor_ln92,
        out_87440_out,
        out_87440_out_ap_vld,
        out_86434_out,
        out_86434_out_ap_vld,
        out_85428_out,
        out_85428_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] tmp_300;
input  [31:0] tmp_299;
input  [31:0] tmp_298;
input  [1:0] zext_ln92;
input  [1:0] xor_ln92;
output  [31:0] out_87440_out;
output   out_87440_out_ap_vld;
output  [31:0] out_86434_out;
output   out_86434_out_ap_vld;
output  [31:0] out_85428_out;
output   out_85428_out_ap_vld;

reg ap_idle;
reg out_87440_out_ap_vld;
reg out_86434_out_ap_vld;
reg out_85428_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln92_fu_182_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] base_fu_52;
wire   [1:0] add_ln93_1_fu_187_p2;
wire    ap_loop_init;
wire   [1:0] base_15_load_fu_179_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] idx_12_fu_56;
wire   [2:0] add_ln93_fu_205_p2;
wire   [2:0] zext_ln92_cast_fu_135_p1;
reg   [31:0] res_num_1_fu_60;
wire   [31:0] res_num_1_28_fu_215_p5;
reg   [31:0] res_num_1_22_fu_64;
reg   [31:0] res_num_1_23_fu_68;
reg   [31:0] res_num_1_24_fu_72;
reg   [31:0] res_num_1_25_fu_76;
reg   [31:0] res_num_1_26_fu_80;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] res_num_1_28_fu_215_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_195;
reg    ap_condition_199;
reg    ap_condition_202;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ban_interface_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U290(
    .din0(res_num_1_24_fu_72),
    .din1(res_num_1_25_fu_76),
    .din2(res_num_1_26_fu_80),
    .din3(res_num_1_28_fu_215_p4),
    .dout(res_num_1_28_fu_215_p5)
);

ban_interface_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            base_fu_52 <= 2'd0;
        end else if (((icmp_ln92_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            base_fu_52 <= add_ln93_1_fu_187_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx_12_fu_56 <= zext_ln92_cast_fu_135_p1;
        end else if (((icmp_ln92_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            idx_12_fu_56 <= add_ln93_fu_205_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            res_num_1_22_fu_64 <= tmp_299;
        end else if ((1'b1 == ap_condition_195)) begin
            res_num_1_22_fu_64 <= res_num_1_28_fu_215_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            res_num_1_23_fu_68 <= tmp_300;
        end else if ((1'b1 == ap_condition_199)) begin
            res_num_1_23_fu_68 <= res_num_1_28_fu_215_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            res_num_1_24_fu_72 <= tmp_298;
        end else if ((1'b1 == ap_condition_202)) begin
            res_num_1_24_fu_72 <= res_num_1_28_fu_215_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            res_num_1_25_fu_76 <= tmp_299;
        end else if ((1'b1 == ap_condition_195)) begin
            res_num_1_25_fu_76 <= res_num_1_28_fu_215_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            res_num_1_26_fu_80 <= tmp_300;
        end else if ((1'b1 == ap_condition_199)) begin
            res_num_1_26_fu_80 <= res_num_1_28_fu_215_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            res_num_1_fu_60 <= tmp_298;
        end else if ((1'b1 == ap_condition_202)) begin
            res_num_1_fu_60 <= res_num_1_28_fu_215_p5;
        end
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_85428_out_ap_vld = 1'b1;
    end else begin
        out_85428_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_86434_out_ap_vld = 1'b1;
    end else begin
        out_86434_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_87440_out_ap_vld = 1'b1;
    end else begin
        out_87440_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln93_1_fu_187_p2 = (base_fu_52 + 2'd1);

assign add_ln93_fu_205_p2 = (idx_12_fu_56 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_195 = ((base_15_load_fu_179_p1 == 2'd1) & (icmp_ln92_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_199 = (~(base_15_load_fu_179_p1 == 2'd0) & ~(base_15_load_fu_179_p1 == 2'd1) & (icmp_ln92_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_202 = ((base_15_load_fu_179_p1 == 2'd0) & (icmp_ln92_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign base_15_load_fu_179_p1 = base_fu_52;

assign icmp_ln92_fu_182_p2 = ((base_fu_52 == xor_ln92) ? 1'b1 : 1'b0);

assign out_85428_out = res_num_1_fu_60;

assign out_86434_out = res_num_1_22_fu_64;

assign out_87440_out = res_num_1_23_fu_68;

assign res_num_1_28_fu_215_p4 = idx_12_fu_56[1:0];

assign zext_ln92_cast_fu_135_p1 = zext_ln92;

endmodule //ban_interface_ban_interface_Pipeline_VITIS_LOOP_92_2
