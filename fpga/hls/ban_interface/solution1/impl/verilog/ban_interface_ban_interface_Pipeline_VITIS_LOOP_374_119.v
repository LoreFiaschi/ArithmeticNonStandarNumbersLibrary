// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_ban_interface_Pipeline_VITIS_LOOP_374_119 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_op1_load,
        res_15_out,
        res_15_out_ap_vld,
        grp_fu_7617_p_din0,
        grp_fu_7617_p_din1,
        grp_fu_7617_p_opcode,
        grp_fu_7617_p_dout0,
        grp_fu_7617_p_ce,
        grp_fu_2095_p_din0,
        grp_fu_2095_p_din1,
        grp_fu_2095_p_opcode,
        grp_fu_2095_p_dout0,
        grp_fu_2095_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] b_op1_load;
output  [0:0] res_15_out;
output   res_15_out_ap_vld;
output  [31:0] grp_fu_7617_p_din0;
output  [31:0] grp_fu_7617_p_din1;
output  [4:0] grp_fu_7617_p_opcode;
input  [0:0] grp_fu_7617_p_dout0;
output   grp_fu_7617_p_ce;
output  [31:0] grp_fu_2095_p_din0;
output  [31:0] grp_fu_2095_p_din1;
output  [4:0] grp_fu_2095_p_opcode;
input  [0:0] grp_fu_2095_p_dout0;
output   grp_fu_2095_p_ce;

reg ap_idle;
reg res_15_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln374_fu_126_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] solved_reg_83;
reg   [0:0] res_reg_95;
reg   [0:0] icmp_ln374_reg_323;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln374_reg_323_pp0_iter1_reg;
wire   [31:0] trunc_ln375_fu_224_p1;
reg   [31:0] trunc_ln375_reg_327;
wire   [0:0] or_ln375_fu_254_p2;
reg   [0:0] or_ln375_reg_332;
reg   [0:0] or_ln375_reg_332_pp0_iter1_reg;
wire   [31:0] bitcast_ln375_fu_271_p1;
wire   [0:0] res_8_fu_304_p2;
wire   [0:0] solved_2_fu_310_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [1:0] i_fu_66;
wire   [1:0] add_ln374_fu_260_p2;
reg   [1:0] ap_sig_allocacmp_i_17;
wire    ap_block_pp0_stage0_01001;
wire   [6:0] shl_ln375_6_fu_132_p3;
wire   [6:0] add_ln375_fu_140_p2;
wire   [6:0] add_ln375_3_fu_146_p2;
wire   [7:0] zext_ln375_5_fu_160_p1;
wire   [7:0] add_ln375_4_fu_164_p2;
wire   [127:0] zext_ln375_6_fu_170_p1;
wire   [0:0] tmp_fu_180_p3;
wire   [127:0] shl_ln375_fu_174_p2;
wire   [96:0] zext_ln375_fu_156_p1;
wire   [96:0] shl_ln375_2_fu_196_p2;
wire   [127:0] select_ln375_fu_188_p3;
wire   [127:0] zext_ln375_7_fu_202_p1;
wire   [127:0] sub_ln375_fu_206_p2;
wire   [127:0] and_ln375_fu_212_p2;
wire   [127:0] zext_ln375_4_fu_152_p1;
wire   [127:0] lshr_ln375_fu_218_p2;
wire   [7:0] tmp_s_fu_228_p4;
wire   [22:0] trunc_ln375_2_fu_238_p1;
wire   [0:0] icmp_ln375_2_fu_248_p2;
wire   [0:0] icmp_ln375_fu_242_p2;
wire   [0:0] and_ln375_2_fu_276_p2;
wire   [0:0] or_ln375_2_fu_286_p2;
wire   [0:0] and_ln377_fu_281_p2;
wire   [0:0] xor_ln375_fu_292_p2;
wire   [0:0] sel_tmp143_fu_298_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ban_interface_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln374_fu_126_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= add_ln374_fu_260_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 2'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_reg_95 <= 1'd0;
    end else if (((icmp_ln374_reg_323_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_reg_95 <= res_8_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        solved_reg_83 <= 1'd0;
    end else if (((icmp_ln374_reg_323_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        solved_reg_83 <= solved_2_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln374_reg_323 <= icmp_ln374_fu_126_p2;
        icmp_ln374_reg_323_pp0_iter1_reg <= icmp_ln374_reg_323;
        or_ln375_reg_332_pp0_iter1_reg <= or_ln375_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln374_fu_126_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln375_reg_332 <= or_ln375_fu_254_p2;
        trunc_ln375_reg_327 <= trunc_ln375_fu_224_p1;
    end
end

always @ (*) begin
    if (((icmp_ln374_fu_126_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln374_reg_323 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_17 = 2'd1;
    end else begin
        ap_sig_allocacmp_i_17 = i_fu_66;
    end
end

always @ (*) begin
    if (((icmp_ln374_reg_323 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_15_out_ap_vld = 1'b1;
    end else begin
        res_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln374_fu_260_p2 = (ap_sig_allocacmp_i_17 + 2'd1);

assign add_ln375_3_fu_146_p2 = (shl_ln375_6_fu_132_p3 + 7'd63);

assign add_ln375_4_fu_164_p2 = (zext_ln375_5_fu_160_p1 + 8'd1);

assign add_ln375_fu_140_p2 = (shl_ln375_6_fu_132_p3 + 7'd32);

assign and_ln375_2_fu_276_p2 = (or_ln375_reg_332_pp0_iter1_reg & grp_fu_7617_p_dout0);

assign and_ln375_fu_212_p2 = (sub_ln375_fu_206_p2 & b_op1_load);

assign and_ln377_fu_281_p2 = (or_ln375_reg_332_pp0_iter1_reg & grp_fu_2095_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln375_fu_271_p1 = trunc_ln375_reg_327;

assign grp_fu_2095_p_ce = 1'b1;

assign grp_fu_2095_p_din0 = bitcast_ln375_fu_271_p1;

assign grp_fu_2095_p_din1 = 32'd0;

assign grp_fu_2095_p_opcode = 5'd4;

assign grp_fu_7617_p_ce = 1'b1;

assign grp_fu_7617_p_din0 = bitcast_ln375_fu_271_p1;

assign grp_fu_7617_p_din1 = 32'd0;

assign grp_fu_7617_p_opcode = 5'd1;

assign icmp_ln374_fu_126_p2 = ((ap_sig_allocacmp_i_17 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln375_2_fu_248_p2 = ((trunc_ln375_2_fu_238_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln375_fu_242_p2 = ((tmp_s_fu_228_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln375_fu_218_p2 = and_ln375_fu_212_p2 >> zext_ln375_4_fu_152_p1;

assign or_ln375_2_fu_286_p2 = (solved_reg_83 | and_ln375_2_fu_276_p2);

assign or_ln375_fu_254_p2 = (icmp_ln375_fu_242_p2 | icmp_ln375_2_fu_248_p2);

assign res_15_out = res_reg_95;

assign res_8_fu_304_p2 = (sel_tmp143_fu_298_p2 | res_reg_95);

assign sel_tmp143_fu_298_p2 = (xor_ln375_fu_292_p2 & and_ln377_fu_281_p2);

assign select_ln375_fu_188_p3 = ((tmp_fu_180_p3[0:0] == 1'b1) ? 128'd0 : shl_ln375_fu_174_p2);

assign shl_ln375_2_fu_196_p2 = 97'd1 << zext_ln375_fu_156_p1;

assign shl_ln375_6_fu_132_p3 = {{ap_sig_allocacmp_i_17}, {5'd0}};

assign shl_ln375_fu_174_p2 = 128'd1 << zext_ln375_6_fu_170_p1;

assign solved_2_fu_310_p2 = (xor_ln375_fu_292_p2 | solved_reg_83);

assign sub_ln375_fu_206_p2 = (select_ln375_fu_188_p3 - zext_ln375_7_fu_202_p1);

assign tmp_fu_180_p3 = add_ln375_4_fu_164_p2[32'd7];

assign tmp_s_fu_228_p4 = {{lshr_ln375_fu_218_p2[30:23]}};

assign trunc_ln375_2_fu_238_p1 = lshr_ln375_fu_218_p2[22:0];

assign trunc_ln375_fu_224_p1 = lshr_ln375_fu_218_p2[31:0];

assign xor_ln375_fu_292_p2 = (or_ln375_2_fu_286_p2 ^ 1'd1);

assign zext_ln375_4_fu_152_p1 = add_ln375_fu_140_p2;

assign zext_ln375_5_fu_160_p1 = add_ln375_3_fu_146_p2;

assign zext_ln375_6_fu_170_p1 = add_ln375_4_fu_164_p2;

assign zext_ln375_7_fu_202_p1 = shl_ln375_2_fu_196_p2;

assign zext_ln375_fu_156_p1 = add_ln375_fu_140_p2;

endmodule //ban_interface_ban_interface_Pipeline_VITIS_LOOP_374_119
