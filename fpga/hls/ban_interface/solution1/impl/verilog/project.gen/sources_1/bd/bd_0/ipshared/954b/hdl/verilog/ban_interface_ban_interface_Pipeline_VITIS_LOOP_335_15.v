// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_ban_interface_Pipeline_VITIS_LOOP_335_15 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_op2_load,
        b_op1_load,
        res_4_out,
        res_4_out_ap_vld,
        grp_fu_7441_p_din0,
        grp_fu_7441_p_din1,
        grp_fu_7441_p_opcode,
        grp_fu_7441_p_dout0,
        grp_fu_7441_p_ce,
        grp_fu_2063_p_din0,
        grp_fu_2063_p_din1,
        grp_fu_2063_p_opcode,
        grp_fu_2063_p_dout0,
        grp_fu_2063_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] b_op2_load;
input  [127:0] b_op1_load;
output  [0:0] res_4_out;
output   res_4_out_ap_vld;
output  [31:0] grp_fu_7441_p_din0;
output  [31:0] grp_fu_7441_p_din1;
output  [4:0] grp_fu_7441_p_opcode;
input  [0:0] grp_fu_7441_p_dout0;
output   grp_fu_7441_p_ce;
output  [31:0] grp_fu_2063_p_din0;
output  [31:0] grp_fu_2063_p_din1;
output  [4:0] grp_fu_2063_p_opcode;
input  [0:0] grp_fu_2063_p_dout0;
output   grp_fu_2063_p_ce;

reg ap_idle;
reg res_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln335_fu_132_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] solved_1_reg_91;
reg   [0:0] res_4_reg_103;
reg   [0:0] icmp_ln335_reg_406;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln335_reg_406_pp0_iter1_reg;
wire   [31:0] trunc_ln336_fu_236_p1;
reg   [31:0] trunc_ln336_reg_410;
wire   [31:0] trunc_ln336_7_fu_252_p1;
reg   [31:0] trunc_ln336_7_reg_415;
wire   [0:0] and_ln336_fu_320_p2;
reg   [0:0] and_ln336_reg_420;
reg   [0:0] and_ln336_reg_420_pp0_iter1_reg;
wire   [31:0] bitcast_ln336_2_fu_331_p1;
wire   [31:0] bitcast_ln336_fu_336_p1;
wire   [0:0] or_ln336_8_fu_363_p2;
wire   [0:0] solved_fu_393_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [1:0] i_7_fu_68;
wire   [1:0] add_ln335_fu_138_p2;
reg   [1:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire   [6:0] shl_ln336_3_fu_144_p3;
wire   [6:0] add_ln336_3_fu_152_p2;
wire   [6:0] add_ln336_4_fu_158_p2;
wire   [7:0] zext_ln336_8_fu_172_p1;
wire   [7:0] add_ln336_fu_176_p2;
wire   [127:0] zext_ln336_9_fu_182_p1;
wire   [0:0] tmp_fu_192_p3;
wire   [127:0] shl_ln336_2_fu_186_p2;
wire   [96:0] zext_ln336_fu_168_p1;
wire   [96:0] shl_ln336_fu_208_p2;
wire   [127:0] select_ln336_fu_200_p3;
wire   [127:0] zext_ln336_10_fu_214_p1;
wire   [127:0] sub_ln336_fu_218_p2;
wire   [127:0] and_ln336_2_fu_224_p2;
wire   [127:0] zext_ln336_2_fu_164_p1;
wire   [127:0] lshr_ln336_2_fu_230_p2;
wire   [127:0] and_ln336_3_fu_240_p2;
wire   [127:0] lshr_ln336_fu_246_p2;
wire   [7:0] tmp_s_fu_256_p4;
wire   [22:0] trunc_ln336_8_fu_266_p1;
wire   [0:0] icmp_ln336_7_fu_290_p2;
wire   [0:0] icmp_ln336_fu_284_p2;
wire   [7:0] tmp_119_fu_270_p4;
wire   [22:0] trunc_ln336_9_fu_280_p1;
wire   [0:0] icmp_ln336_9_fu_308_p2;
wire   [0:0] icmp_ln336_8_fu_302_p2;
wire   [0:0] or_ln336_6_fu_296_p2;
wire   [0:0] or_ln336_7_fu_314_p2;
wire   [0:0] and_ln336_8_fu_341_p2;
wire   [0:0] sel_tmp35_fu_351_p2;
wire   [0:0] and_ln336_9_fu_357_p2;
wire   [0:0] or_ln336_9_fu_369_p2;
wire   [0:0] and_ln341_2_fu_346_p2;
wire   [0:0] xor_ln336_fu_375_p2;
wire   [0:0] and_ln341_fu_381_p2;
wire   [0:0] or_ln336_10_fu_387_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ban_interface_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln335_fu_132_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_7_fu_68 <= add_ln335_fu_138_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_7_fu_68 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_4_reg_103 <= 1'd0;
    end else if (((icmp_ln335_reg_406_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_4_reg_103 <= or_ln336_8_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        solved_1_reg_91 <= 1'd0;
    end else if (((icmp_ln335_reg_406_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        solved_1_reg_91 <= solved_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln335_fu_132_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln336_reg_420 <= and_ln336_fu_320_p2;
        trunc_ln336_7_reg_415 <= trunc_ln336_7_fu_252_p1;
        trunc_ln336_reg_410 <= trunc_ln336_fu_236_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln336_reg_420_pp0_iter1_reg <= and_ln336_reg_420;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln335_reg_406 <= icmp_ln335_fu_132_p2;
        icmp_ln335_reg_406_pp0_iter1_reg <= icmp_ln335_reg_406;
    end
end

always @ (*) begin
    if (((icmp_ln335_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln335_reg_406 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 2'd0;
    end else begin
        ap_sig_allocacmp_i = i_7_fu_68;
    end
end

always @ (*) begin
    if (((icmp_ln335_reg_406 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_4_out_ap_vld = 1'b1;
    end else begin
        res_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln335_fu_138_p2 = (ap_sig_allocacmp_i + 2'd1);

assign add_ln336_3_fu_152_p2 = (shl_ln336_3_fu_144_p3 + 7'd32);

assign add_ln336_4_fu_158_p2 = (shl_ln336_3_fu_144_p3 + 7'd63);

assign add_ln336_fu_176_p2 = (zext_ln336_8_fu_172_p1 + 8'd1);

assign and_ln336_2_fu_224_p2 = (sub_ln336_fu_218_p2 & b_op2_load);

assign and_ln336_3_fu_240_p2 = (sub_ln336_fu_218_p2 & b_op1_load);

assign and_ln336_8_fu_341_p2 = (grp_fu_7441_p_dout0 & and_ln336_reg_420_pp0_iter1_reg);

assign and_ln336_9_fu_357_p2 = (sel_tmp35_fu_351_p2 & and_ln336_8_fu_341_p2);

assign and_ln336_fu_320_p2 = (or_ln336_7_fu_314_p2 & or_ln336_6_fu_296_p2);

assign and_ln341_2_fu_346_p2 = (grp_fu_2063_p_dout0 & and_ln336_reg_420_pp0_iter1_reg);

assign and_ln341_fu_381_p2 = (xor_ln336_fu_375_p2 & and_ln341_2_fu_346_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln336_2_fu_331_p1 = trunc_ln336_reg_410;

assign bitcast_ln336_fu_336_p1 = trunc_ln336_7_reg_415;

assign grp_fu_2063_p_ce = 1'b1;

assign grp_fu_2063_p_din0 = bitcast_ln336_2_fu_331_p1;

assign grp_fu_2063_p_din1 = bitcast_ln336_fu_336_p1;

assign grp_fu_2063_p_opcode = 5'd2;

assign grp_fu_7441_p_ce = 1'b1;

assign grp_fu_7441_p_din0 = bitcast_ln336_2_fu_331_p1;

assign grp_fu_7441_p_din1 = bitcast_ln336_fu_336_p1;

assign grp_fu_7441_p_opcode = 5'd4;

assign icmp_ln335_fu_132_p2 = ((ap_sig_allocacmp_i == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln336_7_fu_290_p2 = ((trunc_ln336_8_fu_266_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln336_8_fu_302_p2 = ((tmp_119_fu_270_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln336_9_fu_308_p2 = ((trunc_ln336_9_fu_280_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln336_fu_284_p2 = ((tmp_s_fu_256_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln336_2_fu_230_p2 = and_ln336_2_fu_224_p2 >> zext_ln336_2_fu_164_p1;

assign lshr_ln336_fu_246_p2 = and_ln336_3_fu_240_p2 >> zext_ln336_2_fu_164_p1;

assign or_ln336_10_fu_387_p2 = (and_ln341_fu_381_p2 | and_ln336_9_fu_357_p2);

assign or_ln336_6_fu_296_p2 = (icmp_ln336_fu_284_p2 | icmp_ln336_7_fu_290_p2);

assign or_ln336_7_fu_314_p2 = (icmp_ln336_9_fu_308_p2 | icmp_ln336_8_fu_302_p2);

assign or_ln336_8_fu_363_p2 = (res_4_reg_103 | and_ln336_9_fu_357_p2);

assign or_ln336_9_fu_369_p2 = (solved_1_reg_91 | and_ln336_8_fu_341_p2);

assign res_4_out = res_4_reg_103;

assign sel_tmp35_fu_351_p2 = (solved_1_reg_91 ^ 1'd1);

assign select_ln336_fu_200_p3 = ((tmp_fu_192_p3[0:0] == 1'b1) ? 128'd0 : shl_ln336_2_fu_186_p2);

assign shl_ln336_2_fu_186_p2 = 128'd1 << zext_ln336_9_fu_182_p1;

assign shl_ln336_3_fu_144_p3 = {{ap_sig_allocacmp_i}, {5'd0}};

assign shl_ln336_fu_208_p2 = 97'd1 << zext_ln336_fu_168_p1;

assign solved_fu_393_p2 = (solved_1_reg_91 | or_ln336_10_fu_387_p2);

assign sub_ln336_fu_218_p2 = (select_ln336_fu_200_p3 - zext_ln336_10_fu_214_p1);

assign tmp_119_fu_270_p4 = {{lshr_ln336_fu_246_p2[30:23]}};

assign tmp_fu_192_p3 = add_ln336_fu_176_p2[32'd7];

assign tmp_s_fu_256_p4 = {{lshr_ln336_2_fu_230_p2[30:23]}};

assign trunc_ln336_7_fu_252_p1 = lshr_ln336_fu_246_p2[31:0];

assign trunc_ln336_8_fu_266_p1 = lshr_ln336_2_fu_230_p2[22:0];

assign trunc_ln336_9_fu_280_p1 = lshr_ln336_fu_246_p2[22:0];

assign trunc_ln336_fu_236_p1 = lshr_ln336_2_fu_230_p2[31:0];

assign xor_ln336_fu_375_p2 = (or_ln336_9_fu_369_p2 ^ 1'd1);

assign zext_ln336_10_fu_214_p1 = shl_ln336_fu_208_p2;

assign zext_ln336_2_fu_164_p1 = add_ln336_3_fu_152_p2;

assign zext_ln336_8_fu_172_p1 = add_ln336_4_fu_158_p2;

assign zext_ln336_9_fu_182_p1 = add_ln336_fu_176_p2;

assign zext_ln336_fu_168_p1 = add_ln336_3_fu_152_p2;

endmodule //ban_interface_ban_interface_Pipeline_VITIS_LOOP_335_15
