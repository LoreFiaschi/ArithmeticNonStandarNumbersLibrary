// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_mul_body_Pipeline_VITIS_LOOP_169_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read13,
        empty_16,
        empty_17,
        empty,
        aux_address0,
        aux_ce0,
        aux_we0,
        aux_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] p_read13;
input  [31:0] empty_16;
input  [31:0] empty_17;
input  [31:0] empty;
output  [2:0] aux_address0;
output   aux_ce0;
output   aux_we0;
output  [31:0] aux_d0;

reg ap_idle;
reg aux_ce0;
reg aux_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln169_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] i_9_reg_520;
reg   [2:0] i_9_reg_520_pp0_iter1_reg;
reg   [2:0] i_9_reg_520_pp0_iter2_reg;
reg   [2:0] i_9_reg_520_pp0_iter3_reg;
reg   [2:0] i_9_reg_520_pp0_iter4_reg;
reg   [2:0] i_9_reg_520_pp0_iter5_reg;
reg   [2:0] i_9_reg_520_pp0_iter6_reg;
reg   [2:0] i_9_reg_520_pp0_iter7_reg;
reg   [2:0] i_9_reg_520_pp0_iter8_reg;
reg   [2:0] i_9_reg_520_pp0_iter9_reg;
reg   [2:0] i_9_reg_520_pp0_iter10_reg;
reg   [2:0] i_9_reg_520_pp0_iter11_reg;
reg   [2:0] i_9_reg_520_pp0_iter12_reg;
reg   [2:0] i_9_reg_520_pp0_iter13_reg;
reg   [2:0] i_9_reg_520_pp0_iter14_reg;
reg   [2:0] i_9_reg_520_pp0_iter15_reg;
wire   [0:0] icmp_ln172_fu_160_p2;
reg   [0:0] icmp_ln172_reg_531;
reg   [0:0] icmp_ln172_reg_531_pp0_iter1_reg;
reg   [0:0] icmp_ln172_reg_531_pp0_iter2_reg;
reg   [0:0] icmp_ln172_reg_531_pp0_iter3_reg;
reg   [0:0] icmp_ln172_reg_531_pp0_iter4_reg;
reg   [0:0] icmp_ln172_reg_531_pp0_iter5_reg;
reg   [0:0] icmp_ln172_reg_531_pp0_iter6_reg;
wire   [31:0] trunc_ln173_fu_240_p1;
reg   [31:0] trunc_ln173_reg_536;
wire   [31:0] grp_fu_128_p2;
reg   [31:0] mul_i_i_reg_546;
wire   [0:0] icmp_ln172_3_fu_258_p2;
reg   [0:0] icmp_ln172_3_reg_551;
reg   [0:0] icmp_ln172_3_reg_551_pp0_iter5_reg;
reg   [0:0] icmp_ln172_3_reg_551_pp0_iter6_reg;
reg   [0:0] icmp_ln172_3_reg_551_pp0_iter7_reg;
reg   [0:0] icmp_ln172_3_reg_551_pp0_iter8_reg;
reg   [0:0] icmp_ln172_3_reg_551_pp0_iter9_reg;
reg   [0:0] icmp_ln172_3_reg_551_pp0_iter10_reg;
wire   [31:0] trunc_ln173_1_fu_353_p1;
reg   [31:0] trunc_ln173_1_reg_556;
wire   [31:0] tmp_78_fu_361_p3;
reg   [31:0] tmp_78_reg_566;
reg   [31:0] tmp_78_reg_566_pp0_iter8_reg;
reg   [31:0] tmp_78_reg_566_pp0_iter9_reg;
reg   [31:0] tmp_78_reg_566_pp0_iter10_reg;
wire   [31:0] grp_fu_132_p2;
reg   [31:0] mul_1_i_i_reg_572;
wire   [0:0] icmp_ln172_4_fu_373_p2;
reg   [0:0] icmp_ln172_4_reg_577;
reg   [0:0] icmp_ln172_4_reg_577_pp0_iter9_reg;
reg   [0:0] icmp_ln172_4_reg_577_pp0_iter10_reg;
reg   [0:0] icmp_ln172_4_reg_577_pp0_iter11_reg;
reg   [0:0] icmp_ln172_4_reg_577_pp0_iter12_reg;
reg   [0:0] icmp_ln172_4_reg_577_pp0_iter13_reg;
reg   [0:0] icmp_ln172_4_reg_577_pp0_iter14_reg;
wire   [31:0] trunc_ln173_2_fu_468_p1;
reg   [31:0] trunc_ln173_2_reg_582;
wire   [31:0] tmp_81_fu_476_p3;
reg   [31:0] tmp_81_reg_592;
reg   [31:0] tmp_81_reg_592_pp0_iter12_reg;
reg   [31:0] tmp_81_reg_592_pp0_iter13_reg;
reg   [31:0] tmp_81_reg_592_pp0_iter14_reg;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] mul_2_i_i_reg_598;
wire   [31:0] tmp_85_fu_482_p3;
reg   [31:0] tmp_85_reg_603;
wire   [63:0] trunc_ln172_cast_fu_488_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] i_fu_74;
wire   [2:0] add_ln169_fu_154_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_9;
wire   [31:0] grp_fu_128_p0;
wire   [31:0] grp_fu_132_p0;
wire   [31:0] grp_fu_136_p0;
wire   [7:0] shl_ln_fu_166_p3;
wire   [7:0] add_ln173_fu_174_p2;
wire   [7:0] add_ln173_1_fu_184_p2;
wire   [127:0] zext_ln173_1_fu_190_p1;
wire   [0:0] tmp_76_fu_200_p3;
wire   [127:0] shl_ln173_fu_194_p2;
wire   [127:0] zext_ln173_fu_180_p1;
wire   [127:0] select_ln173_fu_208_p3;
wire   [127:0] shl_ln173_1_fu_216_p2;
wire   [127:0] sub_ln173_fu_222_p2;
wire   [127:0] and_ln173_fu_228_p2;
wire   [127:0] lshr_ln173_fu_234_p2;
wire   [2:0] add_ln172_fu_253_p2;
wire   [7:0] tmp_s_fu_264_p3;
wire  signed [36:0] sext_ln173_fu_272_p1;
wire   [37:0] zext_ln173_2_fu_276_p1;
wire   [37:0] add_ln173_2_fu_280_p2;
wire   [37:0] add_ln173_3_fu_290_p2;
wire   [127:0] zext_ln173_4_fu_296_p1;
wire   [30:0] tmp_79_fu_306_p4;
wire   [0:0] icmp_ln173_fu_316_p2;
wire   [127:0] shl_ln173_2_fu_300_p2;
wire   [127:0] zext_ln173_3_fu_286_p1;
wire   [127:0] select_ln173_1_fu_322_p3;
wire   [127:0] shl_ln173_3_fu_330_p2;
wire   [127:0] sub_ln173_1_fu_336_p2;
wire   [127:0] and_ln173_1_fu_342_p2;
wire   [127:0] lshr_ln173_1_fu_347_p2;
wire   [31:0] grp_fu_115_p2;
wire   [2:0] add_ln172_2_fu_368_p2;
wire   [7:0] tmp_82_fu_379_p3;
wire  signed [36:0] sext_ln173_1_fu_387_p1;
wire   [37:0] zext_ln173_5_fu_391_p1;
wire   [37:0] add_ln173_4_fu_395_p2;
wire   [37:0] add_ln173_5_fu_405_p2;
wire   [127:0] zext_ln173_7_fu_411_p1;
wire   [30:0] tmp_83_fu_421_p4;
wire   [0:0] icmp_ln173_1_fu_431_p2;
wire   [127:0] shl_ln173_4_fu_415_p2;
wire   [127:0] zext_ln173_6_fu_401_p1;
wire   [127:0] select_ln173_2_fu_437_p3;
wire   [127:0] shl_ln173_5_fu_445_p2;
wire   [127:0] sub_ln173_2_fu_451_p2;
wire   [127:0] and_ln173_2_fu_457_p2;
wire   [127:0] lshr_ln173_2_fu_462_p2;
wire   [31:0] grp_fu_120_p2;
wire   [31:0] grp_fu_124_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U448(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_i_i_reg_546),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_115_p2)
);

ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U449(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_78_reg_566),
    .din1(mul_1_i_i_reg_572),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U450(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_81_reg_592),
    .din1(mul_2_i_i_reg_598),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U451(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_128_p0),
    .din1(empty_16),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U452(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_132_p0),
    .din1(empty_17),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U453(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_136_p0),
    .din1(empty),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

ban_interface_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln169_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_74 <= add_ln169_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_74 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        i_9_reg_520_pp0_iter10_reg <= i_9_reg_520_pp0_iter9_reg;
        i_9_reg_520_pp0_iter11_reg <= i_9_reg_520_pp0_iter10_reg;
        i_9_reg_520_pp0_iter12_reg <= i_9_reg_520_pp0_iter11_reg;
        i_9_reg_520_pp0_iter13_reg <= i_9_reg_520_pp0_iter12_reg;
        i_9_reg_520_pp0_iter14_reg <= i_9_reg_520_pp0_iter13_reg;
        i_9_reg_520_pp0_iter15_reg <= i_9_reg_520_pp0_iter14_reg;
        i_9_reg_520_pp0_iter2_reg <= i_9_reg_520_pp0_iter1_reg;
        i_9_reg_520_pp0_iter3_reg <= i_9_reg_520_pp0_iter2_reg;
        i_9_reg_520_pp0_iter4_reg <= i_9_reg_520_pp0_iter3_reg;
        i_9_reg_520_pp0_iter5_reg <= i_9_reg_520_pp0_iter4_reg;
        i_9_reg_520_pp0_iter6_reg <= i_9_reg_520_pp0_iter5_reg;
        i_9_reg_520_pp0_iter7_reg <= i_9_reg_520_pp0_iter6_reg;
        i_9_reg_520_pp0_iter8_reg <= i_9_reg_520_pp0_iter7_reg;
        i_9_reg_520_pp0_iter9_reg <= i_9_reg_520_pp0_iter8_reg;
        icmp_ln172_3_reg_551 <= icmp_ln172_3_fu_258_p2;
        icmp_ln172_3_reg_551_pp0_iter10_reg <= icmp_ln172_3_reg_551_pp0_iter9_reg;
        icmp_ln172_3_reg_551_pp0_iter5_reg <= icmp_ln172_3_reg_551;
        icmp_ln172_3_reg_551_pp0_iter6_reg <= icmp_ln172_3_reg_551_pp0_iter5_reg;
        icmp_ln172_3_reg_551_pp0_iter7_reg <= icmp_ln172_3_reg_551_pp0_iter6_reg;
        icmp_ln172_3_reg_551_pp0_iter8_reg <= icmp_ln172_3_reg_551_pp0_iter7_reg;
        icmp_ln172_3_reg_551_pp0_iter9_reg <= icmp_ln172_3_reg_551_pp0_iter8_reg;
        icmp_ln172_4_reg_577 <= icmp_ln172_4_fu_373_p2;
        icmp_ln172_4_reg_577_pp0_iter10_reg <= icmp_ln172_4_reg_577_pp0_iter9_reg;
        icmp_ln172_4_reg_577_pp0_iter11_reg <= icmp_ln172_4_reg_577_pp0_iter10_reg;
        icmp_ln172_4_reg_577_pp0_iter12_reg <= icmp_ln172_4_reg_577_pp0_iter11_reg;
        icmp_ln172_4_reg_577_pp0_iter13_reg <= icmp_ln172_4_reg_577_pp0_iter12_reg;
        icmp_ln172_4_reg_577_pp0_iter14_reg <= icmp_ln172_4_reg_577_pp0_iter13_reg;
        icmp_ln172_4_reg_577_pp0_iter9_reg <= icmp_ln172_4_reg_577;
        icmp_ln172_reg_531_pp0_iter2_reg <= icmp_ln172_reg_531_pp0_iter1_reg;
        icmp_ln172_reg_531_pp0_iter3_reg <= icmp_ln172_reg_531_pp0_iter2_reg;
        icmp_ln172_reg_531_pp0_iter4_reg <= icmp_ln172_reg_531_pp0_iter3_reg;
        icmp_ln172_reg_531_pp0_iter5_reg <= icmp_ln172_reg_531_pp0_iter4_reg;
        icmp_ln172_reg_531_pp0_iter6_reg <= icmp_ln172_reg_531_pp0_iter5_reg;
        tmp_78_reg_566 <= tmp_78_fu_361_p3;
        tmp_78_reg_566_pp0_iter10_reg <= tmp_78_reg_566_pp0_iter9_reg;
        tmp_78_reg_566_pp0_iter8_reg <= tmp_78_reg_566;
        tmp_78_reg_566_pp0_iter9_reg <= tmp_78_reg_566_pp0_iter8_reg;
        tmp_81_reg_592 <= tmp_81_fu_476_p3;
        tmp_81_reg_592_pp0_iter12_reg <= tmp_81_reg_592;
        tmp_81_reg_592_pp0_iter13_reg <= tmp_81_reg_592_pp0_iter12_reg;
        tmp_81_reg_592_pp0_iter14_reg <= tmp_81_reg_592_pp0_iter13_reg;
        tmp_85_reg_603 <= tmp_85_fu_482_p3;
        trunc_ln173_1_reg_556 <= trunc_ln173_1_fu_353_p1;
        trunc_ln173_2_reg_582 <= trunc_ln173_2_fu_468_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_9_reg_520 <= ap_sig_allocacmp_i_9;
        i_9_reg_520_pp0_iter1_reg <= i_9_reg_520;
        icmp_ln172_reg_531_pp0_iter1_reg <= icmp_ln172_reg_531;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln169_fu_148_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln172_reg_531 <= icmp_ln172_fu_160_p2;
        trunc_ln173_reg_536 <= trunc_ln173_fu_240_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln172_3_reg_551_pp0_iter6_reg == 1'd1))) begin
        mul_1_i_i_reg_572 <= grp_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln172_4_reg_577_pp0_iter10_reg == 1'd1))) begin
        mul_2_i_i_reg_598 <= grp_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln172_reg_531_pp0_iter2_reg == 1'd1))) begin
        mul_i_i_reg_546 <= grp_fu_128_p2;
    end
end

always @ (*) begin
    if (((icmp_ln169_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_9 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_9 = i_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        aux_ce0 = 1'b1;
    end else begin
        aux_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        aux_we0 = 1'b1;
    end else begin
        aux_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln169_fu_154_p2 = (ap_sig_allocacmp_i_9 + 3'd1);

assign add_ln172_2_fu_368_p2 = ($signed(i_9_reg_520_pp0_iter7_reg) + $signed(3'd6));

assign add_ln172_fu_253_p2 = ($signed(i_9_reg_520_pp0_iter3_reg) + $signed(3'd7));

assign add_ln173_1_fu_184_p2 = (shl_ln_fu_166_p3 + 8'd64);

assign add_ln173_2_fu_280_p2 = (zext_ln173_2_fu_276_p1 + 38'd32);

assign add_ln173_3_fu_290_p2 = (zext_ln173_2_fu_276_p1 + 38'd64);

assign add_ln173_4_fu_395_p2 = (zext_ln173_5_fu_391_p1 + 38'd32);

assign add_ln173_5_fu_405_p2 = (zext_ln173_5_fu_391_p1 + 38'd64);

assign add_ln173_fu_174_p2 = (shl_ln_fu_166_p3 + 8'd32);

assign and_ln173_1_fu_342_p2 = (sub_ln173_1_fu_336_p2 & p_read13);

assign and_ln173_2_fu_457_p2 = (sub_ln173_2_fu_451_p2 & p_read13);

assign and_ln173_fu_228_p2 = (sub_ln173_fu_222_p2 & p_read13);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign aux_address0 = trunc_ln172_cast_fu_488_p1;

assign aux_d0 = tmp_85_reg_603;

assign grp_fu_128_p0 = trunc_ln173_reg_536;

assign grp_fu_132_p0 = trunc_ln173_1_reg_556;

assign grp_fu_136_p0 = trunc_ln173_2_reg_582;

assign icmp_ln169_fu_148_p2 = ((ap_sig_allocacmp_i_9 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln172_3_fu_258_p2 = ((add_ln172_fu_253_p2 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln172_4_fu_373_p2 = ((add_ln172_2_fu_368_p2 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_160_p2 = ((ap_sig_allocacmp_i_9 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln173_1_fu_431_p2 = ((tmp_83_fu_421_p4 != 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_316_p2 = ((tmp_79_fu_306_p4 != 31'd0) ? 1'b1 : 1'b0);

assign lshr_ln173_1_fu_347_p2 = and_ln173_1_fu_342_p2 >> zext_ln173_3_fu_286_p1;

assign lshr_ln173_2_fu_462_p2 = and_ln173_2_fu_457_p2 >> zext_ln173_6_fu_401_p1;

assign lshr_ln173_fu_234_p2 = and_ln173_fu_228_p2 >> zext_ln173_fu_180_p1;

assign select_ln173_1_fu_322_p3 = ((icmp_ln173_fu_316_p2[0:0] == 1'b1) ? 128'd0 : shl_ln173_2_fu_300_p2);

assign select_ln173_2_fu_437_p3 = ((icmp_ln173_1_fu_431_p2[0:0] == 1'b1) ? 128'd0 : shl_ln173_4_fu_415_p2);

assign select_ln173_fu_208_p3 = ((tmp_76_fu_200_p3[0:0] == 1'b1) ? 128'd0 : shl_ln173_fu_194_p2);

assign sext_ln173_1_fu_387_p1 = $signed(tmp_82_fu_379_p3);

assign sext_ln173_fu_272_p1 = $signed(tmp_s_fu_264_p3);

assign shl_ln173_1_fu_216_p2 = 128'd1 << zext_ln173_fu_180_p1;

assign shl_ln173_2_fu_300_p2 = 128'd1 << zext_ln173_4_fu_296_p1;

assign shl_ln173_3_fu_330_p2 = 128'd1 << zext_ln173_3_fu_286_p1;

assign shl_ln173_4_fu_415_p2 = 128'd1 << zext_ln173_7_fu_411_p1;

assign shl_ln173_5_fu_445_p2 = 128'd1 << zext_ln173_6_fu_401_p1;

assign shl_ln173_fu_194_p2 = 128'd1 << zext_ln173_1_fu_190_p1;

assign shl_ln_fu_166_p3 = {{ap_sig_allocacmp_i_9}, {5'd0}};

assign sub_ln173_1_fu_336_p2 = (select_ln173_1_fu_322_p3 - shl_ln173_3_fu_330_p2);

assign sub_ln173_2_fu_451_p2 = (select_ln173_2_fu_437_p3 - shl_ln173_5_fu_445_p2);

assign sub_ln173_fu_222_p2 = (select_ln173_fu_208_p3 - shl_ln173_1_fu_216_p2);

assign tmp_76_fu_200_p3 = add_ln173_1_fu_184_p2[32'd7];

assign tmp_78_fu_361_p3 = ((icmp_ln172_reg_531_pp0_iter6_reg[0:0] == 1'b1) ? grp_fu_115_p2 : 32'd0);

assign tmp_79_fu_306_p4 = {{add_ln173_3_fu_290_p2[37:7]}};

assign tmp_81_fu_476_p3 = ((icmp_ln172_3_reg_551_pp0_iter10_reg[0:0] == 1'b1) ? grp_fu_120_p2 : tmp_78_reg_566_pp0_iter10_reg);

assign tmp_82_fu_379_p3 = {{add_ln172_2_fu_368_p2}, {5'd0}};

assign tmp_83_fu_421_p4 = {{add_ln173_5_fu_405_p2[37:7]}};

assign tmp_85_fu_482_p3 = ((icmp_ln172_4_reg_577_pp0_iter14_reg[0:0] == 1'b1) ? grp_fu_124_p2 : tmp_81_reg_592_pp0_iter14_reg);

assign tmp_s_fu_264_p3 = {{add_ln172_fu_253_p2}, {5'd0}};

assign trunc_ln172_cast_fu_488_p1 = i_9_reg_520_pp0_iter15_reg;

assign trunc_ln173_1_fu_353_p1 = lshr_ln173_1_fu_347_p2[31:0];

assign trunc_ln173_2_fu_468_p1 = lshr_ln173_2_fu_462_p2[31:0];

assign trunc_ln173_fu_240_p1 = lshr_ln173_fu_234_p2[31:0];

assign zext_ln173_1_fu_190_p1 = add_ln173_1_fu_184_p2;

assign zext_ln173_2_fu_276_p1 = $unsigned(sext_ln173_fu_272_p1);

assign zext_ln173_3_fu_286_p1 = add_ln173_2_fu_280_p2;

assign zext_ln173_4_fu_296_p1 = add_ln173_3_fu_290_p2;

assign zext_ln173_5_fu_391_p1 = $unsigned(sext_ln173_1_fu_387_p1);

assign zext_ln173_6_fu_401_p1 = add_ln173_4_fu_395_p2;

assign zext_ln173_7_fu_411_p1 = add_ln173_5_fu_405_p2;

assign zext_ln173_fu_180_p1 = add_ln173_fu_174_p2;

endmodule //ban_interface_mul_body_Pipeline_VITIS_LOOP_169_1
