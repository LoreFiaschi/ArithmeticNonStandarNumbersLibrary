// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_sqrt_Pipeline_VITIS_LOOP_444_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read13,
        normalizer_1,
        eps_1_1_02_out,
        eps_1_1_02_out_ap_vld,
        eps_1_2_01_out,
        eps_1_2_01_out_ap_vld,
        num_res_load_2_out,
        num_res_load_2_out_ap_vld,
        num_res_load_1_out,
        num_res_load_1_out_ap_vld,
        eps_2_1_08_out,
        eps_2_1_08_out_ap_vld,
        eps_2_2_07_out,
        eps_2_2_07_out_ap_vld,
        grp_fu_222_p_din0,
        grp_fu_222_p_din1,
        grp_fu_222_p_dout0,
        grp_fu_222_p_ce,
        grp_fu_633_p_din0,
        grp_fu_633_p_din1,
        grp_fu_633_p_dout0,
        grp_fu_633_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] p_read13;
input  [31:0] normalizer_1;
output  [31:0] eps_1_1_02_out;
output   eps_1_1_02_out_ap_vld;
output  [31:0] eps_1_2_01_out;
output   eps_1_2_01_out_ap_vld;
output  [31:0] num_res_load_2_out;
output   num_res_load_2_out_ap_vld;
output  [31:0] num_res_load_1_out;
output   num_res_load_1_out_ap_vld;
output  [31:0] eps_2_1_08_out;
output   eps_2_1_08_out_ap_vld;
output  [31:0] eps_2_2_07_out;
output   eps_2_2_07_out_ap_vld;
output  [31:0] grp_fu_222_p_din0;
output  [31:0] grp_fu_222_p_din1;
input  [31:0] grp_fu_222_p_dout0;
output   grp_fu_222_p_ce;
output  [31:0] grp_fu_633_p_din0;
output  [31:0] grp_fu_633_p_din1;
input  [31:0] grp_fu_633_p_dout0;
output   grp_fu_633_p_ce;

reg ap_idle;
reg eps_1_1_02_out_ap_vld;
reg eps_1_2_01_out_ap_vld;
reg num_res_load_2_out_ap_vld;
reg num_res_load_1_out_ap_vld;
reg eps_2_1_08_out_ap_vld;
reg eps_2_2_07_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln444_fu_165_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln444_reg_450;
reg   [0:0] icmp_ln444_reg_450_pp0_iter1_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter2_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter3_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter4_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter5_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter6_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter7_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter8_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter9_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter10_reg;
reg   [0:0] icmp_ln444_reg_450_pp0_iter11_reg;
wire   [31:0] trunc_ln445_fu_263_p1;
reg   [31:0] trunc_ln445_reg_454;
wire   [0:0] icmp_ln445_fu_267_p2;
reg   [0:0] icmp_ln445_reg_459;
reg   [0:0] icmp_ln445_reg_459_pp0_iter1_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter2_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter3_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter4_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter5_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter6_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter7_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter8_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter9_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter10_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter11_reg;
reg   [0:0] icmp_ln445_reg_459_pp0_iter12_reg;
wire   [31:0] bitcast_ln445_fu_284_p1;
reg   [31:0] eps_2_1_reg_474;
reg   [31:0] conv_reg_483;
reg   [1:0] i_1_fu_66;
wire   [1:0] add_ln444_fu_273_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0;
reg   [31:0] eps_2_2_fu_70;
wire   [31:0] eps_2_2_6_fu_306_p3;
reg   [31:0] eps_2_2_3_fu_74;
wire   [31:0] eps_2_2_5_fu_300_p3;
reg   [31:0] num_res_load_1_fu_78;
wire   [31:0] select_ln446_1_fu_356_p3;
reg   [31:0] num_res_load_2_fu_82;
wire   [31:0] select_ln446_fu_350_p3;
reg   [31:0] eps_1_2_fu_86;
wire   [31:0] eps_1_2_6_fu_318_p3;
reg   [31:0] eps_1_2_3_fu_90;
wire   [31:0] eps_1_2_5_fu_312_p3;
wire    ap_block_pp0_stage0_01001;
wire   [6:0] shl_ln1_fu_171_p3;
wire   [6:0] add_ln445_fu_179_p2;
wire   [6:0] add_ln445_1_fu_185_p2;
wire   [7:0] zext_ln445_2_fu_199_p1;
wire   [7:0] add_ln445_2_fu_203_p2;
wire   [127:0] zext_ln445_3_fu_209_p1;
wire   [0:0] tmp_fu_219_p3;
wire   [127:0] shl_ln445_fu_213_p2;
wire   [96:0] zext_ln445_1_fu_195_p1;
wire   [96:0] shl_ln445_1_fu_235_p2;
wire   [127:0] select_ln445_fu_227_p3;
wire   [127:0] zext_ln445_4_fu_241_p1;
wire   [127:0] sub_ln445_fu_245_p2;
wire   [127:0] and_ln445_fu_251_p2;
wire   [127:0] zext_ln445_fu_191_p1;
wire   [127:0] lshr_ln445_fu_257_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ban_interface_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln444_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_66 <= add_ln444_fu_273_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_66 <= 2'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        conv_reg_483 <= grp_fu_222_p_dout0;
        eps_2_1_reg_474 <= grp_fu_633_p_dout0;
        icmp_ln444_reg_450_pp0_iter10_reg <= icmp_ln444_reg_450_pp0_iter9_reg;
        icmp_ln444_reg_450_pp0_iter11_reg <= icmp_ln444_reg_450_pp0_iter10_reg;
        icmp_ln444_reg_450_pp0_iter2_reg <= icmp_ln444_reg_450_pp0_iter1_reg;
        icmp_ln444_reg_450_pp0_iter3_reg <= icmp_ln444_reg_450_pp0_iter2_reg;
        icmp_ln444_reg_450_pp0_iter4_reg <= icmp_ln444_reg_450_pp0_iter3_reg;
        icmp_ln444_reg_450_pp0_iter5_reg <= icmp_ln444_reg_450_pp0_iter4_reg;
        icmp_ln444_reg_450_pp0_iter6_reg <= icmp_ln444_reg_450_pp0_iter5_reg;
        icmp_ln444_reg_450_pp0_iter7_reg <= icmp_ln444_reg_450_pp0_iter6_reg;
        icmp_ln444_reg_450_pp0_iter8_reg <= icmp_ln444_reg_450_pp0_iter7_reg;
        icmp_ln444_reg_450_pp0_iter9_reg <= icmp_ln444_reg_450_pp0_iter8_reg;
        icmp_ln445_reg_459_pp0_iter10_reg <= icmp_ln445_reg_459_pp0_iter9_reg;
        icmp_ln445_reg_459_pp0_iter11_reg <= icmp_ln445_reg_459_pp0_iter10_reg;
        icmp_ln445_reg_459_pp0_iter12_reg <= icmp_ln445_reg_459_pp0_iter11_reg;
        icmp_ln445_reg_459_pp0_iter2_reg <= icmp_ln445_reg_459_pp0_iter1_reg;
        icmp_ln445_reg_459_pp0_iter3_reg <= icmp_ln445_reg_459_pp0_iter2_reg;
        icmp_ln445_reg_459_pp0_iter4_reg <= icmp_ln445_reg_459_pp0_iter3_reg;
        icmp_ln445_reg_459_pp0_iter5_reg <= icmp_ln445_reg_459_pp0_iter4_reg;
        icmp_ln445_reg_459_pp0_iter6_reg <= icmp_ln445_reg_459_pp0_iter5_reg;
        icmp_ln445_reg_459_pp0_iter7_reg <= icmp_ln445_reg_459_pp0_iter6_reg;
        icmp_ln445_reg_459_pp0_iter8_reg <= icmp_ln445_reg_459_pp0_iter7_reg;
        icmp_ln445_reg_459_pp0_iter9_reg <= icmp_ln445_reg_459_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln444_reg_450 <= icmp_ln444_fu_165_p2;
        icmp_ln444_reg_450_pp0_iter1_reg <= icmp_ln444_reg_450;
        icmp_ln445_reg_459_pp0_iter1_reg <= icmp_ln445_reg_459;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        eps_1_2_3_fu_90 <= eps_1_2_5_fu_312_p3;
        eps_1_2_fu_86 <= eps_1_2_6_fu_318_p3;
        eps_2_2_3_fu_74 <= eps_2_2_5_fu_300_p3;
        eps_2_2_fu_70 <= eps_2_2_6_fu_306_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_fu_165_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln445_reg_459 <= icmp_ln445_fu_267_p2;
        trunc_ln445_reg_454 <= trunc_ln445_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        num_res_load_1_fu_78 <= select_ln446_1_fu_356_p3;
        num_res_load_2_fu_82 <= select_ln446_fu_350_p3;
    end
end

always @ (*) begin
    if (((icmp_ln444_fu_165_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 2'd1;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln444_reg_450_pp0_iter11_reg == 1'd1))) begin
        eps_1_1_02_out_ap_vld = 1'b1;
    end else begin
        eps_1_1_02_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln444_reg_450_pp0_iter11_reg == 1'd1))) begin
        eps_1_2_01_out_ap_vld = 1'b1;
    end else begin
        eps_1_2_01_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln444_reg_450_pp0_iter11_reg == 1'd1))) begin
        eps_2_1_08_out_ap_vld = 1'b1;
    end else begin
        eps_2_1_08_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln444_reg_450_pp0_iter11_reg == 1'd1))) begin
        eps_2_2_07_out_ap_vld = 1'b1;
    end else begin
        eps_2_2_07_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln444_reg_450_pp0_iter11_reg == 1'd1))) begin
        num_res_load_1_out_ap_vld = 1'b1;
    end else begin
        num_res_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln444_reg_450_pp0_iter11_reg == 1'd1))) begin
        num_res_load_2_out_ap_vld = 1'b1;
    end else begin
        num_res_load_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln444_fu_273_p2 = (ap_sig_allocacmp_i + 2'd1);

assign add_ln445_1_fu_185_p2 = (shl_ln1_fu_171_p3 + 7'd63);

assign add_ln445_2_fu_203_p2 = (zext_ln445_2_fu_199_p1 + 8'd1);

assign add_ln445_fu_179_p2 = (shl_ln1_fu_171_p3 + 7'd32);

assign and_ln445_fu_251_p2 = (sub_ln445_fu_245_p2 & p_read13);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln445_fu_284_p1 = trunc_ln445_reg_454;

assign eps_1_1_02_out = eps_1_2_3_fu_90;

assign eps_1_2_01_out = eps_1_2_fu_86;

assign eps_1_2_5_fu_312_p3 = ((icmp_ln445_reg_459_pp0_iter9_reg[0:0] == 1'b1) ? eps_2_1_reg_474 : eps_1_2_3_fu_90);

assign eps_1_2_6_fu_318_p3 = ((icmp_ln445_reg_459_pp0_iter9_reg[0:0] == 1'b1) ? eps_1_2_fu_86 : eps_2_1_reg_474);

assign eps_2_1_08_out = eps_2_2_3_fu_74;

assign eps_2_2_07_out = eps_2_2_fu_70;

assign eps_2_2_5_fu_300_p3 = ((icmp_ln445_reg_459_pp0_iter9_reg[0:0] == 1'b1) ? eps_2_1_reg_474 : eps_2_2_3_fu_74);

assign eps_2_2_6_fu_306_p3 = ((icmp_ln445_reg_459_pp0_iter9_reg[0:0] == 1'b1) ? eps_2_2_fu_70 : eps_2_1_reg_474);

assign grp_fu_222_p_ce = 1'b1;

assign grp_fu_222_p_din0 = eps_2_1_reg_474;

assign grp_fu_222_p_din1 = 32'd1056964608;

assign grp_fu_633_p_ce = 1'b1;

assign grp_fu_633_p_din0 = bitcast_ln445_fu_284_p1;

assign grp_fu_633_p_din1 = normalizer_1;

assign icmp_ln444_fu_165_p2 = ((ap_sig_allocacmp_i == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln445_fu_267_p2 = ((ap_sig_allocacmp_i == 2'd1) ? 1'b1 : 1'b0);

assign lshr_ln445_fu_257_p2 = and_ln445_fu_251_p2 >> zext_ln445_fu_191_p1;

assign num_res_load_1_out = num_res_load_1_fu_78;

assign num_res_load_2_out = num_res_load_2_fu_82;

assign select_ln445_fu_227_p3 = ((tmp_fu_219_p3[0:0] == 1'b1) ? 128'd0 : shl_ln445_fu_213_p2);

assign select_ln446_1_fu_356_p3 = ((icmp_ln445_reg_459_pp0_iter12_reg[0:0] == 1'b1) ? conv_reg_483 : num_res_load_1_fu_78);

assign select_ln446_fu_350_p3 = ((icmp_ln445_reg_459_pp0_iter12_reg[0:0] == 1'b1) ? num_res_load_2_fu_82 : conv_reg_483);

assign shl_ln1_fu_171_p3 = {{ap_sig_allocacmp_i}, {5'd0}};

assign shl_ln445_1_fu_235_p2 = 97'd1 << zext_ln445_1_fu_195_p1;

assign shl_ln445_fu_213_p2 = 128'd1 << zext_ln445_3_fu_209_p1;

assign sub_ln445_fu_245_p2 = (select_ln445_fu_227_p3 - zext_ln445_4_fu_241_p1);

assign tmp_fu_219_p3 = add_ln445_2_fu_203_p2[32'd7];

assign trunc_ln445_fu_263_p1 = lshr_ln445_fu_257_p2[31:0];

assign zext_ln445_1_fu_195_p1 = add_ln445_fu_179_p2;

assign zext_ln445_2_fu_199_p1 = add_ln445_1_fu_185_p2;

assign zext_ln445_3_fu_209_p1 = add_ln445_2_fu_203_p2;

assign zext_ln445_4_fu_241_p1 = shl_ln445_1_fu_235_p2;

assign zext_ln445_fu_191_p1 = add_ln445_fu_179_p2;

endmodule //ban_interface_sqrt_Pipeline_VITIS_LOOP_444_1
