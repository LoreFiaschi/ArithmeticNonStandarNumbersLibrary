-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_mul_body_Pipeline_VITIS_LOOP_169_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read13 : IN STD_LOGIC_VECTOR (127 downto 0);
    empty_16 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_17 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    aux_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    aux_ce0 : OUT STD_LOGIC;
    aux_we0 : OUT STD_LOGIC;
    aux_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ban_interface_mul_body_Pipeline_VITIS_LOOP_169_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv38_20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_const_lv38_40 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln169_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_9_reg_520 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_520_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln172_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_531_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_531_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_531_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_531_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_531_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_531_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln173_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln173_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_i_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln172_3_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_3_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_3_reg_551_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_3_reg_551_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_3_reg_551_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_3_reg_551_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_3_reg_551_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_3_reg_551_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln173_1_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln173_1_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_reg_566_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_reg_566_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_reg_566_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_i_i_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln172_4_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_4_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_4_reg_577_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_4_reg_577_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_4_reg_577_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_4_reg_577_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_4_reg_577_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_4_reg_577_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln173_2_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln173_2_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_476_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_reg_592_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_reg_592_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_reg_592_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_i_i_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_fu_482_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln172_cast_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_74 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln169_fu_154_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_9 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_128_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_166_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln173_fu_174_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln173_1_fu_184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln173_1_fu_190_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_76_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln173_fu_194_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln173_fu_180_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln173_fu_208_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln173_1_fu_216_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln173_fu_222_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln173_fu_228_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln173_fu_234_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln172_fu_253_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_264_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln173_fu_272_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln173_2_fu_276_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln173_2_fu_280_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln173_3_fu_290_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln173_4_fu_296_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_79_fu_306_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln173_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln173_2_fu_300_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln173_3_fu_286_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln173_1_fu_322_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln173_3_fu_330_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln173_1_fu_336_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln173_1_fu_342_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln173_1_fu_347_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln172_2_fu_368_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_82_fu_379_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln173_1_fu_387_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln173_5_fu_391_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln173_4_fu_395_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln173_5_fu_405_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln173_7_fu_411_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_83_fu_421_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln173_1_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln173_4_fu_415_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln173_6_fu_401_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln173_2_fu_437_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln173_5_fu_445_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln173_2_fu_451_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln173_2_fu_457_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln173_2_fu_462_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_4_full_dsp_1_U448 : component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_i_i_reg_546,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_115_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U449 : component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_78_reg_566,
        din1 => mul_1_i_i_reg_572,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U450 : component ban_interface_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_81_reg_592,
        din1 => mul_2_i_i_reg_598,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U451 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_128_p0,
        din1 => empty_16,
        ce => ap_const_logic_1,
        dout => grp_fu_128_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U452 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_132_p0,
        din1 => empty_17,
        ce => ap_const_logic_1,
        dout => grp_fu_132_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U453 : component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_136_p0,
        din1 => empty,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p2);

    flow_control_loop_pipe_sequential_init_U : component ban_interface_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln169_fu_148_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_74 <= add_ln169_fu_154_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_74 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_9_reg_520_pp0_iter10_reg <= i_9_reg_520_pp0_iter9_reg;
                i_9_reg_520_pp0_iter11_reg <= i_9_reg_520_pp0_iter10_reg;
                i_9_reg_520_pp0_iter12_reg <= i_9_reg_520_pp0_iter11_reg;
                i_9_reg_520_pp0_iter13_reg <= i_9_reg_520_pp0_iter12_reg;
                i_9_reg_520_pp0_iter14_reg <= i_9_reg_520_pp0_iter13_reg;
                i_9_reg_520_pp0_iter15_reg <= i_9_reg_520_pp0_iter14_reg;
                i_9_reg_520_pp0_iter2_reg <= i_9_reg_520_pp0_iter1_reg;
                i_9_reg_520_pp0_iter3_reg <= i_9_reg_520_pp0_iter2_reg;
                i_9_reg_520_pp0_iter4_reg <= i_9_reg_520_pp0_iter3_reg;
                i_9_reg_520_pp0_iter5_reg <= i_9_reg_520_pp0_iter4_reg;
                i_9_reg_520_pp0_iter6_reg <= i_9_reg_520_pp0_iter5_reg;
                i_9_reg_520_pp0_iter7_reg <= i_9_reg_520_pp0_iter6_reg;
                i_9_reg_520_pp0_iter8_reg <= i_9_reg_520_pp0_iter7_reg;
                i_9_reg_520_pp0_iter9_reg <= i_9_reg_520_pp0_iter8_reg;
                icmp_ln172_3_reg_551 <= icmp_ln172_3_fu_258_p2;
                icmp_ln172_3_reg_551_pp0_iter10_reg <= icmp_ln172_3_reg_551_pp0_iter9_reg;
                icmp_ln172_3_reg_551_pp0_iter5_reg <= icmp_ln172_3_reg_551;
                icmp_ln172_3_reg_551_pp0_iter6_reg <= icmp_ln172_3_reg_551_pp0_iter5_reg;
                icmp_ln172_3_reg_551_pp0_iter7_reg <= icmp_ln172_3_reg_551_pp0_iter6_reg;
                icmp_ln172_3_reg_551_pp0_iter8_reg <= icmp_ln172_3_reg_551_pp0_iter7_reg;
                icmp_ln172_3_reg_551_pp0_iter9_reg <= icmp_ln172_3_reg_551_pp0_iter8_reg;
                icmp_ln172_4_reg_577 <= icmp_ln172_4_fu_373_p2;
                icmp_ln172_4_reg_577_pp0_iter10_reg <= icmp_ln172_4_reg_577_pp0_iter9_reg;
                icmp_ln172_4_reg_577_pp0_iter11_reg <= icmp_ln172_4_reg_577_pp0_iter10_reg;
                icmp_ln172_4_reg_577_pp0_iter12_reg <= icmp_ln172_4_reg_577_pp0_iter11_reg;
                icmp_ln172_4_reg_577_pp0_iter13_reg <= icmp_ln172_4_reg_577_pp0_iter12_reg;
                icmp_ln172_4_reg_577_pp0_iter14_reg <= icmp_ln172_4_reg_577_pp0_iter13_reg;
                icmp_ln172_4_reg_577_pp0_iter9_reg <= icmp_ln172_4_reg_577;
                icmp_ln172_reg_531_pp0_iter2_reg <= icmp_ln172_reg_531_pp0_iter1_reg;
                icmp_ln172_reg_531_pp0_iter3_reg <= icmp_ln172_reg_531_pp0_iter2_reg;
                icmp_ln172_reg_531_pp0_iter4_reg <= icmp_ln172_reg_531_pp0_iter3_reg;
                icmp_ln172_reg_531_pp0_iter5_reg <= icmp_ln172_reg_531_pp0_iter4_reg;
                icmp_ln172_reg_531_pp0_iter6_reg <= icmp_ln172_reg_531_pp0_iter5_reg;
                tmp_78_reg_566 <= tmp_78_fu_361_p3;
                tmp_78_reg_566_pp0_iter10_reg <= tmp_78_reg_566_pp0_iter9_reg;
                tmp_78_reg_566_pp0_iter8_reg <= tmp_78_reg_566;
                tmp_78_reg_566_pp0_iter9_reg <= tmp_78_reg_566_pp0_iter8_reg;
                tmp_81_reg_592 <= tmp_81_fu_476_p3;
                tmp_81_reg_592_pp0_iter12_reg <= tmp_81_reg_592;
                tmp_81_reg_592_pp0_iter13_reg <= tmp_81_reg_592_pp0_iter12_reg;
                tmp_81_reg_592_pp0_iter14_reg <= tmp_81_reg_592_pp0_iter13_reg;
                tmp_85_reg_603 <= tmp_85_fu_482_p3;
                trunc_ln173_1_reg_556 <= trunc_ln173_1_fu_353_p1;
                trunc_ln173_2_reg_582 <= trunc_ln173_2_fu_468_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_9_reg_520 <= ap_sig_allocacmp_i_9;
                i_9_reg_520_pp0_iter1_reg <= i_9_reg_520;
                icmp_ln172_reg_531_pp0_iter1_reg <= icmp_ln172_reg_531;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_fu_148_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln172_reg_531 <= icmp_ln172_fu_160_p2;
                trunc_ln173_reg_536 <= trunc_ln173_fu_240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln172_3_reg_551_pp0_iter6_reg = ap_const_lv1_1))) then
                mul_1_i_i_reg_572 <= grp_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln172_4_reg_577_pp0_iter10_reg = ap_const_lv1_1))) then
                mul_2_i_i_reg_598 <= grp_fu_136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln172_reg_531_pp0_iter2_reg = ap_const_lv1_1))) then
                mul_i_i_reg_546 <= grp_fu_128_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln169_fu_154_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_9) + unsigned(ap_const_lv3_1));
    add_ln172_2_fu_368_p2 <= std_logic_vector(unsigned(i_9_reg_520_pp0_iter7_reg) + unsigned(ap_const_lv3_6));
    add_ln172_fu_253_p2 <= std_logic_vector(unsigned(i_9_reg_520_pp0_iter3_reg) + unsigned(ap_const_lv3_7));
    add_ln173_1_fu_184_p2 <= std_logic_vector(unsigned(shl_ln_fu_166_p3) + unsigned(ap_const_lv8_40));
    add_ln173_2_fu_280_p2 <= std_logic_vector(unsigned(zext_ln173_2_fu_276_p1) + unsigned(ap_const_lv38_20));
    add_ln173_3_fu_290_p2 <= std_logic_vector(unsigned(zext_ln173_2_fu_276_p1) + unsigned(ap_const_lv38_40));
    add_ln173_4_fu_395_p2 <= std_logic_vector(unsigned(zext_ln173_5_fu_391_p1) + unsigned(ap_const_lv38_20));
    add_ln173_5_fu_405_p2 <= std_logic_vector(unsigned(zext_ln173_5_fu_391_p1) + unsigned(ap_const_lv38_40));
    add_ln173_fu_174_p2 <= std_logic_vector(unsigned(shl_ln_fu_166_p3) + unsigned(ap_const_lv8_20));
    and_ln173_1_fu_342_p2 <= (sub_ln173_1_fu_336_p2 and p_read13);
    and_ln173_2_fu_457_p2 <= (sub_ln173_2_fu_451_p2 and p_read13);
    and_ln173_fu_228_p2 <= (sub_ln173_fu_222_p2 and p_read13);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln169_fu_148_p2)
    begin
        if (((icmp_ln169_fu_148_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_9 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_9 <= i_fu_74;
        end if; 
    end process;

    aux_address0 <= trunc_ln172_cast_fu_488_p1(3 - 1 downto 0);

    aux_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            aux_ce0 <= ap_const_logic_1;
        else 
            aux_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    aux_d0 <= tmp_85_reg_603;

    aux_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            aux_we0 <= ap_const_logic_1;
        else 
            aux_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_128_p0 <= trunc_ln173_reg_536;
    grp_fu_132_p0 <= trunc_ln173_1_reg_556;
    grp_fu_136_p0 <= trunc_ln173_2_reg_582;
    icmp_ln169_fu_148_p2 <= "1" when (ap_sig_allocacmp_i_9 = ap_const_lv3_5) else "0";
    icmp_ln172_3_fu_258_p2 <= "1" when (unsigned(add_ln172_fu_253_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln172_4_fu_373_p2 <= "1" when (unsigned(add_ln172_2_fu_368_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln172_fu_160_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_9) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln173_1_fu_431_p2 <= "0" when (tmp_83_fu_421_p4 = ap_const_lv31_0) else "1";
    icmp_ln173_fu_316_p2 <= "0" when (tmp_79_fu_306_p4 = ap_const_lv31_0) else "1";
    lshr_ln173_1_fu_347_p2 <= std_logic_vector(shift_right(unsigned(and_ln173_1_fu_342_p2),to_integer(unsigned('0' & zext_ln173_3_fu_286_p1(31-1 downto 0)))));
    lshr_ln173_2_fu_462_p2 <= std_logic_vector(shift_right(unsigned(and_ln173_2_fu_457_p2),to_integer(unsigned('0' & zext_ln173_6_fu_401_p1(31-1 downto 0)))));
    lshr_ln173_fu_234_p2 <= std_logic_vector(shift_right(unsigned(and_ln173_fu_228_p2),to_integer(unsigned('0' & zext_ln173_fu_180_p1(31-1 downto 0)))));
    select_ln173_1_fu_322_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln173_fu_316_p2(0) = '1') else 
        shl_ln173_2_fu_300_p2;
    select_ln173_2_fu_437_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln173_1_fu_431_p2(0) = '1') else 
        shl_ln173_4_fu_415_p2;
    select_ln173_fu_208_p3 <= 
        ap_const_lv128_lc_2 when (tmp_76_fu_200_p3(0) = '1') else 
        shl_ln173_fu_194_p2;
        sext_ln173_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_82_fu_379_p3),37));

        sext_ln173_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_264_p3),37));

    shl_ln173_1_fu_216_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln173_fu_180_p1(31-1 downto 0)))));
    shl_ln173_2_fu_300_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln173_4_fu_296_p1(31-1 downto 0)))));
    shl_ln173_3_fu_330_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln173_3_fu_286_p1(31-1 downto 0)))));
    shl_ln173_4_fu_415_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln173_7_fu_411_p1(31-1 downto 0)))));
    shl_ln173_5_fu_445_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln173_6_fu_401_p1(31-1 downto 0)))));
    shl_ln173_fu_194_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln173_1_fu_190_p1(31-1 downto 0)))));
    shl_ln_fu_166_p3 <= (ap_sig_allocacmp_i_9 & ap_const_lv5_0);
    sub_ln173_1_fu_336_p2 <= std_logic_vector(unsigned(select_ln173_1_fu_322_p3) - unsigned(shl_ln173_3_fu_330_p2));
    sub_ln173_2_fu_451_p2 <= std_logic_vector(unsigned(select_ln173_2_fu_437_p3) - unsigned(shl_ln173_5_fu_445_p2));
    sub_ln173_fu_222_p2 <= std_logic_vector(unsigned(select_ln173_fu_208_p3) - unsigned(shl_ln173_1_fu_216_p2));
    tmp_76_fu_200_p3 <= add_ln173_1_fu_184_p2(7 downto 7);
    tmp_78_fu_361_p3 <= 
        grp_fu_115_p2 when (icmp_ln172_reg_531_pp0_iter6_reg(0) = '1') else 
        ap_const_lv32_0;
    tmp_79_fu_306_p4 <= add_ln173_3_fu_290_p2(37 downto 7);
    tmp_81_fu_476_p3 <= 
        grp_fu_120_p2 when (icmp_ln172_3_reg_551_pp0_iter10_reg(0) = '1') else 
        tmp_78_reg_566_pp0_iter10_reg;
    tmp_82_fu_379_p3 <= (add_ln172_2_fu_368_p2 & ap_const_lv5_0);
    tmp_83_fu_421_p4 <= add_ln173_5_fu_405_p2(37 downto 7);
    tmp_85_fu_482_p3 <= 
        grp_fu_124_p2 when (icmp_ln172_4_reg_577_pp0_iter14_reg(0) = '1') else 
        tmp_81_reg_592_pp0_iter14_reg;
    tmp_s_fu_264_p3 <= (add_ln172_fu_253_p2 & ap_const_lv5_0);
    trunc_ln172_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_520_pp0_iter15_reg),64));
    trunc_ln173_1_fu_353_p1 <= lshr_ln173_1_fu_347_p2(32 - 1 downto 0);
    trunc_ln173_2_fu_468_p1 <= lshr_ln173_2_fu_462_p2(32 - 1 downto 0);
    trunc_ln173_fu_240_p1 <= lshr_ln173_fu_234_p2(32 - 1 downto 0);
    zext_ln173_1_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_1_fu_184_p2),128));
    zext_ln173_2_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln173_fu_272_p1),38));
    zext_ln173_3_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_2_fu_280_p2),128));
    zext_ln173_4_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_3_fu_290_p2),128));
    zext_ln173_5_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln173_1_fu_387_p1),38));
    zext_ln173_6_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_4_fu_395_p2),128));
    zext_ln173_7_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_5_fu_405_p2),128));
    zext_ln173_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_fu_174_p2),128));
end behav;
