-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_ban_interface_Pipeline_VITIS_LOOP_374_116 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_op1_load : IN STD_LOGIC_VECTOR (127 downto 0);
    res_14_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    res_14_out_ap_vld : OUT STD_LOGIC;
    grp_fu_7617_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_7617_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_7617_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_7617_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_7617_p_ce : OUT STD_LOGIC;
    grp_fu_2095_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2095_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2095_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_2095_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2095_p_ce : OUT STD_LOGIC );
end;


architecture behav of ban_interface_ban_interface_Pipeline_VITIS_LOOP_374_116 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv97_1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln374_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal solved_reg_83 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_reg_95 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln374_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln374_reg_323_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln375_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln375_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln375_2_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln375_2_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln375_2_reg_332_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln375_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_9_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal solved_3_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_17_fu_66 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln374_fu_260_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln375_3_fu_132_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln375_3_fu_140_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln375_4_fu_146_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln375_8_fu_160_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln375_fu_164_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln375_9_fu_170_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_fu_180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln375_2_fu_174_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln375_fu_156_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal shl_ln375_fu_196_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal select_ln375_fu_188_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln375_10_fu_202_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln375_fu_206_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln375_1_fu_212_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln375_2_fu_152_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln375_fu_218_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_s_fu_228_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln375_3_fu_238_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln375_3_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln375_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln375_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln375_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln377_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln375_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp127_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ban_interface_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component ban_interface_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_17_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln374_fu_126_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_17_fu_66 <= add_ln374_fu_260_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_17_fu_66 <= ap_const_lv2_1;
                end if;
            end if; 
        end if;
    end process;

    res_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                res_reg_95 <= ap_const_lv1_0;
            elsif (((icmp_ln374_reg_323_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                res_reg_95 <= res_9_fu_304_p2;
            end if; 
        end if;
    end process;

    solved_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                solved_reg_83 <= ap_const_lv1_0;
            elsif (((icmp_ln374_reg_323_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                solved_reg_83 <= solved_3_fu_310_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln374_reg_323 <= icmp_ln374_fu_126_p2;
                icmp_ln374_reg_323_pp0_iter1_reg <= icmp_ln374_reg_323;
                or_ln375_2_reg_332_pp0_iter1_reg <= or_ln375_2_reg_332;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln374_fu_126_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln375_2_reg_332 <= or_ln375_2_fu_254_p2;
                trunc_ln375_reg_327 <= trunc_ln375_fu_224_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln374_fu_260_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv2_1));
    add_ln375_3_fu_140_p2 <= std_logic_vector(unsigned(shl_ln375_3_fu_132_p3) + unsigned(ap_const_lv7_20));
    add_ln375_4_fu_146_p2 <= std_logic_vector(unsigned(shl_ln375_3_fu_132_p3) + unsigned(ap_const_lv7_3F));
    add_ln375_fu_164_p2 <= std_logic_vector(unsigned(zext_ln375_8_fu_160_p1) + unsigned(ap_const_lv8_1));
    and_ln375_1_fu_212_p2 <= (sub_ln375_fu_206_p2 and b_op1_load);
    and_ln375_fu_276_p2 <= (or_ln375_2_reg_332_pp0_iter1_reg and grp_fu_7617_p_dout0);
    and_ln377_fu_281_p2 <= (or_ln375_2_reg_332_pp0_iter1_reg and grp_fu_2095_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln374_fu_126_p2)
    begin
        if (((icmp_ln374_fu_126_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln374_reg_323)
    begin
        if (((icmp_ln374_reg_323 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, i_17_fu_66)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv2_1;
        else 
            ap_sig_allocacmp_i <= i_17_fu_66;
        end if; 
    end process;

    bitcast_ln375_fu_271_p1 <= trunc_ln375_reg_327;
    grp_fu_2095_p_ce <= ap_const_logic_1;
    grp_fu_2095_p_din0 <= bitcast_ln375_fu_271_p1;
    grp_fu_2095_p_din1 <= ap_const_lv32_0;
    grp_fu_2095_p_opcode <= ap_const_lv5_4;
    grp_fu_7617_p_ce <= ap_const_logic_1;
    grp_fu_7617_p_din0 <= bitcast_ln375_fu_271_p1;
    grp_fu_7617_p_din1 <= ap_const_lv32_0;
    grp_fu_7617_p_opcode <= ap_const_lv5_1;
    icmp_ln374_fu_126_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv2_3) else "0";
    icmp_ln375_3_fu_248_p2 <= "1" when (trunc_ln375_3_fu_238_p1 = ap_const_lv23_0) else "0";
    icmp_ln375_fu_242_p2 <= "0" when (tmp_s_fu_228_p4 = ap_const_lv8_FF) else "1";
    lshr_ln375_fu_218_p2 <= std_logic_vector(shift_right(unsigned(and_ln375_1_fu_212_p2),to_integer(unsigned('0' & zext_ln375_2_fu_152_p1(31-1 downto 0)))));
    or_ln375_2_fu_254_p2 <= (icmp_ln375_fu_242_p2 or icmp_ln375_3_fu_248_p2);
    or_ln375_fu_286_p2 <= (solved_reg_83 or and_ln375_fu_276_p2);
    res_14_out <= res_reg_95;

    res_14_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln374_reg_323, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln374_reg_323 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_14_out_ap_vld <= ap_const_logic_1;
        else 
            res_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_9_fu_304_p2 <= (sel_tmp127_fu_298_p2 or res_reg_95);
    sel_tmp127_fu_298_p2 <= (xor_ln375_fu_292_p2 and and_ln377_fu_281_p2);
    select_ln375_fu_188_p3 <= 
        ap_const_lv128_lc_2 when (tmp_fu_180_p3(0) = '1') else 
        shl_ln375_2_fu_174_p2;
    shl_ln375_2_fu_174_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln375_9_fu_170_p1(31-1 downto 0)))));
    shl_ln375_3_fu_132_p3 <= (ap_sig_allocacmp_i & ap_const_lv5_0);
    shl_ln375_fu_196_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv97_1),to_integer(unsigned('0' & zext_ln375_fu_156_p1(31-1 downto 0)))));
    solved_3_fu_310_p2 <= (xor_ln375_fu_292_p2 or solved_reg_83);
    sub_ln375_fu_206_p2 <= std_logic_vector(unsigned(select_ln375_fu_188_p3) - unsigned(zext_ln375_10_fu_202_p1));
    tmp_fu_180_p3 <= add_ln375_fu_164_p2(7 downto 7);
    tmp_s_fu_228_p4 <= lshr_ln375_fu_218_p2(30 downto 23);
    trunc_ln375_3_fu_238_p1 <= lshr_ln375_fu_218_p2(23 - 1 downto 0);
    trunc_ln375_fu_224_p1 <= lshr_ln375_fu_218_p2(32 - 1 downto 0);
    xor_ln375_fu_292_p2 <= (or_ln375_fu_286_p2 xor ap_const_lv1_1);
    zext_ln375_10_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln375_fu_196_p2),128));
    zext_ln375_2_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln375_3_fu_140_p2),128));
    zext_ln375_8_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln375_4_fu_146_p2),8));
    zext_ln375_9_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln375_fu_164_p2),128));
    zext_ln375_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln375_3_fu_140_p2),97));
end behav;
