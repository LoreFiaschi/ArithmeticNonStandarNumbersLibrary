-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_sqrt_Pipeline_VITIS_LOOP_444_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read13 : IN STD_LOGIC_VECTOR (127 downto 0);
    normalizer_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    eps_1_1_02_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    eps_1_1_02_out_ap_vld : OUT STD_LOGIC;
    eps_1_2_01_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    eps_1_2_01_out_ap_vld : OUT STD_LOGIC;
    num_res_load_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_res_load_2_out_ap_vld : OUT STD_LOGIC;
    num_res_load_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_res_load_1_out_ap_vld : OUT STD_LOGIC;
    eps_2_1_08_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    eps_2_1_08_out_ap_vld : OUT STD_LOGIC;
    eps_2_2_07_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    eps_2_2_07_out_ap_vld : OUT STD_LOGIC;
    grp_fu_222_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_222_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_222_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_222_p_ce : OUT STD_LOGIC;
    grp_fu_633_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_633_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_633_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_633_p_ce : OUT STD_LOGIC );
end;


architecture behav of ban_interface_sqrt_Pipeline_VITIS_LOOP_444_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv97_1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln444_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln444_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_450_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln445_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln445_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln445_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln445_reg_459_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln445_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_2_1_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_66 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln444_fu_273_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal eps_2_2_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_2_2_6_fu_306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_2_2_3_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_2_2_5_fu_300_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_load_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln446_1_fu_356_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_load_2_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln446_fu_350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_1_2_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_1_2_6_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_1_2_3_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal eps_1_2_5_fu_312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln1_fu_171_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln445_fu_179_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln445_1_fu_185_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln445_2_fu_199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln445_2_fu_203_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln445_3_fu_209_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_fu_219_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln445_fu_213_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln445_1_fu_195_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal shl_ln445_1_fu_235_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal select_ln445_fu_227_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln445_4_fu_241_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln445_fu_245_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln445_fu_251_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln445_fu_191_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln445_fu_257_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component ban_interface_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln444_fu_165_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_66 <= add_ln444_fu_273_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_66 <= ap_const_lv2_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv_reg_483 <= grp_fu_222_p_dout0;
                eps_2_1_reg_474 <= grp_fu_633_p_dout0;
                icmp_ln444_reg_450_pp0_iter10_reg <= icmp_ln444_reg_450_pp0_iter9_reg;
                icmp_ln444_reg_450_pp0_iter11_reg <= icmp_ln444_reg_450_pp0_iter10_reg;
                icmp_ln444_reg_450_pp0_iter2_reg <= icmp_ln444_reg_450_pp0_iter1_reg;
                icmp_ln444_reg_450_pp0_iter3_reg <= icmp_ln444_reg_450_pp0_iter2_reg;
                icmp_ln444_reg_450_pp0_iter4_reg <= icmp_ln444_reg_450_pp0_iter3_reg;
                icmp_ln444_reg_450_pp0_iter5_reg <= icmp_ln444_reg_450_pp0_iter4_reg;
                icmp_ln444_reg_450_pp0_iter6_reg <= icmp_ln444_reg_450_pp0_iter5_reg;
                icmp_ln444_reg_450_pp0_iter7_reg <= icmp_ln444_reg_450_pp0_iter6_reg;
                icmp_ln444_reg_450_pp0_iter8_reg <= icmp_ln444_reg_450_pp0_iter7_reg;
                icmp_ln444_reg_450_pp0_iter9_reg <= icmp_ln444_reg_450_pp0_iter8_reg;
                icmp_ln445_reg_459_pp0_iter10_reg <= icmp_ln445_reg_459_pp0_iter9_reg;
                icmp_ln445_reg_459_pp0_iter11_reg <= icmp_ln445_reg_459_pp0_iter10_reg;
                icmp_ln445_reg_459_pp0_iter12_reg <= icmp_ln445_reg_459_pp0_iter11_reg;
                icmp_ln445_reg_459_pp0_iter2_reg <= icmp_ln445_reg_459_pp0_iter1_reg;
                icmp_ln445_reg_459_pp0_iter3_reg <= icmp_ln445_reg_459_pp0_iter2_reg;
                icmp_ln445_reg_459_pp0_iter4_reg <= icmp_ln445_reg_459_pp0_iter3_reg;
                icmp_ln445_reg_459_pp0_iter5_reg <= icmp_ln445_reg_459_pp0_iter4_reg;
                icmp_ln445_reg_459_pp0_iter6_reg <= icmp_ln445_reg_459_pp0_iter5_reg;
                icmp_ln445_reg_459_pp0_iter7_reg <= icmp_ln445_reg_459_pp0_iter6_reg;
                icmp_ln445_reg_459_pp0_iter8_reg <= icmp_ln445_reg_459_pp0_iter7_reg;
                icmp_ln445_reg_459_pp0_iter9_reg <= icmp_ln445_reg_459_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln444_reg_450 <= icmp_ln444_fu_165_p2;
                icmp_ln444_reg_450_pp0_iter1_reg <= icmp_ln444_reg_450;
                icmp_ln445_reg_459_pp0_iter1_reg <= icmp_ln445_reg_459;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then
                eps_1_2_3_fu_90 <= eps_1_2_5_fu_312_p3;
                eps_1_2_fu_86 <= eps_1_2_6_fu_318_p3;
                eps_2_2_3_fu_74 <= eps_2_2_5_fu_300_p3;
                eps_2_2_fu_70 <= eps_2_2_6_fu_306_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_fu_165_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln445_reg_459 <= icmp_ln445_fu_267_p2;
                trunc_ln445_reg_454 <= trunc_ln445_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then
                num_res_load_1_fu_78 <= select_ln446_1_fu_356_p3;
                num_res_load_2_fu_82 <= select_ln446_fu_350_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln444_fu_273_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv2_1));
    add_ln445_1_fu_185_p2 <= std_logic_vector(unsigned(shl_ln1_fu_171_p3) + unsigned(ap_const_lv7_3F));
    add_ln445_2_fu_203_p2 <= std_logic_vector(unsigned(zext_ln445_2_fu_199_p1) + unsigned(ap_const_lv8_1));
    add_ln445_fu_179_p2 <= std_logic_vector(unsigned(shl_ln1_fu_171_p3) + unsigned(ap_const_lv7_20));
    and_ln445_fu_251_p2 <= (sub_ln445_fu_245_p2 and p_read13);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln444_fu_165_p2)
    begin
        if (((icmp_ln444_fu_165_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, i_1_fu_66, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv2_1;
        else 
            ap_sig_allocacmp_i <= i_1_fu_66;
        end if; 
    end process;

    bitcast_ln445_fu_284_p1 <= trunc_ln445_reg_454;
    eps_1_1_02_out <= eps_1_2_3_fu_90;

    eps_1_1_02_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln444_reg_450_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln444_reg_450_pp0_iter11_reg = ap_const_lv1_1))) then 
            eps_1_1_02_out_ap_vld <= ap_const_logic_1;
        else 
            eps_1_1_02_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    eps_1_2_01_out <= eps_1_2_fu_86;

    eps_1_2_01_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln444_reg_450_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln444_reg_450_pp0_iter11_reg = ap_const_lv1_1))) then 
            eps_1_2_01_out_ap_vld <= ap_const_logic_1;
        else 
            eps_1_2_01_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    eps_1_2_5_fu_312_p3 <= 
        eps_2_1_reg_474 when (icmp_ln445_reg_459_pp0_iter9_reg(0) = '1') else 
        eps_1_2_3_fu_90;
    eps_1_2_6_fu_318_p3 <= 
        eps_1_2_fu_86 when (icmp_ln445_reg_459_pp0_iter9_reg(0) = '1') else 
        eps_2_1_reg_474;
    eps_2_1_08_out <= eps_2_2_3_fu_74;

    eps_2_1_08_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln444_reg_450_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln444_reg_450_pp0_iter11_reg = ap_const_lv1_1))) then 
            eps_2_1_08_out_ap_vld <= ap_const_logic_1;
        else 
            eps_2_1_08_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    eps_2_2_07_out <= eps_2_2_fu_70;

    eps_2_2_07_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln444_reg_450_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln444_reg_450_pp0_iter11_reg = ap_const_lv1_1))) then 
            eps_2_2_07_out_ap_vld <= ap_const_logic_1;
        else 
            eps_2_2_07_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    eps_2_2_5_fu_300_p3 <= 
        eps_2_1_reg_474 when (icmp_ln445_reg_459_pp0_iter9_reg(0) = '1') else 
        eps_2_2_3_fu_74;
    eps_2_2_6_fu_306_p3 <= 
        eps_2_2_fu_70 when (icmp_ln445_reg_459_pp0_iter9_reg(0) = '1') else 
        eps_2_1_reg_474;
    grp_fu_222_p_ce <= ap_const_logic_1;
    grp_fu_222_p_din0 <= eps_2_1_reg_474;
    grp_fu_222_p_din1 <= ap_const_lv32_3F000000;
    grp_fu_633_p_ce <= ap_const_logic_1;
    grp_fu_633_p_din0 <= bitcast_ln445_fu_284_p1;
    grp_fu_633_p_din1 <= normalizer_1;
    icmp_ln444_fu_165_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv2_3) else "0";
    icmp_ln445_fu_267_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv2_1) else "0";
    lshr_ln445_fu_257_p2 <= std_logic_vector(shift_right(unsigned(and_ln445_fu_251_p2),to_integer(unsigned('0' & zext_ln445_fu_191_p1(31-1 downto 0)))));
    num_res_load_1_out <= num_res_load_1_fu_78;

    num_res_load_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln444_reg_450_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln444_reg_450_pp0_iter11_reg = ap_const_lv1_1))) then 
            num_res_load_1_out_ap_vld <= ap_const_logic_1;
        else 
            num_res_load_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    num_res_load_2_out <= num_res_load_2_fu_82;

    num_res_load_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln444_reg_450_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln444_reg_450_pp0_iter11_reg = ap_const_lv1_1))) then 
            num_res_load_2_out_ap_vld <= ap_const_logic_1;
        else 
            num_res_load_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln445_fu_227_p3 <= 
        ap_const_lv128_lc_2 when (tmp_fu_219_p3(0) = '1') else 
        shl_ln445_fu_213_p2;
    select_ln446_1_fu_356_p3 <= 
        conv_reg_483 when (icmp_ln445_reg_459_pp0_iter12_reg(0) = '1') else 
        num_res_load_1_fu_78;
    select_ln446_fu_350_p3 <= 
        num_res_load_2_fu_82 when (icmp_ln445_reg_459_pp0_iter12_reg(0) = '1') else 
        conv_reg_483;
    shl_ln1_fu_171_p3 <= (ap_sig_allocacmp_i & ap_const_lv5_0);
    shl_ln445_1_fu_235_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv97_1),to_integer(unsigned('0' & zext_ln445_1_fu_195_p1(31-1 downto 0)))));
    shl_ln445_fu_213_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln445_3_fu_209_p1(31-1 downto 0)))));
    sub_ln445_fu_245_p2 <= std_logic_vector(unsigned(select_ln445_fu_227_p3) - unsigned(zext_ln445_4_fu_241_p1));
    tmp_fu_219_p3 <= add_ln445_2_fu_203_p2(7 downto 7);
    trunc_ln445_fu_263_p1 <= lshr_ln445_fu_257_p2(32 - 1 downto 0);
    zext_ln445_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln445_fu_179_p2),97));
    zext_ln445_2_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln445_1_fu_185_p2),8));
    zext_ln445_3_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln445_2_fu_203_p2),128));
    zext_ln445_4_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln445_1_fu_235_p2),128));
    zext_ln445_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln445_fu_179_p2),128));
end behav;
