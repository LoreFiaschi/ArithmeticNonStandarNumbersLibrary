-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_ban_interface_Pipeline_VITIS_LOOP_408_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_op1_load : IN STD_LOGIC_VECTOR (127 downto 0);
    bitcast_ln409_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln409_out_ap_vld : OUT STD_LOGIC;
    or_ln409_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    or_ln409_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_7617_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_7617_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_7617_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_7617_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_7617_p_ce : OUT STD_LOGIC );
end;


architecture behav of ban_interface_ban_interface_Pipeline_VITIS_LOOP_408_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv97_1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_284 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln408_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln408_reg_289 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln409_fu_135_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln409_reg_293 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln409_fu_197_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln409_reg_298 : STD_LOGIC_VECTOR (127 downto 0);
    signal bitcast_ln409_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln409_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal or_ln409_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln409_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_100_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_96 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_15_fu_72 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln408_fu_262_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal and_ln409_3_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln5_fu_127_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln409_1_fu_141_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln409_3_fu_151_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln409_2_fu_155_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln409_5_fu_161_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_fu_171_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln409_fu_165_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln409_1_fu_147_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal shl_ln409_1_fu_187_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal select_ln409_fu_179_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln409_7_fu_193_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln409_fu_206_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln409_fu_203_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln409_fu_210_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln409_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_225_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln409_4_fu_235_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln409_4_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_100_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_reg_289 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                UnifiedRetVal_reg_96 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                UnifiedRetVal_reg_96 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i_15_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_15_fu_72 <= ap_const_lv2_1;
            elsif (((ap_const_lv1_1 = and_ln409_3_fu_257_p2) and (icmp_ln408_reg_289 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_15_fu_72 <= add_ln408_fu_262_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_fu_121_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln409_reg_293(6 downto 5) <= add_ln409_fu_135_p2(6 downto 5);
                sub_ln409_reg_298 <= sub_ln409_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_reg_289 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                bitcast_ln409_reg_303 <= bitcast_ln409_fu_220_p1;
                or_ln409_reg_309 <= or_ln409_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_284 <= i_15_fu_72;
                icmp_ln408_reg_289 <= icmp_ln408_fu_121_p2;
            end if;
        end if;
    end process;
    add_ln409_reg_293(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln408_reg_289, ap_CS_fsm_state4, and_ln409_3_fu_257_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_lv1_1 = and_ln409_3_fu_257_p2) and (icmp_ln408_reg_289 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln408_reg_289 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln408_fu_262_p2 <= std_logic_vector(unsigned(i_reg_284) + unsigned(ap_const_lv2_1));
    add_ln409_1_fu_141_p2 <= std_logic_vector(unsigned(shl_ln5_fu_127_p3) + unsigned(ap_const_lv7_3F));
    add_ln409_2_fu_155_p2 <= std_logic_vector(unsigned(zext_ln409_3_fu_151_p1) + unsigned(ap_const_lv8_1));
    add_ln409_fu_135_p2 <= std_logic_vector(unsigned(shl_ln5_fu_127_p3) + unsigned(ap_const_lv7_20));
    and_ln409_3_fu_257_p2 <= (or_ln409_reg_309 and grp_fu_7617_p_dout0);
    and_ln409_fu_206_p2 <= (sub_ln409_reg_298 and b_op1_load);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_100_p4_assign_proc : process(icmp_ln408_reg_289, UnifiedRetVal_reg_96, ap_CS_fsm_state5)
    begin
        if (((icmp_ln408_reg_289 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_100_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_100_p4 <= UnifiedRetVal_reg_96;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_100_p4, ap_CS_fsm_state5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_100_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln409_fu_220_p1 <= trunc_ln409_fu_216_p1;
    bitcast_ln409_out <= bitcast_ln409_reg_303;

    bitcast_ln409_out_ap_vld_assign_proc : process(icmp_ln408_reg_289, ap_CS_fsm_state5)
    begin
        if (((icmp_ln408_reg_289 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            bitcast_ln409_out_ap_vld <= ap_const_logic_1;
        else 
            bitcast_ln409_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_7617_p_ce <= ap_const_logic_1;
    grp_fu_7617_p_din0 <= bitcast_ln409_fu_220_p1;
    grp_fu_7617_p_din1 <= ap_const_lv32_0;
    grp_fu_7617_p_opcode <= ap_const_lv5_1;
    icmp_ln408_fu_121_p2 <= "1" when (i_15_fu_72 = ap_const_lv2_3) else "0";
    icmp_ln409_4_fu_245_p2 <= "1" when (trunc_ln409_4_fu_235_p1 = ap_const_lv23_0) else "0";
    icmp_ln409_fu_239_p2 <= "0" when (tmp_s_fu_225_p4 = ap_const_lv8_FF) else "1";
    lshr_ln409_fu_210_p2 <= std_logic_vector(shift_right(unsigned(and_ln409_fu_206_p2),to_integer(unsigned('0' & zext_ln409_fu_203_p1(31-1 downto 0)))));
    or_ln409_fu_251_p2 <= (icmp_ln409_fu_239_p2 or icmp_ln409_4_fu_245_p2);
    or_ln409_out <= or_ln409_reg_309;

    or_ln409_out_ap_vld_assign_proc : process(icmp_ln408_reg_289, ap_CS_fsm_state5)
    begin
        if (((icmp_ln408_reg_289 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            or_ln409_out_ap_vld <= ap_const_logic_1;
        else 
            or_ln409_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln409_fu_179_p3 <= 
        ap_const_lv128_lc_2 when (tmp_fu_171_p3(0) = '1') else 
        shl_ln409_fu_165_p2;
    shl_ln409_1_fu_187_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv97_1),to_integer(unsigned('0' & zext_ln409_1_fu_147_p1(31-1 downto 0)))));
    shl_ln409_fu_165_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln409_5_fu_161_p1(31-1 downto 0)))));
    shl_ln5_fu_127_p3 <= (i_15_fu_72 & ap_const_lv5_0);
    sub_ln409_fu_197_p2 <= std_logic_vector(unsigned(select_ln409_fu_179_p3) - unsigned(zext_ln409_7_fu_193_p1));
    tmp_fu_171_p3 <= add_ln409_2_fu_155_p2(7 downto 7);
    tmp_s_fu_225_p4 <= lshr_ln409_fu_210_p2(30 downto 23);
    trunc_ln409_4_fu_235_p1 <= lshr_ln409_fu_210_p2(23 - 1 downto 0);
    trunc_ln409_fu_216_p1 <= lshr_ln409_fu_210_p2(32 - 1 downto 0);
    zext_ln409_1_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln409_fu_135_p2),97));
    zext_ln409_3_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln409_1_fu_141_p2),8));
    zext_ln409_5_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln409_2_fu_155_p2),128));
    zext_ln409_7_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln409_1_fu_187_p2),128));
    zext_ln409_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln409_reg_293),128));
end behav;
