-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_operator_2_Pipeline_VITIS_LOOP_504_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_i1 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_p : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (127 downto 0);
    num_res_1_02_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_res_1_02_out_ap_vld : OUT STD_LOGIC;
    num_res_2_01_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_res_2_01_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ban_interface_operator_2_Pipeline_VITIS_LOOP_504_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv38_20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_const_lv38_40 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln504_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_fu_64 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln504_fu_268_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_7 : STD_LOGIC_VECTOR (1 downto 0);
    signal num_res_2_01_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_2_7_fu_260_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_2_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_2_6_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln507_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_144_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln507_fu_152_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln507_1_fu_156_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln507_2_fu_166_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln507_2_fu_172_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_fu_182_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln507_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln507_fu_176_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln507_1_fu_162_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln507_fu_198_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln507_1_fu_206_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln507_fu_212_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln507_fu_218_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln507_fu_224_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln507_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln506_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln507_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln507_1_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_res_1_fu_238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component ban_interface_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln504_fu_116_p2 = ap_const_lv1_0)) then 
                    i_fu_64 <= add_ln504_fu_268_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv2_2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln504_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                num_res_2_01_fu_68 <= num_res_2_7_fu_260_p3;
                num_res_2_fu_72 <= num_res_2_6_fu_252_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln504_fu_268_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_7) + unsigned(ap_const_lv2_3));
    add_ln507_1_fu_156_p2 <= std_logic_vector(unsigned(zext_ln507_fu_152_p1) + unsigned(ap_const_lv38_20));
    add_ln507_2_fu_166_p2 <= std_logic_vector(unsigned(zext_ln507_fu_152_p1) + unsigned(ap_const_lv38_40));
    add_ln507_fu_138_p2 <= std_logic_vector(unsigned(i_cast_fu_128_p1) + unsigned(res_p));
    and_ln507_fu_218_p2 <= (sub_ln507_fu_212_p2 and p_read13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln504_fu_116_p2, ap_start_int)
    begin
        if (((icmp_ln504_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_7_assign_proc : process(ap_CS_fsm_state1, i_fu_64, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_7 <= ap_const_lv2_2;
        else 
            ap_sig_allocacmp_i_7 <= i_fu_64;
        end if; 
    end process;

    bitcast_ln507_fu_234_p1 <= trunc_ln507_fu_230_p1;
    i_cast_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_7),32));
    icmp_ln504_fu_116_p2 <= "1" when (ap_sig_allocacmp_i_7 = ap_const_lv2_0) else "0";
    icmp_ln506_fu_132_p2 <= "1" when (unsigned(i_cast_fu_128_p1) < unsigned(sub_i1)) else "0";
    icmp_ln507_1_fu_246_p2 <= "1" when (ap_sig_allocacmp_i_7 = ap_const_lv2_1) else "0";
    icmp_ln507_fu_192_p2 <= "0" when (tmp_fu_182_p4 = ap_const_lv31_0) else "1";
    lshr_ln507_fu_224_p2 <= std_logic_vector(shift_right(unsigned(and_ln507_fu_218_p2),to_integer(unsigned('0' & zext_ln507_1_fu_162_p1(31-1 downto 0)))));
    num_res_1_02_out <= num_res_2_fu_72;

    num_res_1_02_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln504_fu_116_p2, ap_start_int)
    begin
        if (((icmp_ln504_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            num_res_1_02_out_ap_vld <= ap_const_logic_1;
        else 
            num_res_1_02_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    num_res_1_fu_238_p3 <= 
        ap_const_lv32_0 when (icmp_ln506_fu_132_p2(0) = '1') else 
        bitcast_ln507_fu_234_p1;
    num_res_2_01_out <= num_res_2_01_fu_68;

    num_res_2_01_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln504_fu_116_p2, ap_start_int)
    begin
        if (((icmp_ln504_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            num_res_2_01_out_ap_vld <= ap_const_logic_1;
        else 
            num_res_2_01_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    num_res_2_6_fu_252_p3 <= 
        num_res_1_fu_238_p3 when (icmp_ln507_1_fu_246_p2(0) = '1') else 
        num_res_2_fu_72;
    num_res_2_7_fu_260_p3 <= 
        num_res_2_01_fu_68 when (icmp_ln507_1_fu_246_p2(0) = '1') else 
        num_res_1_fu_238_p3;
    select_ln507_fu_198_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln507_fu_192_p2(0) = '1') else 
        shl_ln507_fu_176_p2;
    shl_ln507_1_fu_206_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln507_1_fu_162_p1(31-1 downto 0)))));
    shl_ln507_fu_176_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln507_2_fu_172_p1(31-1 downto 0)))));
    shl_ln_fu_144_p3 <= (add_ln507_fu_138_p2 & ap_const_lv5_0);
    sub_ln507_fu_212_p2 <= std_logic_vector(unsigned(select_ln507_fu_198_p3) - unsigned(shl_ln507_1_fu_206_p2));
    tmp_fu_182_p4 <= add_ln507_2_fu_166_p2(37 downto 7);
    trunc_ln507_fu_230_p1 <= lshr_ln507_fu_224_p2(32 - 1 downto 0);
    zext_ln507_1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln507_1_fu_156_p2),128));
    zext_ln507_2_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln507_2_fu_166_p2),128));
    zext_ln507_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_144_p3),38));
end behav;
