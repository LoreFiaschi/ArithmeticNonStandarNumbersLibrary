-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ban_interface_operator_div is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read14 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1160_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1160_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1160_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1160_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1160_p_ce : OUT STD_LOGIC;
    grp_fu_1164_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1164_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1164_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1164_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1164_p_ce : OUT STD_LOGIC;
    grp_fu_1168_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1168_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1168_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1168_p_ce : OUT STD_LOGIC;
    grp_fu_1172_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1172_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1172_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1172_p_ce : OUT STD_LOGIC;
    grp_fu_1189_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1189_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1189_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1189_p_ce : OUT STD_LOGIC;
    grp_fu_1203_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1203_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1203_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1203_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1203_p_ce : OUT STD_LOGIC;
    grp_fu_1208_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1208_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1208_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1208_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1208_p_ce : OUT STD_LOGIC );
end;


architecture behav of ban_interface_operator_div is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal trunc_ln22_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln22_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln22_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_1_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_2_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_2_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln132_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln132_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_3_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_3_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_4_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_4_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln22_2_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_2_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln22_1_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln22_4_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_4_reg_661 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bitcast_ln131_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln131_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln132_1_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_165_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln133_1_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_p_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal bitcast_ln132_1_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln132_1_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal bitcast_ln133_1_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln133_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sub1_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_res_3_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal c_num_2_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal and_ln27_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal and_ln30_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal c_p_2_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_1_0_0_reg_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_fu_551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_1_1_0_reg_89 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_1_2_0_reg_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_1_fu_558_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_agg_result_01_0_phi_fu_124_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_01_0_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_2_fu_566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_135_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_143_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_151_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln22_s_fu_188_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_203_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_1_fu_213_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln1_fu_235_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_250_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_2_fu_260_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln22_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_1_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_1_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_3_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_324_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_4_fu_333_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_6_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_5_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_2_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_fu_366_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln135_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_421_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_431_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln30_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_462_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln30_fu_472_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln30_1_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln38_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_508_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_518_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln38_1_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_p_1_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ban_interface_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ban_interface_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_return_0_preg <= ap_phi_mux_agg_result_01_0_phi_fu_124_p8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_return_1_preg <= ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_return_2_preg <= ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_return_3_preg <= ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8;
                end if; 
            end if;
        end if;
    end process;


    agg_result_01_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (((ap_const_lv1_0 = and_ln22_4_reg_661) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747)) or ((ap_const_lv1_0 = and_ln22_2_reg_652) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747))))) then 
                agg_result_01_0_reg_120 <= select_ln38_2_fu_566_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = and_ln27_fu_453_p2))) then 
                agg_result_01_0_reg_120 <= c_p_reg_685;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_lv1_0 = and_ln30_fu_494_p2))) then 
                agg_result_01_0_reg_120 <= c_p_2_fu_500_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln22_4_fu_360_p2) and (ap_const_lv1_1 = and_ln22_2_reg_652))) then 
                agg_result_01_0_reg_120 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    agg_result_1_0_0_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (((ap_const_lv1_0 = and_ln22_4_reg_661) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747)) or ((ap_const_lv1_0 = and_ln22_2_reg_652) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747))))) then 
                agg_result_1_0_0_reg_74 <= select_ln38_fu_551_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = and_ln27_fu_453_p2))) then 
                agg_result_1_0_0_reg_74 <= num_res_reg_692;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_lv1_0 = and_ln30_fu_494_p2))) then 
                agg_result_1_0_0_reg_74 <= num_res_3_reg_727;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln22_4_fu_360_p2) and (ap_const_lv1_1 = and_ln22_2_reg_652))) then 
                agg_result_1_0_0_reg_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    agg_result_1_1_0_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state46) and (((ap_const_lv1_0 = and_ln22_4_reg_661) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747)) or ((ap_const_lv1_0 = and_ln22_2_reg_652) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747)))) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = and_ln27_fu_453_p2)))) then 
                agg_result_1_1_0_reg_89 <= num_res_3_reg_727;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_lv1_0 = and_ln30_fu_494_p2))) then 
                agg_result_1_1_0_reg_89 <= c_num_2_reg_737;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln22_4_fu_360_p2) and (ap_const_lv1_1 = and_ln22_2_reg_652))) then 
                agg_result_1_1_0_reg_89 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    agg_result_1_2_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (((ap_const_lv1_0 = and_ln22_4_reg_661) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747)) or ((ap_const_lv1_0 = and_ln22_2_reg_652) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747))))) then 
                agg_result_1_2_0_reg_104 <= select_ln38_1_fu_558_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = and_ln27_fu_453_p2))) then 
                agg_result_1_2_0_reg_104 <= c_num_2_reg_737;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_lv1_0 = and_ln30_fu_494_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln22_4_fu_360_p2) and (ap_const_lv1_1 = and_ln22_2_reg_652)))) then 
                agg_result_1_2_0_reg_104 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln22_2_reg_652 <= and_ln22_2_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln22_2_reg_652))) then
                and_ln22_4_reg_661 <= and_ln22_4_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                and_ln27_reg_747 <= and_ln27_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                and_ln30_reg_751 <= and_ln30_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((ap_const_lv1_0 = and_ln22_4_fu_360_p2) or (ap_const_lv1_0 = and_ln22_2_reg_652)))) then
                bitcast_ln131_reg_665 <= bitcast_ln131_fu_375_p1;
                c_p_reg_685 <= c_p_fu_401_p2;
                trunc_ln132_1_reg_670 <= p_read25(95 downto 64);
                trunc_ln133_1_reg_680 <= p_read25(127 downto 96);
                trunc_ln3_reg_675 <= p_read14(127 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                bitcast_ln132_1_reg_702 <= bitcast_ln132_1_fu_406_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                bitcast_ln132_reg_628 <= bitcast_ln132_fu_245_p1;
                bitcast_ln22_reg_612 <= bitcast_ln22_fu_198_p1;
                icmp_ln22_1_reg_618 <= icmp_ln22_1_fu_223_p2;
                icmp_ln22_2_reg_623 <= icmp_ln22_2_fu_229_p2;
                icmp_ln22_3_reg_634 <= icmp_ln22_3_fu_270_p2;
                icmp_ln22_4_reg_639 <= icmp_ln22_4_fu_276_p2;
                trunc_ln22_reg_606 <= trunc_ln22_fu_184_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                c_num_2_reg_737 <= grp_fu_1189_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                mul1_reg_712 <= grp_fu_1172_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                num_res_3_reg_727 <= grp_fu_1189_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                num_res_reg_692 <= grp_fu_1189_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_174 <= grp_fu_1168_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_179 <= grp_fu_1160_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                sub1_reg_722 <= grp_fu_1164_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, and_ln22_2_reg_652, and_ln22_4_fu_360_p2, ap_CS_fsm_state3, and_ln27_fu_453_p2, ap_CS_fsm_state44)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln22_4_fu_360_p2) and (ap_const_lv1_1 = and_ln22_2_reg_652))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = and_ln27_fu_453_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln22_1_fu_301_p2 <= (or_ln22_1_fu_297_p2 and grp_fu_1208_p_dout0);
    and_ln22_2_fu_313_p2 <= (icmp_ln22_fu_282_p2 and and_ln22_3_fu_307_p2);
    and_ln22_3_fu_307_p2 <= (and_ln22_fu_291_p2 and and_ln22_1_fu_301_p2);
    and_ln22_4_fu_360_p2 <= (or_ln22_2_fu_354_p2 and grp_fu_1203_p_dout0);
    and_ln22_fu_291_p2 <= (or_ln22_fu_287_p2 and grp_fu_1203_p_dout0);
    and_ln27_fu_453_p2 <= (or_ln27_fu_447_p2 and grp_fu_1203_p_dout0);
    and_ln30_fu_494_p2 <= (or_ln30_fu_488_p2 and grp_fu_1203_p_dout0);
    and_ln38_fu_540_p2 <= (or_ln38_fu_534_p2 and grp_fu_1203_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_agg_result_01_0_phi_fu_124_p8_assign_proc : process(and_ln22_2_reg_652, and_ln22_4_reg_661, and_ln27_reg_747, and_ln30_reg_751, ap_CS_fsm_state46, agg_result_01_0_reg_120, select_ln38_2_fu_566_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and (((ap_const_lv1_0 = and_ln22_4_reg_661) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747)) or ((ap_const_lv1_0 = and_ln22_2_reg_652) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747))))) then 
            ap_phi_mux_agg_result_01_0_phi_fu_124_p8 <= select_ln38_2_fu_566_p3;
        else 
            ap_phi_mux_agg_result_01_0_phi_fu_124_p8 <= agg_result_01_0_reg_120;
        end if; 
    end process;


    ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8_assign_proc : process(and_ln22_2_reg_652, and_ln22_4_reg_661, and_ln27_reg_747, and_ln30_reg_751, agg_result_1_0_0_reg_74, select_ln38_fu_551_p3, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and (((ap_const_lv1_0 = and_ln22_4_reg_661) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747)) or ((ap_const_lv1_0 = and_ln22_2_reg_652) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747))))) then 
            ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8 <= select_ln38_fu_551_p3;
        else 
            ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8 <= agg_result_1_0_0_reg_74;
        end if; 
    end process;


    ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8_assign_proc : process(and_ln22_2_reg_652, and_ln22_4_reg_661, num_res_3_reg_727, and_ln27_reg_747, and_ln30_reg_751, ap_CS_fsm_state46, agg_result_1_1_0_reg_89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and (((ap_const_lv1_0 = and_ln22_4_reg_661) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747)) or ((ap_const_lv1_0 = and_ln22_2_reg_652) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747))))) then 
            ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8 <= num_res_3_reg_727;
        else 
            ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8 <= agg_result_1_1_0_reg_89;
        end if; 
    end process;


    ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8_assign_proc : process(and_ln22_2_reg_652, and_ln22_4_reg_661, and_ln27_reg_747, and_ln30_reg_751, ap_CS_fsm_state46, agg_result_1_2_0_reg_104, select_ln38_1_fu_558_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and (((ap_const_lv1_0 = and_ln22_4_reg_661) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747)) or ((ap_const_lv1_0 = and_ln22_2_reg_652) and (ap_const_lv1_1 = and_ln30_reg_751) and (ap_const_lv1_1 = and_ln27_reg_747))))) then 
            ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8 <= select_ln38_1_fu_558_p3;
        else 
            ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8 <= agg_result_1_2_0_reg_104;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state46, ap_phi_mux_agg_result_01_0_phi_fu_124_p8, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_return_0 <= ap_phi_mux_agg_result_01_0_phi_fu_124_p8;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8, ap_CS_fsm_state46, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_return_1 <= ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state46, ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_return_2 <= ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state46, ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_return_3 <= ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    bitcast_ln131_fu_375_p1 <= trunc_ln2_fu_366_p4;
    bitcast_ln132_1_fu_406_p1 <= trunc_ln132_1_reg_670;
    bitcast_ln132_fu_245_p1 <= trunc_ln1_fu_235_p4;
    bitcast_ln133_1_fu_410_p1 <= trunc_ln133_1_reg_680;
    bitcast_ln133_fu_414_p1 <= trunc_ln3_reg_675;
    bitcast_ln22_1_fu_319_p1 <= grp_fu_165_p4;
    bitcast_ln22_fu_198_p1 <= trunc_ln22_s_fu_188_p4;
    bitcast_ln27_fu_418_p1 <= num_res_reg_692;
    bitcast_ln30_fu_459_p1 <= num_res_3_reg_727;
    bitcast_ln38_fu_505_p1 <= c_num_2_reg_737;
    c_p_1_fu_546_p2 <= std_logic_vector(unsigned(c_p_reg_685) + unsigned(ap_const_lv32_FFFFFFFE));
    c_p_2_fu_500_p2 <= std_logic_vector(unsigned(c_p_reg_685) + unsigned(ap_const_lv32_FFFFFFFF));
    c_p_fu_401_p2 <= std_logic_vector(unsigned(trunc_ln22_reg_606) - unsigned(trunc_ln135_fu_398_p1));
    grp_fu_1160_p_ce <= ap_const_logic_1;
    grp_fu_1160_p_din0 <= grp_fu_135_p0;
    grp_fu_1160_p_din1 <= reg_174;
    grp_fu_1160_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_1164_p_ce <= ap_const_logic_1;
    grp_fu_1164_p_din0 <= bitcast_ln133_fu_414_p1;
    grp_fu_1164_p_din1 <= mul1_reg_712;
    grp_fu_1164_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_1168_p_ce <= ap_const_logic_1;
    grp_fu_1168_p_din0 <= grp_fu_143_p0;
    grp_fu_1168_p_din1 <= grp_fu_143_p1;
    grp_fu_1172_p_ce <= ap_const_logic_1;
    grp_fu_1172_p_din0 <= num_res_reg_692;
    grp_fu_1172_p_din1 <= bitcast_ln133_1_fu_410_p1;
    grp_fu_1189_p_ce <= ap_const_logic_1;
    grp_fu_1189_p_din0 <= grp_fu_151_p0;
    grp_fu_1189_p_din1 <= grp_fu_151_p1;
    grp_fu_1203_p_ce <= ap_const_logic_1;
    grp_fu_1203_p_din0 <= grp_fu_155_p0;
    grp_fu_1203_p_din1 <= ap_const_lv32_0;
    grp_fu_1203_p_opcode <= ap_const_lv5_1;
    grp_fu_1208_p_ce <= ap_const_logic_1;
    grp_fu_1208_p_din0 <= bitcast_ln132_fu_245_p1;
    grp_fu_1208_p_din1 <= ap_const_lv32_0;
    grp_fu_1208_p_opcode <= ap_const_lv5_1;

    grp_fu_135_p0_assign_proc : process(bitcast_ln132_reg_628, ap_CS_fsm_state15, sub1_reg_722, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_135_p0 <= sub1_reg_722;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_135_p0 <= bitcast_ln132_reg_628;
        else 
            grp_fu_135_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_143_p0_assign_proc : process(num_res_reg_692, ap_CS_fsm_state12, num_res_3_reg_727, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_143_p0 <= num_res_3_reg_727;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_143_p0 <= num_res_reg_692;
        else 
            grp_fu_143_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_143_p1_assign_proc : process(bitcast_ln132_1_fu_406_p1, bitcast_ln132_1_reg_702, ap_CS_fsm_state12, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_143_p1 <= bitcast_ln132_1_reg_702;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_143_p1 <= bitcast_ln132_1_fu_406_p1;
        else 
            grp_fu_143_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_151_p0_assign_proc : process(reg_179, bitcast_ln22_reg_612, ap_CS_fsm_state3, ap_CS_fsm_state19, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_151_p0 <= reg_179;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_151_p0 <= bitcast_ln22_reg_612;
        else 
            grp_fu_151_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_151_p1_assign_proc : process(ap_CS_fsm_state3, bitcast_ln131_fu_375_p1, bitcast_ln131_reg_665, ap_CS_fsm_state19, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_151_p1 <= bitcast_ln131_reg_665;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_151_p1 <= bitcast_ln131_fu_375_p1;
        else 
            grp_fu_151_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_p0_assign_proc : process(ap_CS_fsm_state1, bitcast_ln22_fu_198_p1, ap_CS_fsm_state2, bitcast_ln22_1_fu_319_p1, num_res_reg_692, num_res_3_reg_727, c_num_2_reg_737, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_155_p0 <= c_num_2_reg_737;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_155_p0 <= num_res_3_reg_727;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_155_p0 <= num_res_reg_692;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_155_p0 <= bitcast_ln22_1_fu_319_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_155_p0 <= bitcast_ln22_fu_198_p1;
        else 
            grp_fu_155_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_165_p4 <= p_read14(127 downto 96);
    icmp_ln22_1_fu_223_p2 <= "0" when (tmp_s_fu_203_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_2_fu_229_p2 <= "1" when (trunc_ln22_1_fu_213_p4 = ap_const_lv23_0) else "0";
    icmp_ln22_3_fu_270_p2 <= "0" when (tmp_2_fu_250_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_4_fu_276_p2 <= "1" when (trunc_ln22_2_fu_260_p4 = ap_const_lv23_0) else "0";
    icmp_ln22_5_fu_342_p2 <= "0" when (tmp_fu_324_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_6_fu_348_p2 <= "1" when (trunc_ln22_4_fu_333_p4 = ap_const_lv23_0) else "0";
    icmp_ln22_fu_282_p2 <= "1" when (trunc_ln22_reg_606 = ap_const_lv32_0) else "0";
    icmp_ln27_1_fu_441_p2 <= "1" when (trunc_ln27_fu_431_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_435_p2 <= "0" when (tmp_5_fu_421_p4 = ap_const_lv8_FF) else "1";
    icmp_ln30_1_fu_482_p2 <= "1" when (trunc_ln30_fu_472_p1 = ap_const_lv23_0) else "0";
    icmp_ln30_fu_476_p2 <= "0" when (tmp_7_fu_462_p4 = ap_const_lv8_FF) else "1";
    icmp_ln38_1_fu_528_p2 <= "1" when (trunc_ln38_fu_518_p1 = ap_const_lv23_0) else "0";
    icmp_ln38_fu_522_p2 <= "0" when (tmp_9_fu_508_p4 = ap_const_lv8_FF) else "1";
    or_ln22_1_fu_297_p2 <= (icmp_ln22_4_reg_639 or icmp_ln22_3_reg_634);
    or_ln22_2_fu_354_p2 <= (icmp_ln22_6_fu_348_p2 or icmp_ln22_5_fu_342_p2);
    or_ln22_fu_287_p2 <= (icmp_ln22_2_reg_623 or icmp_ln22_1_reg_618);
    or_ln27_fu_447_p2 <= (icmp_ln27_fu_435_p2 or icmp_ln27_1_fu_441_p2);
    or_ln30_fu_488_p2 <= (icmp_ln30_fu_476_p2 or icmp_ln30_1_fu_482_p2);
    or_ln38_fu_534_p2 <= (icmp_ln38_fu_522_p2 or icmp_ln38_1_fu_528_p2);
    select_ln38_1_fu_558_p3 <= 
        c_num_2_reg_737 when (and_ln38_fu_540_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln38_2_fu_566_p3 <= 
        ap_const_lv32_0 when (and_ln38_fu_540_p2(0) = '1') else 
        c_p_1_fu_546_p2;
    select_ln38_fu_551_p3 <= 
        num_res_reg_692 when (and_ln38_fu_540_p2(0) = '1') else 
        c_num_2_reg_737;
    tmp_2_fu_250_p4 <= p_read14(94 downto 87);
    tmp_5_fu_421_p4 <= bitcast_ln27_fu_418_p1(30 downto 23);
    tmp_7_fu_462_p4 <= bitcast_ln30_fu_459_p1(30 downto 23);
    tmp_9_fu_508_p4 <= bitcast_ln38_fu_505_p1(30 downto 23);
    tmp_fu_324_p4 <= p_read14(126 downto 119);
    tmp_s_fu_203_p4 <= p_read14(62 downto 55);
    trunc_ln135_fu_398_p1 <= p_read25(32 - 1 downto 0);
    trunc_ln1_fu_235_p4 <= p_read14(95 downto 64);
    trunc_ln22_1_fu_213_p4 <= p_read14(54 downto 32);
    trunc_ln22_2_fu_260_p4 <= p_read14(86 downto 64);
    trunc_ln22_4_fu_333_p4 <= p_read14(118 downto 96);
    trunc_ln22_fu_184_p1 <= p_read14(32 - 1 downto 0);
    trunc_ln22_s_fu_188_p4 <= p_read14(63 downto 32);
    trunc_ln27_fu_431_p1 <= bitcast_ln27_fu_418_p1(23 - 1 downto 0);
    trunc_ln2_fu_366_p4 <= p_read25(63 downto 32);
    trunc_ln30_fu_472_p1 <= bitcast_ln30_fu_459_p1(23 - 1 downto 0);
    trunc_ln38_fu_518_p1 <= bitcast_ln38_fu_505_p1(23 - 1 downto 0);
end behav;
