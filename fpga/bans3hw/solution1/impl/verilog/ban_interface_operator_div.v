// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ban_interface_operator_div (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read14,
        p_read25,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        grp_fu_1160_p_din0,
        grp_fu_1160_p_din1,
        grp_fu_1160_p_opcode,
        grp_fu_1160_p_dout0,
        grp_fu_1160_p_ce,
        grp_fu_1164_p_din0,
        grp_fu_1164_p_din1,
        grp_fu_1164_p_opcode,
        grp_fu_1164_p_dout0,
        grp_fu_1164_p_ce,
        grp_fu_1168_p_din0,
        grp_fu_1168_p_din1,
        grp_fu_1168_p_dout0,
        grp_fu_1168_p_ce,
        grp_fu_1172_p_din0,
        grp_fu_1172_p_din1,
        grp_fu_1172_p_dout0,
        grp_fu_1172_p_ce,
        grp_fu_1189_p_din0,
        grp_fu_1189_p_din1,
        grp_fu_1189_p_dout0,
        grp_fu_1189_p_ce,
        grp_fu_1203_p_din0,
        grp_fu_1203_p_din1,
        grp_fu_1203_p_opcode,
        grp_fu_1203_p_dout0,
        grp_fu_1203_p_ce,
        grp_fu_1208_p_din0,
        grp_fu_1208_p_din1,
        grp_fu_1208_p_opcode,
        grp_fu_1208_p_dout0,
        grp_fu_1208_p_ce
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_state16 = 46'd32768;
parameter    ap_ST_fsm_state17 = 46'd65536;
parameter    ap_ST_fsm_state18 = 46'd131072;
parameter    ap_ST_fsm_state19 = 46'd262144;
parameter    ap_ST_fsm_state20 = 46'd524288;
parameter    ap_ST_fsm_state21 = 46'd1048576;
parameter    ap_ST_fsm_state22 = 46'd2097152;
parameter    ap_ST_fsm_state23 = 46'd4194304;
parameter    ap_ST_fsm_state24 = 46'd8388608;
parameter    ap_ST_fsm_state25 = 46'd16777216;
parameter    ap_ST_fsm_state26 = 46'd33554432;
parameter    ap_ST_fsm_state27 = 46'd67108864;
parameter    ap_ST_fsm_state28 = 46'd134217728;
parameter    ap_ST_fsm_state29 = 46'd268435456;
parameter    ap_ST_fsm_state30 = 46'd536870912;
parameter    ap_ST_fsm_state31 = 46'd1073741824;
parameter    ap_ST_fsm_state32 = 46'd2147483648;
parameter    ap_ST_fsm_state33 = 46'd4294967296;
parameter    ap_ST_fsm_state34 = 46'd8589934592;
parameter    ap_ST_fsm_state35 = 46'd17179869184;
parameter    ap_ST_fsm_state36 = 46'd34359738368;
parameter    ap_ST_fsm_state37 = 46'd68719476736;
parameter    ap_ST_fsm_state38 = 46'd137438953472;
parameter    ap_ST_fsm_state39 = 46'd274877906944;
parameter    ap_ST_fsm_state40 = 46'd549755813888;
parameter    ap_ST_fsm_state41 = 46'd1099511627776;
parameter    ap_ST_fsm_state42 = 46'd2199023255552;
parameter    ap_ST_fsm_state43 = 46'd4398046511104;
parameter    ap_ST_fsm_state44 = 46'd8796093022208;
parameter    ap_ST_fsm_state45 = 46'd17592186044416;
parameter    ap_ST_fsm_state46 = 46'd35184372088832;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] p_read14;
input  [127:0] p_read25;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] grp_fu_1160_p_din0;
output  [31:0] grp_fu_1160_p_din1;
output  [0:0] grp_fu_1160_p_opcode;
input  [31:0] grp_fu_1160_p_dout0;
output   grp_fu_1160_p_ce;
output  [31:0] grp_fu_1164_p_din0;
output  [31:0] grp_fu_1164_p_din1;
output  [0:0] grp_fu_1164_p_opcode;
input  [31:0] grp_fu_1164_p_dout0;
output   grp_fu_1164_p_ce;
output  [31:0] grp_fu_1168_p_din0;
output  [31:0] grp_fu_1168_p_din1;
input  [31:0] grp_fu_1168_p_dout0;
output   grp_fu_1168_p_ce;
output  [31:0] grp_fu_1172_p_din0;
output  [31:0] grp_fu_1172_p_din1;
input  [31:0] grp_fu_1172_p_dout0;
output   grp_fu_1172_p_ce;
output  [31:0] grp_fu_1189_p_din0;
output  [31:0] grp_fu_1189_p_din1;
input  [31:0] grp_fu_1189_p_dout0;
output   grp_fu_1189_p_ce;
output  [31:0] grp_fu_1203_p_din0;
output  [31:0] grp_fu_1203_p_din1;
output  [4:0] grp_fu_1203_p_opcode;
input  [0:0] grp_fu_1203_p_dout0;
output   grp_fu_1203_p_ce;
output  [31:0] grp_fu_1208_p_din0;
output  [31:0] grp_fu_1208_p_din1;
output  [4:0] grp_fu_1208_p_opcode;
input  [0:0] grp_fu_1208_p_dout0;
output   grp_fu_1208_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_174;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state30;
reg   [31:0] reg_179;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state34;
wire   [31:0] trunc_ln22_fu_184_p1;
reg   [31:0] trunc_ln22_reg_606;
wire   [31:0] bitcast_ln22_fu_198_p1;
reg   [31:0] bitcast_ln22_reg_612;
wire   [0:0] icmp_ln22_1_fu_223_p2;
reg   [0:0] icmp_ln22_1_reg_618;
wire   [0:0] icmp_ln22_2_fu_229_p2;
reg   [0:0] icmp_ln22_2_reg_623;
wire   [31:0] bitcast_ln132_fu_245_p1;
reg   [31:0] bitcast_ln132_reg_628;
wire   [0:0] icmp_ln22_3_fu_270_p2;
reg   [0:0] icmp_ln22_3_reg_634;
wire   [0:0] icmp_ln22_4_fu_276_p2;
reg   [0:0] icmp_ln22_4_reg_639;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln22_2_fu_313_p2;
reg   [0:0] and_ln22_2_reg_652;
wire   [31:0] bitcast_ln22_1_fu_319_p1;
wire   [0:0] and_ln22_4_fu_360_p2;
reg   [0:0] and_ln22_4_reg_661;
wire    ap_CS_fsm_state3;
wire   [31:0] bitcast_ln131_fu_375_p1;
reg   [31:0] bitcast_ln131_reg_665;
reg   [31:0] trunc_ln132_1_reg_670;
wire   [31:0] grp_fu_165_p4;
reg   [31:0] trunc_ln3_reg_675;
reg   [31:0] trunc_ln133_1_reg_680;
wire   [31:0] c_p_fu_401_p2;
reg   [31:0] c_p_reg_685;
reg   [31:0] num_res_reg_692;
wire    ap_CS_fsm_state11;
wire   [31:0] bitcast_ln132_1_fu_406_p1;
reg   [31:0] bitcast_ln132_1_reg_702;
wire    ap_CS_fsm_state12;
wire   [31:0] bitcast_ln133_1_fu_410_p1;
reg   [31:0] mul1_reg_712;
wire   [31:0] bitcast_ln133_fu_414_p1;
wire    ap_CS_fsm_state15;
reg   [31:0] sub1_reg_722;
reg   [31:0] num_res_3_reg_727;
wire    ap_CS_fsm_state27;
reg   [31:0] c_num_2_reg_737;
wire    ap_CS_fsm_state43;
wire   [0:0] and_ln27_fu_453_p2;
reg   [0:0] and_ln27_reg_747;
wire    ap_CS_fsm_state44;
wire   [0:0] and_ln30_fu_494_p2;
reg   [0:0] and_ln30_reg_751;
wire    ap_CS_fsm_state45;
wire   [31:0] c_p_2_fu_500_p2;
reg   [31:0] ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8;
reg   [31:0] agg_result_1_0_0_reg_74;
wire   [31:0] select_ln38_fu_551_p3;
wire    ap_CS_fsm_state46;
reg   [31:0] ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8;
reg   [31:0] agg_result_1_1_0_reg_89;
reg   [31:0] ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8;
reg   [31:0] agg_result_1_2_0_reg_104;
wire   [31:0] select_ln38_1_fu_558_p3;
reg   [31:0] ap_phi_mux_agg_result_01_0_phi_fu_124_p8;
reg   [31:0] agg_result_01_0_reg_120;
wire   [31:0] select_ln38_2_fu_566_p3;
reg   [31:0] grp_fu_135_p0;
wire    ap_CS_fsm_state31;
reg   [31:0] grp_fu_143_p0;
reg   [31:0] grp_fu_143_p1;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_151_p0;
reg   [31:0] grp_fu_151_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state35;
reg   [31:0] grp_fu_155_p0;
wire   [31:0] trunc_ln22_s_fu_188_p4;
wire   [7:0] tmp_s_fu_203_p4;
wire   [22:0] trunc_ln22_1_fu_213_p4;
wire   [31:0] trunc_ln1_fu_235_p4;
wire   [7:0] tmp_2_fu_250_p4;
wire   [22:0] trunc_ln22_2_fu_260_p4;
wire   [0:0] or_ln22_fu_287_p2;
wire   [0:0] or_ln22_1_fu_297_p2;
wire   [0:0] and_ln22_fu_291_p2;
wire   [0:0] and_ln22_1_fu_301_p2;
wire   [0:0] and_ln22_3_fu_307_p2;
wire   [0:0] icmp_ln22_fu_282_p2;
wire   [7:0] tmp_fu_324_p4;
wire   [22:0] trunc_ln22_4_fu_333_p4;
wire   [0:0] icmp_ln22_6_fu_348_p2;
wire   [0:0] icmp_ln22_5_fu_342_p2;
wire   [0:0] or_ln22_2_fu_354_p2;
wire   [31:0] trunc_ln2_fu_366_p4;
wire   [31:0] trunc_ln135_fu_398_p1;
wire   [31:0] bitcast_ln27_fu_418_p1;
wire   [7:0] tmp_5_fu_421_p4;
wire   [22:0] trunc_ln27_fu_431_p1;
wire   [0:0] icmp_ln27_1_fu_441_p2;
wire   [0:0] icmp_ln27_fu_435_p2;
wire   [0:0] or_ln27_fu_447_p2;
wire   [31:0] bitcast_ln30_fu_459_p1;
wire   [7:0] tmp_7_fu_462_p4;
wire   [22:0] trunc_ln30_fu_472_p1;
wire   [0:0] icmp_ln30_1_fu_482_p2;
wire   [0:0] icmp_ln30_fu_476_p2;
wire   [0:0] or_ln30_fu_488_p2;
wire   [31:0] bitcast_ln38_fu_505_p1;
wire   [7:0] tmp_9_fu_508_p4;
wire   [22:0] trunc_ln38_fu_518_p1;
wire   [0:0] icmp_ln38_1_fu_528_p2;
wire   [0:0] icmp_ln38_fu_522_p2;
wire   [0:0] or_ln38_fu_534_p2;
wire   [0:0] and_ln38_fu_540_p2;
wire   [31:0] c_p_1_fu_546_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [45:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_return_0_preg <= ap_phi_mux_agg_result_01_0_phi_fu_124_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_return_1_preg <= ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_return_2_preg <= ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_return_3_preg <= ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (((1'd0 == and_ln22_4_reg_661) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747)) | ((1'd0 == and_ln22_2_reg_652) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747))))) begin
        agg_result_01_0_reg_120 <= select_ln38_2_fu_566_p3;
    end else if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == and_ln27_fu_453_p2))) begin
        agg_result_01_0_reg_120 <= c_p_reg_685;
    end else if (((1'b1 == ap_CS_fsm_state45) & (1'd0 == and_ln30_fu_494_p2))) begin
        agg_result_01_0_reg_120 <= c_p_2_fu_500_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln22_4_fu_360_p2) & (1'd1 == and_ln22_2_reg_652))) begin
        agg_result_01_0_reg_120 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (((1'd0 == and_ln22_4_reg_661) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747)) | ((1'd0 == and_ln22_2_reg_652) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747))))) begin
        agg_result_1_0_0_reg_74 <= select_ln38_fu_551_p3;
    end else if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == and_ln27_fu_453_p2))) begin
        agg_result_1_0_0_reg_74 <= num_res_reg_692;
    end else if (((1'b1 == ap_CS_fsm_state45) & (1'd0 == and_ln30_fu_494_p2))) begin
        agg_result_1_0_0_reg_74 <= num_res_3_reg_727;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln22_4_fu_360_p2) & (1'd1 == and_ln22_2_reg_652))) begin
        agg_result_1_0_0_reg_74 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state46) & (((1'd0 == and_ln22_4_reg_661) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747)) | ((1'd0 == and_ln22_2_reg_652) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747)))) | ((1'b1 == ap_CS_fsm_state44) & (1'd0 == and_ln27_fu_453_p2)))) begin
        agg_result_1_1_0_reg_89 <= num_res_3_reg_727;
    end else if (((1'b1 == ap_CS_fsm_state45) & (1'd0 == and_ln30_fu_494_p2))) begin
        agg_result_1_1_0_reg_89 <= c_num_2_reg_737;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln22_4_fu_360_p2) & (1'd1 == and_ln22_2_reg_652))) begin
        agg_result_1_1_0_reg_89 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (((1'd0 == and_ln22_4_reg_661) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747)) | ((1'd0 == and_ln22_2_reg_652) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747))))) begin
        agg_result_1_2_0_reg_104 <= select_ln38_1_fu_558_p3;
    end else if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == and_ln27_fu_453_p2))) begin
        agg_result_1_2_0_reg_104 <= c_num_2_reg_737;
    end else if ((((1'b1 == ap_CS_fsm_state45) & (1'd0 == and_ln30_fu_494_p2)) | ((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln22_4_fu_360_p2) & (1'd1 == and_ln22_2_reg_652)))) begin
        agg_result_1_2_0_reg_104 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln22_2_reg_652 <= and_ln22_2_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln22_2_reg_652))) begin
        and_ln22_4_reg_661 <= and_ln22_4_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        and_ln27_reg_747 <= and_ln27_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        and_ln30_reg_751 <= and_ln30_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln22_4_fu_360_p2) | (1'd0 == and_ln22_2_reg_652)))) begin
        bitcast_ln131_reg_665 <= bitcast_ln131_fu_375_p1;
        c_p_reg_685 <= c_p_fu_401_p2;
        trunc_ln132_1_reg_670 <= {{p_read25[95:64]}};
        trunc_ln133_1_reg_680 <= {{p_read25[127:96]}};
        trunc_ln3_reg_675 <= {{p_read14[127:96]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bitcast_ln132_1_reg_702 <= bitcast_ln132_1_fu_406_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bitcast_ln132_reg_628 <= bitcast_ln132_fu_245_p1;
        bitcast_ln22_reg_612 <= bitcast_ln22_fu_198_p1;
        icmp_ln22_1_reg_618 <= icmp_ln22_1_fu_223_p2;
        icmp_ln22_2_reg_623 <= icmp_ln22_2_fu_229_p2;
        icmp_ln22_3_reg_634 <= icmp_ln22_3_fu_270_p2;
        icmp_ln22_4_reg_639 <= icmp_ln22_4_fu_276_p2;
        trunc_ln22_reg_606 <= trunc_ln22_fu_184_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        c_num_2_reg_737 <= grp_fu_1189_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul1_reg_712 <= grp_fu_1172_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        num_res_3_reg_727 <= grp_fu_1189_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        num_res_reg_692 <= grp_fu_1189_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_174 <= grp_fu_1168_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_179 <= grp_fu_1160_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        sub1_reg_722 <= grp_fu_1164_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (((1'd0 == and_ln22_4_reg_661) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747)) | ((1'd0 == and_ln22_2_reg_652) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747))))) begin
        ap_phi_mux_agg_result_01_0_phi_fu_124_p8 = select_ln38_2_fu_566_p3;
    end else begin
        ap_phi_mux_agg_result_01_0_phi_fu_124_p8 = agg_result_01_0_reg_120;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (((1'd0 == and_ln22_4_reg_661) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747)) | ((1'd0 == and_ln22_2_reg_652) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747))))) begin
        ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8 = select_ln38_fu_551_p3;
    end else begin
        ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8 = agg_result_1_0_0_reg_74;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (((1'd0 == and_ln22_4_reg_661) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747)) | ((1'd0 == and_ln22_2_reg_652) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747))))) begin
        ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8 = num_res_3_reg_727;
    end else begin
        ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8 = agg_result_1_1_0_reg_89;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (((1'd0 == and_ln22_4_reg_661) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747)) | ((1'd0 == and_ln22_2_reg_652) & (1'd1 == and_ln30_reg_751) & (1'd1 == and_ln27_reg_747))))) begin
        ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8 = select_ln38_1_fu_558_p3;
    end else begin
        ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8 = agg_result_1_2_0_reg_104;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_return_0 = ap_phi_mux_agg_result_01_0_phi_fu_124_p8;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_return_1 = ap_phi_mux_agg_result_1_0_0_phi_fu_78_p8;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_return_2 = ap_phi_mux_agg_result_1_1_0_phi_fu_93_p8;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_return_3 = ap_phi_mux_agg_result_1_2_0_phi_fu_108_p8;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_135_p0 = sub1_reg_722;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_135_p0 = bitcast_ln132_reg_628;
    end else begin
        grp_fu_135_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_143_p0 = num_res_3_reg_727;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_143_p0 = num_res_reg_692;
    end else begin
        grp_fu_143_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_143_p1 = bitcast_ln132_1_reg_702;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_143_p1 = bitcast_ln132_1_fu_406_p1;
    end else begin
        grp_fu_143_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_151_p0 = reg_179;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_151_p0 = bitcast_ln22_reg_612;
    end else begin
        grp_fu_151_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_151_p1 = bitcast_ln131_reg_665;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_151_p1 = bitcast_ln131_fu_375_p1;
    end else begin
        grp_fu_151_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_155_p0 = c_num_2_reg_737;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_155_p0 = num_res_3_reg_727;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_155_p0 = num_res_reg_692;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_155_p0 = bitcast_ln22_1_fu_319_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_155_p0 = bitcast_ln22_fu_198_p1;
    end else begin
        grp_fu_155_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln22_4_fu_360_p2) & (1'd1 == and_ln22_2_reg_652))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == and_ln27_fu_453_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln22_1_fu_301_p2 = (or_ln22_1_fu_297_p2 & grp_fu_1208_p_dout0);

assign and_ln22_2_fu_313_p2 = (icmp_ln22_fu_282_p2 & and_ln22_3_fu_307_p2);

assign and_ln22_3_fu_307_p2 = (and_ln22_fu_291_p2 & and_ln22_1_fu_301_p2);

assign and_ln22_4_fu_360_p2 = (or_ln22_2_fu_354_p2 & grp_fu_1203_p_dout0);

assign and_ln22_fu_291_p2 = (or_ln22_fu_287_p2 & grp_fu_1203_p_dout0);

assign and_ln27_fu_453_p2 = (or_ln27_fu_447_p2 & grp_fu_1203_p_dout0);

assign and_ln30_fu_494_p2 = (or_ln30_fu_488_p2 & grp_fu_1203_p_dout0);

assign and_ln38_fu_540_p2 = (or_ln38_fu_534_p2 & grp_fu_1203_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign bitcast_ln131_fu_375_p1 = trunc_ln2_fu_366_p4;

assign bitcast_ln132_1_fu_406_p1 = trunc_ln132_1_reg_670;

assign bitcast_ln132_fu_245_p1 = trunc_ln1_fu_235_p4;

assign bitcast_ln133_1_fu_410_p1 = trunc_ln133_1_reg_680;

assign bitcast_ln133_fu_414_p1 = trunc_ln3_reg_675;

assign bitcast_ln22_1_fu_319_p1 = grp_fu_165_p4;

assign bitcast_ln22_fu_198_p1 = trunc_ln22_s_fu_188_p4;

assign bitcast_ln27_fu_418_p1 = num_res_reg_692;

assign bitcast_ln30_fu_459_p1 = num_res_3_reg_727;

assign bitcast_ln38_fu_505_p1 = c_num_2_reg_737;

assign c_p_1_fu_546_p2 = ($signed(c_p_reg_685) + $signed(32'd4294967294));

assign c_p_2_fu_500_p2 = ($signed(c_p_reg_685) + $signed(32'd4294967295));

assign c_p_fu_401_p2 = (trunc_ln22_reg_606 - trunc_ln135_fu_398_p1);

assign grp_fu_1160_p_ce = 1'b1;

assign grp_fu_1160_p_din0 = grp_fu_135_p0;

assign grp_fu_1160_p_din1 = reg_174;

assign grp_fu_1160_p_opcode = 2'd1;

assign grp_fu_1164_p_ce = 1'b1;

assign grp_fu_1164_p_din0 = bitcast_ln133_fu_414_p1;

assign grp_fu_1164_p_din1 = mul1_reg_712;

assign grp_fu_1164_p_opcode = 2'd1;

assign grp_fu_1168_p_ce = 1'b1;

assign grp_fu_1168_p_din0 = grp_fu_143_p0;

assign grp_fu_1168_p_din1 = grp_fu_143_p1;

assign grp_fu_1172_p_ce = 1'b1;

assign grp_fu_1172_p_din0 = num_res_reg_692;

assign grp_fu_1172_p_din1 = bitcast_ln133_1_fu_410_p1;

assign grp_fu_1189_p_ce = 1'b1;

assign grp_fu_1189_p_din0 = grp_fu_151_p0;

assign grp_fu_1189_p_din1 = grp_fu_151_p1;

assign grp_fu_1203_p_ce = 1'b1;

assign grp_fu_1203_p_din0 = grp_fu_155_p0;

assign grp_fu_1203_p_din1 = 32'd0;

assign grp_fu_1203_p_opcode = 5'd1;

assign grp_fu_1208_p_ce = 1'b1;

assign grp_fu_1208_p_din0 = bitcast_ln132_fu_245_p1;

assign grp_fu_1208_p_din1 = 32'd0;

assign grp_fu_1208_p_opcode = 5'd1;

assign grp_fu_165_p4 = {{p_read14[127:96]}};

assign icmp_ln22_1_fu_223_p2 = ((tmp_s_fu_203_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_229_p2 = ((trunc_ln22_1_fu_213_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_3_fu_270_p2 = ((tmp_2_fu_250_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_4_fu_276_p2 = ((trunc_ln22_2_fu_260_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_5_fu_342_p2 = ((tmp_fu_324_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_6_fu_348_p2 = ((trunc_ln22_4_fu_333_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_282_p2 = ((trunc_ln22_reg_606 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_1_fu_441_p2 = ((trunc_ln27_fu_431_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_435_p2 = ((tmp_5_fu_421_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln30_1_fu_482_p2 = ((trunc_ln30_fu_472_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_476_p2 = ((tmp_7_fu_462_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln38_1_fu_528_p2 = ((trunc_ln38_fu_518_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_522_p2 = ((tmp_9_fu_508_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln22_1_fu_297_p2 = (icmp_ln22_4_reg_639 | icmp_ln22_3_reg_634);

assign or_ln22_2_fu_354_p2 = (icmp_ln22_6_fu_348_p2 | icmp_ln22_5_fu_342_p2);

assign or_ln22_fu_287_p2 = (icmp_ln22_2_reg_623 | icmp_ln22_1_reg_618);

assign or_ln27_fu_447_p2 = (icmp_ln27_fu_435_p2 | icmp_ln27_1_fu_441_p2);

assign or_ln30_fu_488_p2 = (icmp_ln30_fu_476_p2 | icmp_ln30_1_fu_482_p2);

assign or_ln38_fu_534_p2 = (icmp_ln38_fu_522_p2 | icmp_ln38_1_fu_528_p2);

assign select_ln38_1_fu_558_p3 = ((and_ln38_fu_540_p2[0:0] == 1'b1) ? c_num_2_reg_737 : 32'd0);

assign select_ln38_2_fu_566_p3 = ((and_ln38_fu_540_p2[0:0] == 1'b1) ? 32'd0 : c_p_1_fu_546_p2);

assign select_ln38_fu_551_p3 = ((and_ln38_fu_540_p2[0:0] == 1'b1) ? num_res_reg_692 : c_num_2_reg_737);

assign tmp_2_fu_250_p4 = {{p_read14[94:87]}};

assign tmp_5_fu_421_p4 = {{bitcast_ln27_fu_418_p1[30:23]}};

assign tmp_7_fu_462_p4 = {{bitcast_ln30_fu_459_p1[30:23]}};

assign tmp_9_fu_508_p4 = {{bitcast_ln38_fu_505_p1[30:23]}};

assign tmp_fu_324_p4 = {{p_read14[126:119]}};

assign tmp_s_fu_203_p4 = {{p_read14[62:55]}};

assign trunc_ln135_fu_398_p1 = p_read25[31:0];

assign trunc_ln1_fu_235_p4 = {{p_read14[95:64]}};

assign trunc_ln22_1_fu_213_p4 = {{p_read14[54:32]}};

assign trunc_ln22_2_fu_260_p4 = {{p_read14[86:64]}};

assign trunc_ln22_4_fu_333_p4 = {{p_read14[118:96]}};

assign trunc_ln22_fu_184_p1 = p_read14[31:0];

assign trunc_ln22_s_fu_188_p4 = {{p_read14[63:32]}};

assign trunc_ln27_fu_431_p1 = bitcast_ln27_fu_418_p1[22:0];

assign trunc_ln2_fu_366_p4 = {{p_read25[63:32]}};

assign trunc_ln30_fu_472_p1 = bitcast_ln30_fu_459_p1[22:0];

assign trunc_ln38_fu_518_p1 = bitcast_ln38_fu_505_p1[22:0];

endmodule //ban_interface_operator_div
